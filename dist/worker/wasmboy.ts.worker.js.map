{"version":3,"file":"wasmboy.ts.worker.js","sources":["../../lib/worker/util.js","../../lib/worker/workerapi.js","../../lib/worker/constants.js","../../lib/worker/smartworker.js","../../lib/wasmboy/worker/graphics/onmessage.js","../../lib/wasmboy/worker/audio/onmessage.js","../../lib/wasmboy/worker/controller/onmessage.js","../../lib/wasmboy/worker/memory/rom.js","../../lib/wasmboy/worker/memory/ram.js","../../lib/wasmboy/worker/memory/header.js","../../lib/wasmboy/worker/memory/gameboymemory.js","../../lib/wasmboy/worker/memory/palettememory.js","../../lib/wasmboy/worker/memory/internalstate.js","../../lib/wasmboy/worker/memory/onmessage.js","../core/getWasmBoyTsCore.esm.js","../../lib/common/common.js","../../lib/wasmboy/worker/timestamp.js","../../lib/wasmboy/worker/update.js","../../lib/wasmboy/worker/wasmboy.worker.js"],"sourcesContent":["export function getEventData(event) {\n  if (event.data) {\n    return event.data;\n  }\n\n  return event;\n}\n\nexport const isInBrowser = typeof self !== 'undefined';\n\n// Function to read a base64 string as a buffer\nexport function readBase64String(base64String) {\n  if (isInBrowser) {\n    return base64String;\n  } else {\n    return readBase64Buffer(base64String).toString('utf8');\n  }\n}\n\nexport function readBase64Buffer(base64String) {\n  return Buffer.from(base64String.split(',')[1], 'base64');\n}\n","// Isomorphic worker api to be imported by web workers\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n// Initilize some of our isomorphic values\nimport { isInBrowser } from './util';\n\nlet parentPort;\nif (!isInBrowser) {\n  parentPort = require('worker_threads').parentPort;\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_postmessage_value_transferlist\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\nexport function postMessage(message, transferArray) {\n  // Can't bind parentPort.postMessage, so we need to kinda copy code here :p\n  if (isInBrowser) {\n    self.postMessage(message, transferArray);\n  } else {\n    parentPort.postMessage(message, transferArray);\n  }\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_parentport\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage\nexport function onMessage(callback, port) {\n  if (!callback) {\n    console.error('workerapi: No callback was provided to onMessage!');\n  }\n\n  // If we passed a port, use that\n  if (port) {\n    if (isInBrowser) {\n      // We are in the browser\n      port.onmessage = callback;\n    } else {\n      // We are in Node\n      port.on('message', callback);\n    }\n    return;\n  }\n\n  if (isInBrowser) {\n    // We are in the browser\n    self.onmessage = callback;\n  } else {\n    // We are in Node\n    parentPort.on('message', callback);\n  }\n}\n","export const WORKER_MESSAGE_TYPE = {\n  CONNECT: 'CONNECT',\n  INSTANTIATE_WASM: 'INSTANTIATE_WASM',\n  CLEAR_MEMORY: 'CLEAR_MEMORY',\n  CLEAR_MEMORY_DONE: 'CLEAR_MEMORY_DONE',\n  GET_MEMORY: 'GET_MEMORY',\n  SET_MEMORY: 'SET_MEMORY',\n  SET_MEMORY_DONE: 'SET_MEMORY_DONE',\n  GET_CONSTANTS: 'GET_CONSTANTS',\n  GET_CONSTANTS_DONE: 'GET_CONSTANTS_DONE',\n  CONFIG: 'CONFIG',\n  RESET_AUDIO_QUEUE: 'RESET_AUDIO_QUEUE',\n  PLAY: 'PLAY',\n  PAUSE: 'PAUSE',\n  UPDATED: 'UPDATED',\n  CRASHED: 'CRASHED',\n  SET_JOYPAD_STATE: 'SET_JOYPAD_STATE',\n  AUDIO_LATENCY: 'AUDIO_LATENCY',\n  RUN_WASM_EXPORT: 'RUN_WASM_EXPORT',\n  GET_WASM_MEMORY_SECTION: 'GET_WASM_MEMORY_SECTION',\n  GET_WASM_CONSTANT: 'GET_WASM_CONSTANT'\n};\n\nexport const WORKER_ID = {\n  LIB: 'LIB',\n  GRAPHICS: 'GRAPHICS',\n  MEMORY: 'MEMORY',\n  CONTROLLER: 'CONTROLLER',\n  AUDIO: 'AUDIO'\n};\n\nexport const MEMORY_TYPE = {\n  CARTRIDGE_RAM: 'CARTRIDGE_RAM',\n  CARTRIDGE_ROM: 'CARTRIDGE_ROM',\n  CARTRIDGE_HEADER: 'CARTRIDGE_HEADER',\n  GAMEBOY_MEMORY: 'GAMEBOY_MEMORY',\n  PALETTE_MEMORY: 'PALETTE_MEMORY',\n  INTERNAL_STATE: 'INTERNAL_STATE'\n};\n","// Smarter workers.\n// Workers with ids, pub sub, etc...\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n/*ROLLUP_REPLACE_NODE\nconst { Worker } = require('worker_threads');\nROLLUP_REPLACE_NODE*/\n\nimport { getEventData, readBase64String } from './util';\n\n// Generate ids. Use a counter to help against possible collisions.\nlet idCounter = 0;\nconst generateId = () => {\n  const randomId = Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(2, 10);\n  idCounter++;\n  const id = `${randomId}-${idCounter}`;\n  if (idCounter > 100000) {\n    idCounter = 0;\n  }\n  return id;\n};\n\nexport function getSmartWorkerMessage(message, messageId, workerId) {\n  if (!messageId) {\n    messageId = generateId();\n  }\n  return {\n    workerId,\n    messageId,\n    message\n  };\n}\n\nexport class SmartWorker {\n  constructor(workerUrl, id) {\n    this.id = generateId();\n    if (id) {\n      this.id = id;\n    }\n    this.messageListeners = [];\n\n    /*ROLLUP_REPLACE_BROWSER\n    \n    // Can't load base63 data string directly because safari\n    // https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\n    let workerJs = atob(workerUrl.split(',')[1]);\n    let blob;\n    try {\n      blob = new Blob([workerJs], {type: 'application/javascript'});\n    } catch (e) {\n      // Legacy\n      window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n      blob = new BlobBuilder();\n      blob.append(workerJs);\n      blob = blob.getBlob();\n    }\n    this.worker = new Worker(URL.createObjectURL(blob));\n\n\n    this.worker.onmessage = this._onMessageHandler.bind(this);\n\n    ROLLUP_REPLACE_BROWSER*/\n\n    /*ROLLUP_REPLACE_NODE\n\n    // Split by Comma, to remove the file header from the base 64 string\n    const workerAsString = readBase64String(workerUrl);\n    this.worker = new Worker(workerAsString, {\n      eval: true\n    });\n    this.worker.on('message', this._onMessageHandler.bind(this))\n\n    ROLLUP_REPLACE_NODE*/\n  }\n\n  postMessage(message, transfer) {\n    const messageObject = getSmartWorkerMessage(message, undefined, this.id);\n    const messageId = messageObject.messageId;\n\n    const messageIdListener = new Promise(resolve => {\n      // Listen for a message with the same message id to be returned\n      this.addMessageListener((responseMessage, messageListener) => {\n        const eventData = getEventData(responseMessage);\n        if (eventData.messageId === messageId) {\n          this.removeMessageListener(messageListener.id);\n          resolve(eventData);\n        }\n      });\n    });\n\n    this.worker.postMessage(messageObject, transfer);\n\n    return messageIdListener;\n  }\n\n  addMessageListener(callback) {\n    this.messageListeners.push({\n      id: generateId(),\n      callback: callback\n    });\n  }\n\n  removeMessageListener(id) {\n    let messageListenerIndex;\n    this.messageListeners.some((messageListener, index) => {\n      if (messageListener.id === id) {\n        messageListenerIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (messageListenerIndex !== undefined) {\n      this.messageListeners.splice(messageListenerIndex, 1);\n    }\n  }\n\n  _onMessageHandler(message) {\n    this.messageListeners.forEach(messageListener => {\n      messageListener.callback(message, messageListener);\n    });\n  }\n}\n","import { postMessage, onMessage } from '../../../worker/workerapi';\nimport { WORKER_MESSAGE_TYPE } from '../../../worker/constants';\nimport { getEventData } from '../../../worker/util';\nimport { getSmartWorkerMessage } from '../../../worker/smartworker';\n\n// Function to handle on message from graphics worker\n// to the lib worker\nexport function graphicsWorkerOnMessage(libWorker, event) {\n  // Handle our messages from the main thread\n  const eventData = getEventData(event);\n\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS: {\n      libWorker.WASMBOY_CURRENT_FRAME_OUTPUT_LOCATION = libWorker.wasmInstance.exports.frameInProgressVideoOutputLocation.valueOf();\n      libWorker.WASMBOY_CURRENT_FRAME_SIZE = libWorker.wasmInstance.exports.FRAME_SIZE.valueOf();\n      // Forward to our lib worker\n      libWorker.graphicsWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.GET_CONSTANTS_DONE,\n            WASMBOY_CURRENT_FRAME_OUTPUT_LOCATION: libWorker.wasmInstance.exports.frameInProgressVideoOutputLocation.valueOf()\n          },\n          eventData.messageId\n        )\n      );\n      return;\n    }\n  }\n}\n","import { postMessage, onMessage } from '../../../worker/workerapi';\nimport { WORKER_MESSAGE_TYPE } from '../../../worker/constants';\nimport { getEventData } from '../../../worker/util';\nimport { getSmartWorkerMessage } from '../../../worker/smartworker';\n\n// Function to handler audio worker on message to the libWorker\nexport function audioWorkerOnMessage(libWorker, event) {\n  // Handle our messages from the main thread\n  const eventData = getEventData(event);\n\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS: {\n      libWorker.WASMBOY_SOUND_OUTPUT_LOCATION = libWorker.wasmInstance.exports.soundOutputLocation.valueOf();\n      // Forward to our lib worker\n      libWorker.audioWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.GET_CONSTANTS_DONE,\n            WASMBOY_SOUND_OUTPUT_LOCATION: libWorker.wasmInstance.exports.soundOutputLocation.valueOf()\n          },\n          eventData.messageId\n        )\n      );\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.AUDIO_LATENCY: {\n      libWorker.currentAudioLatencyInSeconds = eventData.message.latency;\n      return;\n    }\n  }\n}\n","import { postMessage, onMessage } from '../../../worker/workerapi';\nimport { WORKER_MESSAGE_TYPE } from '../../../worker/constants';\nimport { getEventData } from '../../../worker/util';\nimport { getSmartWorkerMessage } from '../../../worker/smartworker';\n\n// Handler for when the controller worker posts to the libWorker\nexport function controllerWorkerOnMessage(libWorker, event) {\n  // Handle our messages from the main thread\n  const eventData = getEventData(event);\n\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.SET_JOYPAD_STATE: {\n      // Config will come in as an array, pass in values using apply\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n      const setJoypadStateParamsAsArray = eventData.message.setJoypadStateParamsAsArray;\n      libWorker.wasmInstance.exports.setJoypadState.apply(libWorker, setJoypadStateParamsAsArray);\n      return;\n    }\n  }\n}\n","// Private function to get the caretridge rom\nexport function getCartridgeRom(libWorker) {\n  if (!libWorker.wasmByteMemory) {\n    return new Uint8Array();\n  }\n\n  // Depening on the rom type, we will have different rom sizes.\n  // Due memory restrictions described in:\n  // https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/offline-for-pwa\n  // We will make sure to only store as much as we need per ROM :)\n\n  // Similar to `initializeCartridgeType()` in `wasm/memory/memory.ts`\n  // We will determine our cartridge type\n  // Get our game MBC type from the cartridge header\n  // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n  let cartridgeType = libWorker.wasmByteMemory[libWorker.WASMBOY_GAME_BYTES_LOCATION + 0x0147];\n\n  let romSize = undefined;\n  if (cartridgeType === 0x00) {\n    // ROM only, 32KB\n    romSize = 0x8000;\n  } else if (cartridgeType >= 0x01 && cartridgeType <= 0x03) {\n    // MBC1 2MB of ROM\n    romSize = 0x200000;\n  } else if (cartridgeType >= 0x05 && cartridgeType <= 0x06) {\n    // MBC2 256KB ROM\n    romSize = 0x40000;\n  } else if (cartridgeType >= 0x0f && cartridgeType <= 0x13) {\n    // MBC3 2MB of ROM\n    romSize = 0x200000;\n  } else if (cartridgeType >= 0x19 && cartridgeType <= 0x1e) {\n    // MBC5 8MB of ROM\n    romSize = 0x800000;\n  }\n\n  if (!romSize) {\n    return new Uint8Array();\n  }\n\n  // Finally fill our cartridgeRam from the ram in memory\n  const cartridgeRom = libWorker.wasmByteMemory.slice(\n    libWorker.WASMBOY_GAME_BYTES_LOCATION,\n    libWorker.WASMBOY_GAME_BYTES_LOCATION + romSize\n  );\n  return cartridgeRom;\n}\n","// Private function to get the cartridge ram\nexport function getCartridgeRam(libWorker) {\n  if (!libWorker.wasmByteMemory) {\n    return new Uint8Array();\n  }\n\n  // Depening on the rom type, we will have different ram sizes.\n  // Due memory restrictions described in:\n  // https://developers.google.com/web/fundamentals/instant-and-offline/web-storage/offline-for-pwa\n  // We will make sure to only store as much as we need per ROM :)\n\n  // Similar to `initializeCartridgeType()` in `wasm/memory/memory.ts`\n  // We will determine our cartridge type\n  // Get our game MBC type from the cartridge header\n  // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n  let cartridgeType = libWorker.wasmByteMemory[libWorker.WASMBOY_GAME_BYTES_LOCATION + 0x0147];\n\n  let ramSize = undefined;\n  if (cartridgeType === 0x00) {\n    // No memory for this rom type\n    return new Uint8Array();\n  } else if (cartridgeType >= 0x01 && cartridgeType <= 0x03) {\n    // MBC1 32KB of Ram\n    ramSize = 0x8000;\n  } else if (cartridgeType >= 0x05 && cartridgeType <= 0x06) {\n    // MBC2 512X4 Bytes, 2KB\n    ramSize = 0x800;\n  } else if (cartridgeType >= 0x0f && cartridgeType <= 0x13) {\n    // MBC3 32KB of Ram\n    ramSize = 0x8000;\n  } else if (cartridgeType >= 0x19 && cartridgeType <= 0x1e) {\n    // MBC5 128KB of Ram\n    ramSize = 0x20000;\n  }\n\n  if (!ramSize) {\n    return new Uint8Array();\n  }\n\n  // Finally fill our cartridgeRam from the ram in memory\n  const cartridgeRam = libWorker.wasmByteMemory.slice(\n    libWorker.WASMBOY_GAME_RAM_BANKS_LOCATION,\n    libWorker.WASMBOY_GAME_RAM_BANKS_LOCATION + ramSize\n  );\n  return cartridgeRam;\n}\n","// Function to get the cartridge header\nexport function getCartridgeHeader(libWorker) {\n  if (!libWorker.wasmByteMemory) {\n    return new Uint8Array();\n  }\n\n  // Header is at 0x0134 - 0x014F\n  // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n  const headerLength = 0x014f - 0x0134;\n  const headerLocation = libWorker.WASMBOY_GAME_BYTES_LOCATION + 0x0134;\n  const headerArray = libWorker.wasmByteMemory.slice(headerLocation, headerLocation + headerLength);\n\n  return headerArray;\n}\n","// Returns the standard 0xFFFF gameboy memory\n// You will normally see in gameboy docs.\n// This is returned from the core, and represents\n// This wasmboy gameboy state\nexport function getGameBoyMemory(libWorker) {\n  return libWorker.wasmByteMemory.slice(\n    libWorker.WASMBOY_INTERNAL_MEMORY_LOCATION,\n    libWorker.WASMBOY_INTERNAL_MEMORY_LOCATION + libWorker.WASMBOY_INTERNAL_MEMORY_SIZE\n  );\n}\n","// Function to get the current palette data for\n// GBC in memory. This is needed to load state with\n// The correct colors\nexport function getPaletteMemory(libWorker) {\n  return libWorker.wasmByteMemory.slice(\n    libWorker.WASMBOY_PALETTE_MEMORY_LOCATION,\n    libWorker.WASMBOY_PALETTE_MEMORY_LOCATION + libWorker.WASMBOY_PALETTE_MEMORY_SIZE\n  );\n}\n","// Returns the internal savestate of the wasmboy core,\n// To save all soft values held in memory\nexport function getInternalState(libWorker) {\n  libWorker.wasmInstance.exports.saveState();\n  return libWorker.wasmByteMemory.slice(\n    libWorker.WASMBOY_INTERNAL_STATE_LOCATION,\n    libWorker.WASMBOY_INTERNAL_STATE_LOCATION + libWorker.WASMBOY_INTERNAL_STATE_SIZE\n  );\n}\n","import { postMessage, onMessage } from '../../../worker/workerapi';\nimport { WORKER_MESSAGE_TYPE, MEMORY_TYPE } from '../../../worker/constants';\nimport { getEventData } from '../../../worker/util';\nimport { getSmartWorkerMessage } from '../../../worker/smartworker';\n\n// Our memory getters\nimport { getCartridgeRom } from './rom';\nimport { getCartridgeRam } from './ram';\nimport { getCartridgeHeader } from './header';\nimport { getGameBoyMemory } from './gameboymemory';\nimport { getPaletteMemory } from './palettememory';\nimport { getInternalState } from './internalstate';\n\n// On message handler for when memory worker\n// posts to lib Worker\nexport function memoryWorkerOnMessage(libWorker, event) {\n  // Handle our messages from the main thread\n  const eventData = getEventData(event);\n\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.CLEAR_MEMORY: {\n      // Clear Wasm memory\n      // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n      for (let i = 0; i <= libWorker.wasmByteMemory.length; i++) {\n        libWorker.wasmByteMemory[i] = 0;\n      }\n\n      const wasmByteMemory = libWorker.wasmByteMemory.slice(0);\n      libWorker.memoryWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.CLEAR_MEMORY_DONE,\n            wasmByteMemory: wasmByteMemory.buffer\n          },\n          eventData.messageId\n        ),\n        [wasmByteMemory.buffer]\n      );\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS: {\n      libWorker.WASMBOY_GAME_BYTES_LOCATION = libWorker.wasmInstance.exports.gameBytesLocation.valueOf();\n      (libWorker.WASMBOY_GAME_RAM_BANKS_LOCATION = libWorker.wasmInstance.exports.gameRamBanksLocation.valueOf()),\n        (libWorker.WASMBOY_INTERNAL_STATE_SIZE = libWorker.wasmInstance.exports.wasmBoyInternalStateSize.valueOf()),\n        (libWorker.WASMBOY_INTERNAL_STATE_LOCATION = libWorker.wasmInstance.exports.wasmBoyInternalStateLocation.valueOf()),\n        (libWorker.WASMBOY_INTERNAL_MEMORY_SIZE = libWorker.wasmInstance.exports.gameBoyInternalMemorySize.valueOf()),\n        (libWorker.WASMBOY_INTERNAL_MEMORY_LOCATION = libWorker.wasmInstance.exports.gameBoyInternalMemoryLocation.valueOf()),\n        (libWorker.WASMBOY_PALETTE_MEMORY_SIZE = libWorker.wasmInstance.exports.gameboyColorPaletteSize.valueOf()),\n        (libWorker.WASMBOY_PALETTE_MEMORY_LOCATION = libWorker.wasmInstance.exports.gameboyColorPaletteLocation.valueOf());\n\n      // Forward to our lib worker\n      libWorker.memoryWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.GET_CONSTANTS_DONE,\n            WASMBOY_GAME_BYTES_LOCATION: libWorker.wasmInstance.exports.gameBytesLocation.valueOf(),\n            WASMBOY_GAME_RAM_BANKS_LOCATION: libWorker.wasmInstance.exports.gameRamBanksLocation.valueOf(),\n            WASMBOY_INTERNAL_STATE_SIZE: libWorker.wasmInstance.exports.wasmBoyInternalStateSize.valueOf(),\n            WASMBOY_INTERNAL_STATE_LOCATION: libWorker.wasmInstance.exports.wasmBoyInternalStateLocation.valueOf(),\n            WASMBOY_INTERNAL_MEMORY_SIZE: libWorker.wasmInstance.exports.gameBoyInternalMemorySize.valueOf(),\n            WASMBOY_INTERNAL_MEMORY_LOCATION: libWorker.wasmInstance.exports.gameBoyInternalMemoryLocation.valueOf(),\n            WASMBOY_PALETTE_MEMORY_SIZE: libWorker.wasmInstance.exports.gameboyColorPaletteSize.valueOf(),\n            WASMBOY_PALETTE_MEMORY_LOCATION: libWorker.wasmInstance.exports.gameboyColorPaletteLocation.valueOf()\n          },\n          eventData.messageId\n        )\n      );\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.SET_MEMORY: {\n      const memoryKeys = Object.keys(eventData.message);\n\n      if (memoryKeys.includes(MEMORY_TYPE.CARTRIDGE_ROM)) {\n        libWorker.wasmByteMemory.set(new Uint8Array(eventData.message[MEMORY_TYPE.CARTRIDGE_ROM]), libWorker.WASMBOY_GAME_BYTES_LOCATION);\n      }\n      if (memoryKeys.includes(MEMORY_TYPE.CARTRIDGE_RAM)) {\n        libWorker.wasmByteMemory.set(\n          new Uint8Array(eventData.message[MEMORY_TYPE.CARTRIDGE_RAM]),\n          libWorker.WASMBOY_GAME_RAM_BANKS_LOCATION\n        );\n      }\n      if (memoryKeys.includes(MEMORY_TYPE.GAMEBOY_MEMORY)) {\n        libWorker.wasmByteMemory.set(\n          new Uint8Array(eventData.message[MEMORY_TYPE.GAMEBOY_MEMORY]),\n          libWorker.WASMBOY_INTERNAL_MEMORY_LOCATION\n        );\n      }\n      if (memoryKeys.includes(MEMORY_TYPE.PALETTE_MEMORY)) {\n        libWorker.wasmByteMemory.set(\n          new Uint8Array(eventData.message[MEMORY_TYPE.PALETTE_MEMORY]),\n          libWorker.WASMBOY_PALETTE_MEMORY_LOCATION\n        );\n      }\n      if (memoryKeys.includes(MEMORY_TYPE.INTERNAL_STATE)) {\n        libWorker.wasmByteMemory.set(\n          new Uint8Array(eventData.message[MEMORY_TYPE.INTERNAL_STATE]),\n          libWorker.WASMBOY_INTERNAL_STATE_LOCATION\n        );\n        libWorker.wasmInstance.exports.loadState();\n      }\n\n      libWorker.memoryWorkerPort.postMessage(\n        getSmartWorkerMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.SET_MEMORY_DONE\n          },\n          eventData.messageId\n        )\n      );\n\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.GET_MEMORY: {\n      // Construct our data object\n      const responseMemory = {\n        type: WORKER_MESSAGE_TYPE.GET_MEMORY\n      };\n      const responseTransferrables = [];\n\n      const memoryTypes = eventData.message.memoryTypes;\n\n      if (memoryTypes.includes(MEMORY_TYPE.CARTRIDGE_ROM)) {\n        const cartridgeRom = getCartridgeRom(libWorker).buffer;\n        responseMemory[MEMORY_TYPE.CARTRIDGE_ROM] = cartridgeRom;\n        responseTransferrables.push(cartridgeRom);\n      }\n      if (memoryTypes.includes(MEMORY_TYPE.CARTRIDGE_RAM)) {\n        const cartridgeRam = getCartridgeRam(libWorker).buffer;\n        responseMemory[MEMORY_TYPE.CARTRIDGE_RAM] = cartridgeRam;\n        responseTransferrables.push(cartridgeRam);\n      }\n      if (memoryTypes.includes(MEMORY_TYPE.CARTRIDGE_HEADER)) {\n        const cartridgeHeader = getCartridgeHeader(libWorker).buffer;\n        responseMemory[MEMORY_TYPE.CARTRIDGE_HEADER] = cartridgeHeader;\n        responseTransferrables.push(cartridgeHeader);\n      }\n      if (memoryTypes.includes(MEMORY_TYPE.GAMEBOY_MEMORY)) {\n        const gameboyMemory = getGameBoyMemory(libWorker).buffer;\n        responseMemory[MEMORY_TYPE.GAMEBOY_MEMORY] = gameboyMemory;\n        responseTransferrables.push(gameboyMemory);\n      }\n      if (memoryTypes.includes(MEMORY_TYPE.PALETTE_MEMORY)) {\n        const paletteMemory = getPaletteMemory(libWorker).buffer;\n        responseMemory[MEMORY_TYPE.PALETTE_MEMORY] = paletteMemory;\n        responseTransferrables.push(paletteMemory);\n      }\n      if (memoryTypes.includes(MEMORY_TYPE.INTERNAL_STATE)) {\n        libWorker.wasmInstance.exports.saveState();\n        const internalState = getInternalState(libWorker).buffer;\n        responseMemory[MEMORY_TYPE.INTERNAL_STATE] = internalState;\n        responseTransferrables.push(internalState);\n      }\n\n      libWorker.memoryWorkerPort.postMessage(getSmartWorkerMessage(responseMemory, eventData.messageId), responseTransferrables);\n\n      return;\n    }\n  }\n}\n","// Banner placed by rollup to mock out some items on our esm build\n// This is useful for things like wasmmemory\nconst wasmboyMemorySize = 0x8b0000; // Simply initialized to the size we need\n\nconst wasmByteMemory = new Uint8ClampedArray(wasmboyMemorySize); // Memory mock\n\nconst memory = {\n  size: () => {\n    return wasmboyMemorySize;\n  },\n  grow: () => {},\n  wasmByteMemory: wasmByteMemory\n};\n\nconst load = offset => {\n  return wasmByteMemory[offset];\n};\n\nconst store = (offset, value) => {\n  wasmByteMemory[offset] = value;\n};\n\nconst abs = value => {\n  return Math.abs(value);\n}; // Constants that will be shared by the wasm core of the emulator\n// And libraries built around the wasm (such as the official JS), or @CryZe wasmboy-rs\n// ----------------------------------\n// Wasmboy Memory Map\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// ----------------------------------\n// WasmBoy\n\n\nvar WASMBOY_MEMORY_LOCATION = 0x000000;\nvar WASMBOY_MEMORY_SIZE = 0x8b0000;\nvar WASMBOY_WASM_PAGES = WASMBOY_MEMORY_SIZE / 1024 / 64; // AssemblyScript\n\nvar ASSEMBLYSCRIPT_MEMORY_LOCATION = 0x000000;\nvar ASSEMBLYSCRIPT_MEMORY_SIZE = 0x000400; // WasmBoy States\n\nvar WASMBOY_STATE_LOCATION = 0x000400;\nvar WASMBOY_STATE_SIZE = 0x000400; // Gameboy Internal Memory\n\nvar GAMEBOY_INTERNAL_MEMORY_LOCATION = 0x000800;\nvar GAMEBOY_INTERNAL_MEMORY_SIZE = 0x00ffff;\nvar VIDEO_RAM_LOCATION = 0x000800;\nvar VIDEO_RAM_SIZE = 0x004000;\nvar WORK_RAM_LOCATION = 0x004800;\nvar WORK_RAM_SIZE = 0x008000;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION = 0x00c800;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE = 0x004000; // Graphics Output\n\nvar GRAPHICS_OUTPUT_LOCATION = 0x010800;\nvar GRAPHICS_OUTPUT_SIZE = 0x07f400;\nvar GBC_PALETTE_LOCATION = 0x010800;\nvar GBC_PALETTE_SIZE = 0x000200;\nvar BG_PRIORITY_MAP_LOCATION = 0x011000;\nvar BG_PRIORITY_MAP_SIZE = 0x005c00;\nvar FRAME_LOCATION = 0x016c00;\nvar FRAME_SIZE = 0x016c00;\nvar BACKGROUND_MAP_LOCATION = 0x038c00;\nvar BACKGROUND_MAP_SIZE = 0x030000;\nvar TILE_DATA_LOCATION = 0x068c00;\nvar TILE_DATA_SIZE = 0x024000;\nvar OAM_TILES_LOCATION = 0x08cc00;\nvar OAM_TILES_SIZE = 0x003000; // Audio Output\n\nvar AUDIO_BUFFER_LOCATION = 0x08fc00;\nvar AUDIO_BUFFER_SIZE = 0x020000; // Catridge Memory\n\nvar CARTRIDGE_RAM_LOCATION = 0x0afc00;\nvar CARTRIDGE_RAM_SIZE = 0x020000;\nvar CARTRIDGE_ROM_LOCATION = 0x0cfc00;\nvar CARTRIDGE_ROM_SIZE = 0x7e0400; // Grouped registers\n// possible overload these later to performace actions\n// AF, BC, DE, HL\n\nfunction concatenateBytes(highByte, lowByte) {\n  //https://stackoverflow.com/questions/38298412/convert-two-bytes-into-signed-16-bit-integer-in-javascript\n  return (highByte & 0xff) << 8 | lowByte & 0xff;\n}\n\nfunction splitHighByte(groupedByte) {\n  return (groupedByte & 0xff00) >> 8;\n}\n\nfunction splitLowByte(groupedByte) {\n  return groupedByte & 0x00ff;\n}\n\nfunction rotateByteLeft(value) {\n  // Rotate left\n  // https://stackoverflow.com/questions/19204750/how-do-i-perform-a-circular-rotation-of-a-byte\n  // 4-bit example:\n  // 1010 -> 0100 | 0001\n  return u8Portable(value << 1 | value >> 7);\n}\n\nfunction rotateByteLeftThroughCarry(value) {\n  // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n  // Through carry meaning, instead of raotating the bit that gets dropped off, but the carry there instead\n  return u8Portable(value << 1 | getCarryFlag$$1());\n}\n\nfunction rotateByteRight(value) {\n  // Rotate right\n  // 4-bit example:\n  // 1010 -> 0101 | 0000\n  return u8Portable(value >> 1 | value << 7);\n}\n\nfunction rotateByteRightThroughCarry(value) {\n  // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n  // Through carry meaning, instead of raotating the bit that gets dropped off, put the carry there instead\n  return u8Portable(value >> 1 | getCarryFlag$$1() << 7);\n}\n\nfunction setBitOnByte(bitPosition, byte) {\n  return byte | 0x01 << bitPosition;\n}\n\nfunction resetBitOnByte(bitPosition, byte) {\n  return byte & ~(0x01 << bitPosition);\n}\n\nfunction checkBitOnByte(bitPosition, byte) {\n  // Perforamnce improvements\n  // https://github.com/AssemblyScript/assemblyscript/issues/40\n  return (byte & 1 << bitPosition) != 0;\n} // Portable Code for JS Wasm Benchmarking\n\n\nfunction u8Portable(param) {\n  return param & 0xff;\n}\n\nfunction u16Portable(param) {\n  return param & 0xffff;\n}\n\nfunction i8Portable(param) {\n  // JS ints are all i32, therefore, get the sign bit, and then convert accordingly\n  // Example: https://blog.michaelyin.info/convert-8bit-byte-to-signed-int/\n  var response = param;\n\n  if (checkBitOnByte(7, response)) {\n    response = (256 - param) * -1;\n  }\n\n  return response;\n}\n\nfunction i32Portable(param) {\n  return param | 0;\n} // Set flag bit on on register F. For instance set zero flag to zero -> (7, 0)\n\n\nfunction setFlagBit(flagBit, flagValue) {\n  var bitwiseOperand = u8Portable(1 << flagBit);\n\n  if (flagValue > 0) {\n    Cpu.registerF = Cpu.registerF | bitwiseOperand;\n  } else {\n    // XOR out the two ones\n    bitwiseOperand = 0xff ^ bitwiseOperand;\n    Cpu.registerF = Cpu.registerF & bitwiseOperand;\n  }\n\n  return Cpu.registerF;\n} // Overload the set flag bit for ease of use\n\n\nfunction setZeroFlag$$1(value) {\n  setFlagBit(7, value);\n}\n\nfunction setSubtractFlag(value) {\n  setFlagBit(6, value);\n}\n\nfunction setHalfCarryFlag(value) {\n  setFlagBit(5, value);\n}\n\nfunction setCarryFlag(value) {\n  setFlagBit(4, value);\n} // Getters for flags\n\n\nfunction getZeroFlag$$1() {\n  return Cpu.registerF >> 7 & 0x01;\n}\n\nfunction getSubtractFlag() {\n  return Cpu.registerF >> 6 & 0x01;\n}\n\nfunction getHalfCarryFlag() {\n  return Cpu.registerF >> 5 & 0x01;\n}\n\nfunction getCarryFlag$$1() {\n  return Cpu.registerF >> 4 & 0x01;\n} // Must be run before the register actually performs the add\n// amountToAdd i16, since max number can be an u8\n\n\nfunction checkAndSetEightBitHalfCarryFlag(value, amountToAdd) {\n  if (amountToAdd >= 0) {\n    // https://robdor.com/2016/08/10/gameboy-emulator-half-carry-flag/\n    var result = u8Portable((value & 0x0f) + (amountToAdd & 0x0f)) & 0x10;\n\n    if (result !== 0x00) {\n      setHalfCarryFlag(1);\n    } else {\n      setHalfCarryFlag(0);\n    }\n  } else {\n    // From: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n    // CTRL+F \"subBytes(a, b byte)\"\n    if ((abs(amountToAdd) & 0x0f) > (value & 0x0f)) {\n      setHalfCarryFlag(1);\n    } else {\n      setHalfCarryFlag(0);\n    }\n  }\n}\n\nfunction checkAndSetEightBitCarryFlag(value, amountToAdd) {\n  if (amountToAdd >= 0) {\n    var result = u8Portable(value + amountToAdd);\n\n    if (value > result) {\n      setCarryFlag(1);\n    } else {\n      setCarryFlag(0);\n    }\n  } else {\n    if (abs(amountToAdd) > value) {\n      setCarryFlag(1);\n    } else {\n      setCarryFlag(0);\n    }\n  }\n} // Function to handle 16 bit addition overflow, and set the carry flags accordingly\n// i32 on valueTwo to support passing signed immedaite values\n\n\nfunction checkAndSetSixteenBitFlagsAddOverflow(valueOne, valueTwo, useStackPointerBits) {\n  // need to differentiate between HL and SP\n  // HL carries are at 11 and 15, SP carries are at 3 and 7 :p\n  if (useStackPointerBits) {\n    // Logic from : https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F add_sp_n\n    // using the stack pointer bits means we can safely assume the value is signed\n    var signedValueOne = valueOne;\n    var result = signedValueOne + valueTwo;\n    var flagXor = signedValueOne ^ valueTwo ^ result;\n\n    if ((flagXor & 0x10) !== 0) {\n      setHalfCarryFlag(1);\n    } else {\n      setHalfCarryFlag(0);\n    }\n\n    if ((flagXor & 0x100) !== 0) {\n      setCarryFlag(1);\n    } else {\n      setCarryFlag(0);\n    }\n  } else {\n    // Logic from: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n    // CTRL+F addWords\n    // Value two is not signed\n    var result = u16Portable(valueOne + valueTwo); // Check the carry flag by allowing the overflow\n\n    if (result < valueOne) {\n      setCarryFlag(1);\n    } else {\n      setCarryFlag(0);\n    } // To check for half carry flag (bit 15), by XOR'ing valyes, and and'ing the bit in question\n\n\n    var halfCarryXor = valueOne ^ valueTwo ^ result;\n    var halfCarryAnd = u16Portable(halfCarryXor & 0x1000);\n\n    if (halfCarryAnd !== 0x00) {\n      setHalfCarryFlag(1);\n    } else {\n      setHalfCarryFlag(0);\n    }\n  }\n} // Class for GBC Color palletes\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\n\n\nvar Palette =\n/** @class */\nfunction () {\n  function Palette() {}\n\n  Palette.memoryLocationBackgroundPaletteIndex = 0xff68;\n  Palette.memoryLocationBackgroundPaletteData = 0xff69;\n  Palette.memoryLocationSpritePaletteIndex = 0xff6a;\n  Palette.memoryLocationSpritePaletteData = 0xff6b;\n  return Palette;\n}();\n\nfunction initializePalette() {\n  if (Cpu.GBCEnabled) {\n    // GBC Palettes\n    eightBitStoreIntoGBMemory(0xff68, 0xc0);\n    eightBitStoreIntoGBMemory(0xff69, 0xff);\n    eightBitStoreIntoGBMemory(0xff6a, 0xc1);\n    eightBitStoreIntoGBMemory(0xff6b, 0x0d);\n  } else {\n    // GBC Palettes\n    eightBitStoreIntoGBMemory(0xff68, 0xff);\n    eightBitStoreIntoGBMemory(0xff69, 0xff);\n    eightBitStoreIntoGBMemory(0xff6a, 0xff);\n    eightBitStoreIntoGBMemory(0xff6b, 0xff);\n  }\n} // Simple get pallete color or monochroime GB\n// shouldRepresentColorByColorId is good for debugging tile data for GBC games that don't have\n// monochromePalettes\n\n\nfunction getMonochromeColorFromPalette(colorId, paletteMemoryLocation, shouldRepresentColorByColorId) {\n  if (shouldRepresentColorByColorId === void 0) {\n    shouldRepresentColorByColorId = false;\n  } // Shift our paletteByte, 2 times for each color ID\n  // And off any extra bytes\n  // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n\n\n  var color = colorId;\n\n  if (!shouldRepresentColorByColorId) {\n    color = eightBitLoadFromGBMemory(paletteMemoryLocation) >> colorId * 2 & 0x03;\n  } // Since our max is 254, and max is 3.\n  // monochrome color palette is modified from bgb\n  // TODO: Make these colors into a constant\n\n\n  var rgbColor = 242;\n\n  switch (color) {\n    case 0:\n      break;\n\n    case 1:\n      rgbColor = 160;\n      break;\n\n    case 2:\n      rgbColor = 88;\n      break;\n\n    case 3:\n      rgbColor = 8;\n      break;\n  }\n\n  return rgbColor;\n}\n\nfunction writeColorPaletteToMemory(offset, value) {\n  // FF68\n  //  Bit 0-5   Index (00-3F)\n  if (offset === Palette.memoryLocationBackgroundPaletteData || offset === Palette.memoryLocationSpritePaletteData) {\n    // Get the palette index\n    var paletteIndex = eightBitLoadFromGBMemory(offset - 1); // Clear the 6th bit, as it does nothing\n\n    paletteIndex = resetBitOnByte(6, paletteIndex); // Check if we are changing the sprite pallete data\n\n    var isSprite = false;\n\n    if (offset === Palette.memoryLocationSpritePaletteData) {\n      isSprite = true;\n    }\n\n    storePaletteByteInWasmMemory(paletteIndex, value, isSprite);\n    incrementPaletteIndexIfSet(paletteIndex, offset - 1);\n  }\n} // Functions to Handle Write to pallete data registers\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\n// Function to handle incrementing the pallete index if required\n\n\nfunction incrementPaletteIndexIfSet(paletteIndex, offset) {\n  // Check ther auto increment box\n  if (checkBitOnByte(7, paletteIndex)) {\n    // Increment the index, and return the value before the increment\n    // Ensure we don't ouverflow our auto increment bit\n    paletteIndex += 1;\n    paletteIndex = setBitOnByte(7, paletteIndex);\n    eightBitStoreIntoGBMemory(offset, paletteIndex);\n  }\n} // FF68\n// Bit 0-5   Index (00-3F)\n// Bit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\n// Index is 00-0x3F because the means 0 - 63 (64),\n// and apparently there are 8 bytes per pallete to describe Color 0-3 (4 colors),\n// and 0-7 (8 palltetes). Therefore, 64!\n\n\nfunction getRgbColorFromPalette(paletteId, colorId, isSprite) {\n  // Each Pallete takes 8 bytes, so multiply by 8 to get the pallete\n  // And Each color takes 2 bytes, therefore, multiple by 2 for the correct color bytes in the palette\n  var paletteIndex = paletteId * 8 + colorId * 2; // Load the Color that is seperated into two bytes\n\n  var paletteHighByte = loadPaletteByteFromWasmMemory(paletteIndex + 1, isSprite);\n  var paletteLowByte = loadPaletteByteFromWasmMemory(paletteIndex, isSprite); // Return the concatenated color byte\n\n  return concatenateBytes(paletteHighByte, paletteLowByte);\n} // Function to return the color from a passed 16 bit color pallette\n\n\nfunction getColorComponentFromRgb(colorId, colorRgb) {\n  // Get our bitmask for the color ID\n  // bit mask tested good :)\n  var bitMask = 0x1f << colorId * 5;\n  var colorValue = (colorRgb & bitMask) >> colorId * 5; // Goal is to reach 254 for each color, so 255 / 31 (0x1F) ~8 TODO: Make exact\n  // Want 5 bits for each\n\n  return colorValue * 8;\n} // Function to load a byte from our Gbc Palette memory\n\n\nfunction loadPaletteByteFromWasmMemory(paletteIndexByte, isSprite) {\n  // Clear the top two bits to just get the bottom palette Index\n  var paletteIndex = paletteIndexByte & 0x3f; // Move over the palette index to not overlap the background has 0x3F, so Zero for Sprites is 0x40)\n\n  if (isSprite) {\n    paletteIndex += 0x40;\n  }\n\n  return load(GBC_PALETTE_LOCATION + paletteIndex);\n} // Function to store a byte to our Gbc Palette memory\n\n\nfunction storePaletteByteInWasmMemory(paletteIndexByte, value, isSprite) {\n  // Clear the top two bits to just get the bottom palette Index\n  var paletteIndex = paletteIndexByte & 0x3f; // Move over the palette index to not overlap the background (has 0x3F, so Zero for Sprites is 0x40)\n\n  if (isSprite) {\n    paletteIndex += 0x40;\n  }\n\n  store(GBC_PALETTE_LOCATION + paletteIndex, value);\n} // https://github.com/torch2424/wasmBoy/issues/51\n\n\nfunction addPriorityforPixel(x, y, colorId, hasGbcBgPriority) {\n  if (colorId === void 0) {\n    colorId = 0;\n  }\n\n  if (hasGbcBgPriority === void 0) {\n    hasGbcBgPriority = false;\n  }\n\n  var bgPriorityByte = colorId & 0x03;\n\n  if (hasGbcBgPriority) {\n    bgPriorityByte = setBitOnByte(2, bgPriorityByte);\n  }\n\n  store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), bgPriorityByte);\n}\n\nfunction getPriorityforPixel(x, y) {\n  return load(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y));\n}\n\nfunction clearPriorityMap() {\n  for (var y = 0; y < 144; y++) {\n    for (var x = 0; x < 160; x++) {\n      store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), 0);\n    }\n  }\n}\n\nfunction getPixelStart(x, y) {\n  // Get the pixel number\n  return y * 160 + x;\n} // Functions for performance hacks, and debugging tiles\n\n\nvar TileCache =\n/** @class */\nfunction () {\n  function TileCache() {}\n\n  TileCache.tileId = -1;\n  TileCache.horizontalFlip = false;\n  TileCache.nextXIndexToPerformCacheCheck = -1;\n  return TileCache;\n}();\n\nfunction resetTileCache() {\n  TileCache.tileId = -1;\n  TileCache.nextXIndexToPerformCacheCheck = -1;\n}\n\nfunction drawPixelsFromLineOfTile(tileId, tileDataMemoryLocation, vramBankId, tileLineXStart, tileLineXEnd, tileLineY, outputLineX, outputLineY, outputWidth, wasmMemoryStart, shouldRepresentMonochromeColorByColorId, paletteLocation, bgMapAttributes) {\n  if (shouldRepresentMonochromeColorByColorId === void 0) {\n    shouldRepresentMonochromeColorByColorId = false;\n  }\n\n  if (paletteLocation === void 0) {\n    paletteLocation = 0;\n  }\n\n  if (bgMapAttributes === void 0) {\n    bgMapAttributes = -1;\n  } // Get our number of pixels drawn\n\n\n  var pixelsDrawn = 0; // Get our tile data address\n\n  var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileId); // Get the bytes for our tile\n\n  var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2, vramBankId);\n  var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2 + 1, vramBankId); // Loop through our X values to draw\n\n  for (var x = tileLineXStart; x <= tileLineXEnd; x++) {\n    // First find where we are going to do our final output x\n    // And don't allow any width overflow\n    var iteratedOutputX = outputLineX + (x - tileLineXStart);\n\n    if (iteratedOutputX < outputWidth) {\n      // However, We need to reverse our byte (if not horizontally flipped),\n      // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n      // Therefore, is pixelX was 2, then really is need to be 5\n      // So 2 - 7 = -5, * 1 = 5\n      // Or to simplify, 7 - 2 = 5 haha!\n      var pixelXInTile = x;\n\n      if (bgMapAttributes < 0 || !checkBitOnByte(5, bgMapAttributes)) {\n        pixelXInTile = 7 - pixelXInTile;\n      } // Get our pallete colors for the tile\n\n\n      var paletteColorId = 0;\n\n      if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n      }\n\n      if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n      } // Get the pallete\n\n\n      var red = 0;\n      var green = 0;\n      var blue = 0; // Check if we should draw color or not\n\n      if (bgMapAttributes >= 0) {\n        // Call the helper function to grab the correct color from the palette\n        // Get the palette index byte\n        var bgPalette = bgMapAttributes & 0x07;\n        var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false); // Split off into red green and blue\n\n        red = getColorComponentFromRgb(0, rgbColorPalette);\n        green = getColorComponentFromRgb(1, rgbColorPalette);\n        blue = getColorComponentFromRgb(2, rgbColorPalette);\n      } else {\n        if (paletteLocation <= 0) {\n          paletteLocation = Graphics.memoryLocationBackgroundPalette;\n        }\n\n        var monochromeColor = getMonochromeColorFromPalette(paletteColorId, paletteLocation, shouldRepresentMonochromeColorByColorId);\n        red = monochromeColor;\n        green = monochromeColor;\n        blue = monochromeColor;\n      } // Finally Lets place a pixel in memory\n      // Find where our tile line would start\n\n\n      var pixelStart = getTilePixelStart(iteratedOutputX, outputLineY, outputWidth);\n      store(wasmMemoryStart + pixelStart, red);\n      store(wasmMemoryStart + pixelStart + 1, green);\n      store(wasmMemoryStart + pixelStart + 2, blue);\n      var gbcBgPriority = false;\n\n      if (bgMapAttributes >= 0) {\n        gbcBgPriority = checkBitOnByte(7, bgMapAttributes);\n      } // Lastly, add the pixel to our background priority map\n      // https://github.com/torch2424/wasmBoy/issues/51\n      // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n      // Bit 2 will represent if the Bg/Window has GBC priority.\n\n\n      addPriorityforPixel(iteratedOutputX, outputLineY, paletteColorId, gbcBgPriority);\n      pixelsDrawn++;\n    }\n  }\n\n  return pixelsDrawn;\n}\n\nfunction getTilePixelStart(outputLineX, outputLineY, outputWidth) {\n  // Finally Lets place a pixel in memory\n  var pixelStart = outputLineY * outputWidth + outputLineX; // Each pixel takes 3 slots, therefore, multiply by 3!\n\n  return pixelStart * 3;\n}\n\nfunction getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap) {\n  // Watch this part of The ultimate gameboy talk: https://youtu.be/HyzD8pNlpwI?t=30m50s\n  // A line of 8 pixels on a single tile, is represented by 2 bytes.\n  // since a single tile is 8x8 pixels, 8 * 2 = 16 bytes\n  // Get the tile ID's tile addess from tile data.\n  // For instance, let's say our first line of tile data represents tiles for letters:\n  // a b c d e f g\n  // And we have tileId 0x02. That means we want the tile for the 'c' character\n  // Since each tile is 16 bytes, it would be the starting tileDataAddress + (tileId * tileSize), to skip over tiles we dont want\n  // The whole signed thing is weird, and has something to do how the second set of tile data is stored :p\n  if (tileDataMemoryLocation === Graphics.memoryLocationTileDataSelectZeroStart) {\n    // Treat the tile Id as a signed int, subtract an offset of 128\n    // if the tileId was 0 then the tile would be in memory region 0x9000-0x900F\n    // NOTE: Assemblyscript, Can't cast to i16, need to make negative manually\n    var signedTileId = tileIdFromTileMap + 128;\n\n    if (checkBitOnByte(7, tileIdFromTileMap)) {\n      signedTileId = tileIdFromTileMap - 128;\n    }\n\n    return tileDataMemoryLocation + signedTileId * 16;\n  } // if the background layout gave us the tileId 0, then the tile data would be between 0x8000-0x800F.\n\n\n  return tileDataMemoryLocation + tileIdFromTileMap * 16;\n} // Functions to help with Handling Duty on Square Channels\n// Since there are no 2d arrays, we will use a byte to represent duty cycles (wave form from percentages)\n\n\nfunction isDutyCycleClockPositiveOrNegativeForWaveform(channelDuty, waveFormPositionOnDuty) {\n  // Get our Wave Form According to the Duty\n  // Default to a duty of 1\n  // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n  switch (channelDuty) {\n    case 0x01:\n      // 1000 0001\n      return checkBitOnByte(waveFormPositionOnDuty, 0x81);\n\n    case 0x02:\n      // 1000 0111\n      return checkBitOnByte(waveFormPositionOnDuty, 0x87);\n\n    case 0x03:\n      // 0111 1110\n      return checkBitOnByte(waveFormPositionOnDuty, 0x7e);\n\n    default:\n      // 0000 0001\n      return checkBitOnByte(waveFormPositionOnDuty, 0x01);\n  }\n} // NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\n\n\nvar Channel1 =\n/** @class */\nfunction () {\n  function Channel1() {}\n\n  Channel1.updateNRx0 = function (value) {\n    Channel1.NRx0SweepPeriod = (value & 0x70) >> 4;\n    Channel1.NRx0Negate = checkBitOnByte(3, value);\n    Channel1.NRx0SweepShift = value & 0x07;\n  };\n\n  Channel1.updateNRx1 = function (value) {\n    Channel1.NRx1Duty = value >> 6 & 0x03;\n    Channel1.NRx1LengthLoad = value & 0x3f; // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n    // Channel length is determined by 64 (or 256 if channel 3), - the length load\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // Note, this will be different for channel 3\n\n    Channel1.lengthCounter = 64 - Channel1.NRx1LengthLoad;\n  };\n\n  Channel1.updateNRx2 = function (value) {\n    Channel1.NRx2StartingVolume = value >> 4 & 0x0f;\n    Channel1.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n    Channel1.NRx2EnvelopePeriod = value & 0x07; // Also, get our channel is dac enabled\n\n    Channel1.isDacEnabled = (value & 0xf8) > 0;\n  };\n\n  Channel1.updateNRx3 = function (value) {\n    Channel1.NRx3FrequencyLSB = value; // Update Channel Frequency\n\n    var frequency = Channel1.NRx4FrequencyMSB << 8 | Channel1.NRx3FrequencyLSB;\n    Channel1.frequency = frequency;\n  };\n\n  Channel1.updateNRx4 = function (value) {\n    Channel1.NRx4LengthEnabled = checkBitOnByte(6, value);\n    Channel1.NRx4FrequencyMSB = value & 0x07; // Update Channel Frequency\n\n    var frequency = Channel1.NRx4FrequencyMSB << 8 | Channel1.NRx3FrequencyLSB;\n    Channel1.frequency = frequency;\n  }; // Function to save the state of the class\n\n\n  Channel1.saveState = function () {\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot), Channel1.isEnabled);\n    store(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot), Channel1.frequencyTimer);\n    store(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot), Channel1.envelopeCounter);\n    store(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot), Channel1.lengthCounter);\n    store(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot), Channel1.volume);\n    store(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot), Channel1.dutyCycle);\n    store(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot), Channel1.waveFormPositionOnDuty);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot), Channel1.isSweepEnabled);\n    store(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot), Channel1.sweepCounter);\n    store(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot), Channel1.sweepShadowFrequency);\n  }; // Function to load the save state from memory\n\n\n  Channel1.loadState = function () {\n    Channel1.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot));\n    Channel1.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot));\n    Channel1.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot));\n    Channel1.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot));\n    Channel1.volume = load(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot));\n    Channel1.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot));\n    Channel1.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot));\n    Channel1.isSweepEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot));\n    Channel1.sweepCounter = load(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot));\n    Channel1.sweepShadowFrequency = load(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot));\n  };\n\n  Channel1.initialize = function () {\n    eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx0, 0x80);\n    eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0xbf);\n    eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0xf3);\n    eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0xc1);\n    eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xbf);\n  }; // Function to get a sample using the cycle counter on the channel\n\n\n  Channel1.getSampleFromCycleCounter = function () {\n    var accumulatedCycles = Channel1.cycleCounter;\n    Channel1.cycleCounter = 0;\n    return Channel1.getSample(accumulatedCycles);\n  }; // Function to reset our timer, useful for GBC double speed mode\n\n\n  Channel1.resetTimer = function () {\n    Channel1.frequencyTimer = (2048 - Channel1.frequency) * 4; // TODO: Ensure this is correct for GBC Double Speed Mode\n\n    if (Cpu.GBCDoubleSpeed) {\n      Channel1.frequencyTimer = Channel1.frequencyTimer * 2;\n    }\n  };\n\n  Channel1.getSample = function (numberOfCycles) {\n    // Decrement our channel timer\n    Channel1.frequencyTimer -= numberOfCycles;\n\n    if (Channel1.frequencyTimer <= 0) {\n      // Get the amount that overflowed so we don't drop cycles\n      var overflowAmount = abs(Channel1.frequencyTimer); // Reset our timer\n      // A square channel's frequency timer period is set to (2048-frequency)*4.\n      // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n\n      Channel1.resetTimer();\n      Channel1.frequencyTimer -= overflowAmount; // Also increment our duty cycle\n      // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n      // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n\n      Channel1.waveFormPositionOnDuty += 1;\n\n      if (Channel1.waveFormPositionOnDuty >= 8) {\n        Channel1.waveFormPositionOnDuty = 0;\n      }\n    } // Get our ourput volume\n\n\n    var outputVolume = 0; // Finally to set our output volume, the channel must be enabled,\n    // Our channel DAC must be enabled, and we must be in an active state\n    // Of our duty cycle\n\n    if (Channel1.isEnabled && Channel1.isDacEnabled) {\n      outputVolume = Channel1.volume;\n    } else {\n      // Return silence\n      // Since range from -15 - 15, or 0 to 30 for our unsigned\n      return 15;\n    } // Get the current sampleValue\n\n\n    var sample = 1;\n\n    if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel1.NRx1Duty, Channel1.waveFormPositionOnDuty)) {\n      sample = sample * -1;\n    }\n\n    sample = sample * outputVolume; // Square Waves Can range from -15 - 15. Therefore simply add 15\n\n    sample = sample + 15;\n    return sample;\n  }; //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n\n\n  Channel1.trigger = function () {\n    Channel1.isEnabled = true;\n\n    if (Channel1.lengthCounter === 0) {\n      Channel1.lengthCounter = 64;\n    } // Reset our timer\n    // A square channel's frequency timer period is set to (2048-frequency)*4.\n    // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n\n\n    Channel1.resetTimer();\n    Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod;\n    Channel1.volume = Channel1.NRx2StartingVolume; // Handle Channel Sweep\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n\n    Channel1.sweepShadowFrequency = Channel1.frequency; // Reset back to the sweep period\n\n    Channel1.sweepCounter = Channel1.NRx0SweepPeriod; // The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise.\n\n    if (Channel1.NRx0SweepPeriod > 0 && Channel1.NRx0SweepShift > 0) {\n      Channel1.isSweepEnabled = true;\n    } else {\n      Channel1.isSweepEnabled = false;\n    } // If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately.\n\n\n    if (Channel1.NRx0SweepShift > 0) {\n      calculateSweepAndCheckOverflow();\n    } // Finally if DAC is off, channel is still disabled\n\n\n    if (!Channel1.isDacEnabled) {\n      Channel1.isEnabled = false;\n    }\n  }; // Function to determine if the current channel would update when getting the sample\n  // This is used to accumulate samples\n\n\n  Channel1.willChannelUpdate = function (numberOfCycles) {\n    //Increment our cycle counter\n    Channel1.cycleCounter += numberOfCycles; // Dac enabled status cached by accumulator\n\n    if (Channel1.frequencyTimer - Channel1.cycleCounter > 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  Channel1.updateSweep = function () {\n    // Obscure behavior\n    // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n    // Decrement the sweep counter\n    Channel1.sweepCounter -= 1;\n\n    if (Channel1.sweepCounter <= 0) {\n      // Reset back to the sweep period\n      Channel1.sweepCounter = Channel1.NRx0SweepPeriod; // Calculate our sweep\n      // When it generates a clock and the sweep's internal enabled flag is set and the sweep period is not zero,\n      // a new frequency is calculated and the overflow check is performed.\n\n      if (Channel1.isSweepEnabled && Channel1.NRx0SweepPeriod > 0) {\n        calculateSweepAndCheckOverflow();\n      }\n    }\n  };\n\n  Channel1.updateLength = function () {\n    if (Channel1.lengthCounter > 0 && Channel1.NRx4LengthEnabled) {\n      Channel1.lengthCounter -= 1;\n    }\n\n    if (Channel1.lengthCounter === 0) {\n      Channel1.isEnabled = false;\n    }\n  };\n\n  Channel1.updateEnvelope = function () {\n    // Obscure behavior\n    // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n    Channel1.envelopeCounter -= 1;\n\n    if (Channel1.envelopeCounter <= 0) {\n      Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod; // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n      // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n      // If notes are sustained for too long, this is probably why\n\n      if (Channel1.envelopeCounter !== 0) {\n        if (Channel1.NRx2EnvelopeAddMode && Channel1.volume < 15) {\n          Channel1.volume += 1;\n        } else if (!Channel1.NRx2EnvelopeAddMode && Channel1.volume > 0) {\n          Channel1.volume -= 1;\n        }\n      }\n    }\n  };\n\n  Channel1.setFrequency = function (frequency) {\n    // Get the high and low bits\n    var passedFrequencyHighBits = frequency >> 8;\n    var passedFrequencyLowBits = frequency & 0xff; // Get the new register 4\n\n    var register4 = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4); // Knock off lower 3 bits, and Or on our high bits\n\n    var newRegister4 = register4 & 0xf8;\n    newRegister4 = newRegister4 | passedFrequencyHighBits; // Set the registers\n\n    eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, passedFrequencyLowBits);\n    eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, newRegister4); // Save the frequency for ourselves without triggering memory traps\n\n    Channel1.NRx3FrequencyLSB = passedFrequencyLowBits;\n    Channel1.NRx4FrequencyMSB = passedFrequencyHighBits;\n    Channel1.frequency = Channel1.NRx4FrequencyMSB << 8 | Channel1.NRx3FrequencyLSB;\n  }; // Cycle Counter for our sound accumulator\n\n\n  Channel1.cycleCounter = 0; // Squarewave channel with volume envelope and frequency sweep functions.\n  // NR10 -> Sweep Register R/W\n\n  Channel1.memoryLocationNRx0 = 0xff10; // -PPP NSSS Sweep period, negate, shift\n\n  Channel1.NRx0SweepPeriod = 0;\n  Channel1.NRx0Negate = false;\n  Channel1.NRx0SweepShift = 0; // NR11 -> Sound length/Wave pattern duty (R/W)\n\n  Channel1.memoryLocationNRx1 = 0xff11; // DDLL LLLL Duty, Length load (64-L)\n\n  Channel1.NRx1Duty = 0;\n  Channel1.NRx1LengthLoad = 0; // NR12 -> Volume Envelope (R/W)\n\n  Channel1.memoryLocationNRx2 = 0xff12; // VVVV APPP Starting volume, Envelope add mode, period\n\n  Channel1.NRx2StartingVolume = 0;\n  Channel1.NRx2EnvelopeAddMode = false;\n  Channel1.NRx2EnvelopePeriod = 0; // NR13 -> Frequency lo (W)\n\n  Channel1.memoryLocationNRx3 = 0xff13; // FFFF FFFF Frequency LSB\n\n  Channel1.NRx3FrequencyLSB = 0; // NR14 -> Frequency hi (R/W)\n\n  Channel1.memoryLocationNRx4 = 0xff14; // TL-- -FFF Trigger, Length enable, Frequency MSB\n\n  Channel1.NRx4LengthEnabled = false;\n  Channel1.NRx4FrequencyMSB = 0; // Channel Properties\n\n  Channel1.channelNumber = 1;\n  Channel1.isEnabled = false;\n  Channel1.isDacEnabled = false;\n  Channel1.frequency = 0;\n  Channel1.frequencyTimer = 0x00;\n  Channel1.envelopeCounter = 0x00;\n  Channel1.lengthCounter = 0x00;\n  Channel1.volume = 0x00; // Square Wave properties\n\n  Channel1.dutyCycle = 0x00;\n  Channel1.waveFormPositionOnDuty = 0x00; // Channel 1 Sweep\n\n  Channel1.isSweepEnabled = false;\n  Channel1.sweepCounter = 0x00;\n  Channel1.sweepShadowFrequency = 0x00; // Save States\n\n  Channel1.saveStateSlot = 7;\n  return Channel1;\n}(); // Sweep Specific functions\n\n\nfunction calculateSweepAndCheckOverflow() {\n  var newFrequency = getNewFrequencyFromSweep(); // 7FF is the highest value of the frequency: 111 1111 1111\n\n  if (newFrequency <= 0x7ff && Channel1.NRx0SweepShift > 0) {\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n    // If the new frequency is 2047 or less and the sweep shift is not zero,\n    // this new frequency is written back to the shadow frequency and square 1's frequency in NR13 and NR14,\n    // then frequency calculation and overflow check are run AGAIN immediately using this new value,\n    // but this second new frequency is not written back.\n    Channel1.sweepShadowFrequency = newFrequency;\n    Channel1.setFrequency(newFrequency); // Re calculate the new frequency\n\n    newFrequency = getNewFrequencyFromSweep();\n  } // Next check if the new Frequency is above 0x7FF\n  // if So, disable our sweep\n\n\n  if (newFrequency > 0x7ff) {\n    Channel1.isEnabled = false;\n  }\n} // Function to determing a new sweep in the current context\n\n\nfunction getNewFrequencyFromSweep() {\n  // Start our new frequency, by making it equal to the \"shadow frequency\"\n  var newFrequency = Channel1.sweepShadowFrequency;\n  newFrequency = newFrequency >> Channel1.NRx0SweepShift; // Check for sweep negation\n\n  if (Channel1.NRx0Negate) {\n    newFrequency = Channel1.sweepShadowFrequency - newFrequency;\n  } else {\n    newFrequency = Channel1.sweepShadowFrequency + newFrequency;\n  }\n\n  return newFrequency;\n} // NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\n\n\nvar Channel2 =\n/** @class */\nfunction () {\n  function Channel2() {}\n\n  Channel2.updateNRx1 = function (value) {\n    Channel2.NRx1Duty = value >> 6 & 0x03;\n    Channel2.NRx1LengthLoad = value & 0x3f; // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n    // Channel length is determined by 64 (or 256 if channel 3), - the length load\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // Note, this will be different for channel 3\n\n    Channel2.lengthCounter = 64 - Channel2.NRx1LengthLoad;\n  };\n\n  Channel2.updateNRx2 = function (value) {\n    Channel2.NRx2StartingVolume = value >> 4 & 0x0f;\n    Channel2.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n    Channel2.NRx2EnvelopePeriod = value & 0x07; // Also, get our channel is dac enabled\n\n    Channel2.isDacEnabled = (value & 0xf8) > 0;\n  };\n\n  Channel2.updateNRx3 = function (value) {\n    Channel2.NRx3FrequencyLSB = value; // Update Channel Frequency\n\n    var frequency = Channel2.NRx4FrequencyMSB << 8 | Channel2.NRx3FrequencyLSB;\n    Channel2.frequency = frequency;\n  };\n\n  Channel2.updateNRx4 = function (value) {\n    Channel2.NRx4LengthEnabled = checkBitOnByte(6, value);\n    Channel2.NRx4FrequencyMSB = value & 0x07; // Update Channel Frequency\n\n    var frequency = Channel2.NRx4FrequencyMSB << 8 | Channel2.NRx3FrequencyLSB;\n    Channel2.frequency = frequency;\n  }; // Function to save the state of the class\n\n\n  Channel2.saveState = function () {\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot), Channel2.isEnabled);\n    store(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot), Channel2.frequencyTimer);\n    store(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot), Channel2.envelopeCounter);\n    store(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot), Channel2.lengthCounter);\n    store(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot), Channel2.volume);\n    store(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot), Channel2.dutyCycle);\n    store(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot), Channel2.waveFormPositionOnDuty);\n  }; // Function to load the save state from memory\n\n\n  Channel2.loadState = function () {\n    Channel2.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot));\n    Channel2.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot));\n    Channel2.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot));\n    Channel2.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot));\n    Channel2.volume = load(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot));\n    Channel2.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot));\n    Channel2.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot));\n  };\n\n  Channel2.initialize = function () {\n    eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1 - 1, 0xff);\n    eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1, 0x3f);\n    eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx2, 0x00);\n    eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, 0x00);\n    eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, 0xb8);\n  }; // Function to get a sample using the cycle counter on the channel\n\n\n  Channel2.getSampleFromCycleCounter = function () {\n    var accumulatedCycles = Channel2.cycleCounter;\n    Channel2.cycleCounter = 0;\n    return Channel2.getSample(accumulatedCycles);\n  }; // Function to reset our timer, useful for GBC double speed mode\n\n\n  Channel2.resetTimer = function () {\n    Channel2.frequencyTimer = (2048 - Channel2.frequency) * 4; // TODO: Ensure this is correct for GBC Double Speed Mode\n\n    if (Cpu.GBCDoubleSpeed) {\n      Channel2.frequencyTimer = Channel2.frequencyTimer * 2;\n    }\n  };\n\n  Channel2.getSample = function (numberOfCycles) {\n    // Decrement our channel timer\n    Channel2.frequencyTimer -= numberOfCycles;\n\n    if (Channel2.frequencyTimer <= 0) {\n      // Get the amount that overflowed so we don't drop cycles\n      var overflowAmount = abs(Channel2.frequencyTimer); // Reset our timer\n      // A square channel's frequency timer period is set to (2048-frequency)*4.\n      // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n\n      Channel2.resetTimer();\n      Channel2.frequencyTimer -= overflowAmount; // Also increment our duty cycle\n      // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n      // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n\n      Channel2.waveFormPositionOnDuty += 1;\n\n      if (Channel2.waveFormPositionOnDuty >= 8) {\n        Channel2.waveFormPositionOnDuty = 0;\n      }\n    } // Get our ourput volume\n\n\n    var outputVolume = 0; // Finally to set our output volume, the channel must be enabled,\n    // Our channel DAC must be enabled, and we must be in an active state\n    // Of our duty cycle\n\n    if (Channel2.isEnabled && Channel2.isDacEnabled) {\n      outputVolume = Channel2.volume;\n    } else {\n      // Return silence\n      // Since range from -15 - 15, or 0 to 30 for our unsigned\n      return 15;\n    } // Get the current sampleValue\n\n\n    var sample = 1;\n\n    if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel2.NRx1Duty, Channel2.waveFormPositionOnDuty)) {\n      sample = sample * -1;\n    }\n\n    sample = sample * outputVolume; // Square Waves Can range from -15 - 15. Therefore simply add 15\n\n    sample = sample + 15;\n    return sample;\n  }; //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n\n\n  Channel2.trigger = function () {\n    Channel2.isEnabled = true;\n\n    if (Channel2.lengthCounter === 0) {\n      Channel2.lengthCounter = 64;\n    } // Reset our timer\n    // A square channel's frequency timer period is set to (2048-frequency)*4.\n    // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n\n\n    Channel2.resetTimer();\n    Channel2.envelopeCounter = Channel2.NRx2EnvelopePeriod;\n    Channel2.volume = Channel2.NRx2StartingVolume; // Finally if DAC is off, channel is still disabled\n\n    if (!Channel2.isDacEnabled) {\n      Channel2.isEnabled = false;\n    }\n  }; // Function to determine if the current channel would update when getting the sample\n  // This is used to accumulate samples\n\n\n  Channel2.willChannelUpdate = function (numberOfCycles) {\n    //Increment our cycle counter\n    Channel2.cycleCounter += numberOfCycles; // Dac enabled status cached by accumulator\n\n    if (Channel2.frequencyTimer - Channel2.cycleCounter > 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  Channel2.updateLength = function () {\n    if (Channel2.lengthCounter > 0 && Channel2.NRx4LengthEnabled) {\n      Channel2.lengthCounter -= 1;\n    }\n\n    if (Channel2.lengthCounter === 0) {\n      Channel2.isEnabled = false;\n    }\n  };\n\n  Channel2.updateEnvelope = function () {\n    // Obscure behavior\n    // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n    Channel2.envelopeCounter -= 1;\n\n    if (Channel2.envelopeCounter <= 0) {\n      Channel2.envelopeCounter = Channel2.NRx2EnvelopePeriod; // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n      // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n\n      if (Channel2.envelopeCounter !== 0) {\n        if (Channel2.NRx2EnvelopeAddMode && Channel2.volume < 15) {\n          Channel2.volume += 1;\n        } else if (!Channel2.NRx2EnvelopeAddMode && Channel2.volume > 0) {\n          Channel2.volume -= 1;\n        }\n      }\n    }\n  };\n\n  Channel2.setFrequency = function (frequency) {\n    // Get the high and low bits\n    var passedFrequencyHighBits = frequency >> 8;\n    var passedFrequencyLowBits = frequency & 0xff; // Get the new register 4\n\n    var register4 = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4); // Knock off lower 3 bits, and Or on our high bits\n\n    var newRegister4 = register4 & 0xf8;\n    newRegister4 = newRegister4 | passedFrequencyHighBits; // Set the registers\n\n    eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, passedFrequencyLowBits);\n    eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, newRegister4); // Save the frequency for ourselves without triggering memory traps\n\n    Channel2.NRx3FrequencyLSB = passedFrequencyLowBits;\n    Channel2.NRx4FrequencyMSB = passedFrequencyHighBits;\n    Channel2.frequency = Channel2.NRx4FrequencyMSB << 8 | Channel2.NRx3FrequencyLSB;\n  }; // Cycle Counter for our sound accumulator\n\n\n  Channel2.cycleCounter = 0; // Squarewave channel with volume envelope functions only.\n  // NR21 -> Sound length/Wave pattern duty (R/W)\n\n  Channel2.memoryLocationNRx1 = 0xff16; // DDLL LLLL Duty, Length load (64-L)\n\n  Channel2.NRx1Duty = 0;\n  Channel2.NRx1LengthLoad = 0; // NR22 -> Volume Envelope (R/W)\n\n  Channel2.memoryLocationNRx2 = 0xff17; // VVVV APPP Starting volume, Envelope add mode, period\n\n  Channel2.NRx2StartingVolume = 0;\n  Channel2.NRx2EnvelopeAddMode = false;\n  Channel2.NRx2EnvelopePeriod = 0; // NR23 -> Frequency lo (W)\n\n  Channel2.memoryLocationNRx3 = 0xff18; // FFFF FFFF Frequency LSB\n\n  Channel2.NRx3FrequencyLSB = 0; // NR24 -> Frequency hi (R/W)\n\n  Channel2.memoryLocationNRx4 = 0xff19; // TL-- -FFF Trigger, Length enable, Frequency MSB\n\n  Channel2.NRx4LengthEnabled = false;\n  Channel2.NRx4FrequencyMSB = 0; // Channel Properties\n\n  Channel2.channelNumber = 2;\n  Channel2.isEnabled = false;\n  Channel2.isDacEnabled = false;\n  Channel2.frequency = 0;\n  Channel2.frequencyTimer = 0x00;\n  Channel2.envelopeCounter = 0x00;\n  Channel2.lengthCounter = 0x00;\n  Channel2.volume = 0x00; // Square Wave properties\n\n  Channel2.dutyCycle = 0x00;\n  Channel2.waveFormPositionOnDuty = 0x00; // Save States\n\n  Channel2.saveStateSlot = 8;\n  return Channel2;\n}(); // NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\n\n\nvar Channel3 =\n/** @class */\nfunction () {\n  function Channel3() {} // E--- ---- DAC power\n\n\n  Channel3.updateNRx0 = function (value) {\n    Channel3.isDacEnabled = checkBitOnByte(7, value);\n  };\n\n  Channel3.updateNRx1 = function (value) {\n    Channel3.NRx1LengthLoad = value; // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n    // Channel length is determined by 64 (or 256 if channel 3), - the length load\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // Note, this will be different for channel 3\n    // Supposed to be 256, so subtracting 255 and then adding 1 if that makes sense\n\n    Channel3.lengthCounter = 256 - Channel3.NRx1LengthLoad;\n  };\n\n  Channel3.updateNRx2 = function (value) {\n    Channel3.NRx2VolumeCode = value >> 5 & 0x0f;\n  };\n\n  Channel3.updateNRx3 = function (value) {\n    Channel3.NRx3FrequencyLSB = value; // Update Channel Frequency\n\n    var frequency = Channel3.NRx4FrequencyMSB << 8 | Channel3.NRx3FrequencyLSB;\n    Channel3.frequency = frequency;\n  };\n\n  Channel3.updateNRx4 = function (value) {\n    Channel3.NRx4LengthEnabled = checkBitOnByte(6, value);\n    Channel3.NRx4FrequencyMSB = value & 0x07; // Update Channel Frequency\n\n    var frequency = Channel3.NRx4FrequencyMSB << 8 | Channel3.NRx3FrequencyLSB;\n    Channel3.frequency = frequency;\n  }; // Function to save the state of the class\n\n\n  Channel3.saveState = function () {\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot), Channel3.isEnabled);\n    store(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot), Channel3.frequencyTimer);\n    store(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot), Channel3.lengthCounter);\n    store(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot), Channel3.waveTablePosition);\n  }; // Function to load the save state from memory\n\n\n  Channel3.loadState = function () {\n    Channel3.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot));\n    Channel3.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot));\n    Channel3.lengthCounter = load(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot));\n    Channel3.waveTablePosition = load(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot));\n  };\n\n  Channel3.initialize = function () {\n    eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx0, 0x7f);\n    eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx1, 0xff);\n    eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx2, 0x9f);\n    eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx3, 0x00);\n    eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx4, 0xb8); // The volume code changed\n\n    Channel3.volumeCodeChanged = true;\n  }; // Function to get a sample using the cycle counter on the channel\n\n\n  Channel3.getSampleFromCycleCounter = function () {\n    var accumulatedCycles = Channel3.cycleCounter;\n    Channel3.cycleCounter = 0;\n    return Channel3.getSample(accumulatedCycles);\n  }; // Function to reset our timer, useful for GBC double speed mode\n\n\n  Channel3.resetTimer = function () {\n    Channel3.frequencyTimer = (2048 - Channel3.frequency) * 2; // TODO: Ensure this is correct for GBC Double Speed Mode\n\n    if (Cpu.GBCDoubleSpeed) {\n      Channel3.frequencyTimer = Channel3.frequencyTimer * 2;\n    }\n  };\n\n  Channel3.getSample = function (numberOfCycles) {\n    // Decrement our channel timer\n    Channel3.frequencyTimer -= numberOfCycles;\n\n    if (Channel3.frequencyTimer <= 0) {\n      // Get the amount that overflowed so we don't drop cycles\n      var overflowAmount = abs(Channel3.frequencyTimer); // Reset our timer\n      // A wave channel's frequency timer period is set to (2048-frequency) * 2.\n      // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n\n      Channel3.resetTimer();\n      Channel3.frequencyTimer -= overflowAmount; // Advance the wave table position, and loop back if needed\n\n      Channel3.waveTablePosition += 1;\n\n      if (Channel3.waveTablePosition >= 32) {\n        Channel3.waveTablePosition = 0;\n      }\n    } // Get our ourput volume\n\n\n    var outputVolume = 0;\n    var volumeCode = Channel3.volumeCode; // Finally to set our output volume, the channel must be enabled,\n    // Our channel DAC must be enabled, and we must be in an active state\n    // Of our duty cycle\n\n    if (Channel3.isEnabled && Channel3.isDacEnabled) {\n      // Get our volume code\n      if (Channel3.volumeCodeChanged) {\n        volumeCode = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n        volumeCode = volumeCode >> 5;\n        volumeCode = volumeCode & 0x0f;\n        Channel3.volumeCode = volumeCode;\n        Channel3.volumeCodeChanged = false;\n      }\n    } else {\n      // Return silence\n      // Since range from -15 - 15, or 0 to 30 for our unsigned\n      return 15;\n    } // Get the current sample\n\n\n    var sample = 0; // Will Find the position, and knock off any remainder\n\n    var positionIndexToAdd = Channel3.waveTablePosition / 2;\n    var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n    sample = eightBitLoadFromGBMemory(memoryLocationWaveSample); // Need to grab the top or lower half for the correct sample\n\n    if (Channel3.waveTablePosition % 2 === 0) {\n      // First sample\n      sample = sample >> 4;\n      sample = sample & 0x0f;\n    } else {\n      // Second Samples\n      sample = sample & 0x0f;\n    } // Shift our sample and set our volume depending on the volume code\n    // Since we can't multiply by float, simply divide by 4, 2, 1\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n\n\n    switch (volumeCode) {\n      case 0:\n        sample = sample >> 4;\n        break;\n\n      case 1:\n        // Dont Shift sample\n        outputVolume = 1;\n        break;\n\n      case 2:\n        sample = sample >> 1;\n        outputVolume = 2;\n        break;\n\n      default:\n        sample = sample >> 2;\n        outputVolume = 4;\n        break;\n    } // Spply out output volume\n\n\n    if (outputVolume > 0) {\n      sample = sample / outputVolume;\n    } else {\n      sample = 0;\n    } // Square Waves Can range from -15 - 15. Therefore simply add 15\n\n\n    sample = sample + 15;\n    return sample;\n  }; //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n\n\n  Channel3.trigger = function () {\n    Channel3.isEnabled = true;\n\n    if (Channel3.lengthCounter === 0) {\n      Channel3.lengthCounter = 256;\n    } // Reset our timer\n    // A wave channel's frequency timer period is set to (2048-frequency)*2.\n\n\n    Channel3.resetTimer(); // Reset our wave table position\n\n    Channel3.waveTablePosition = 0; // Finally if DAC is off, channel is still disabled\n\n    if (!Channel3.isDacEnabled) {\n      Channel3.isEnabled = false;\n    }\n  }; // Function to determine if the current channel would update when getting the sample\n  // This is used to accumulate samples\n\n\n  Channel3.willChannelUpdate = function (numberOfCycles) {\n    //Increment our cycle counter\n    Channel3.cycleCounter += numberOfCycles; // Dac enabled status cached by accumulator\n\n    if (Channel3.frequencyTimer - Channel3.cycleCounter > 0 && !Channel3.volumeCodeChanged) {\n      return false;\n    }\n\n    return true;\n  };\n\n  Channel3.updateLength = function () {\n    if (Channel3.lengthCounter > 0 && Channel3.NRx4LengthEnabled) {\n      Channel3.lengthCounter -= 1;\n    }\n\n    if (Channel3.lengthCounter === 0) {\n      Channel3.isEnabled = false;\n    }\n  }; // Cycle Counter for our sound accumulator\n\n\n  Channel3.cycleCounter = 0; // Voluntary Wave channel with 32 4-bit programmable samples, played in sequence.\n  // NR30 -> Sound on/off (R/W)\n\n  Channel3.memoryLocationNRx0 = 0xff1a; // NR31 -> Sound length (R/W)\n\n  Channel3.memoryLocationNRx1 = 0xff1b; // LLLL LLLL Length load (256-L)\n\n  Channel3.NRx1LengthLoad = 0; // NR32 -> Select ouput level (R/W)\n\n  Channel3.memoryLocationNRx2 = 0xff1c; // -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%)\n\n  Channel3.NRx2VolumeCode = 0; // NR33 -> Frequency lower data (W)\n\n  Channel3.memoryLocationNRx3 = 0xff1d; // FFFF FFFF Frequency LSB\n\n  Channel3.NRx3FrequencyLSB = 0; // NR34 -> Frequency higher data (R/W)\n\n  Channel3.memoryLocationNRx4 = 0xff1e; // TL-- -FFF Trigger, Length enable, Frequency MSB\n\n  Channel3.NRx4LengthEnabled = false;\n  Channel3.NRx4FrequencyMSB = 0; // Our wave table location\n\n  Channel3.memoryLocationWaveTable = 0xff30; // Channel Properties\n\n  Channel3.channelNumber = 3;\n  Channel3.isEnabled = false;\n  Channel3.isDacEnabled = false;\n  Channel3.frequency = 0;\n  Channel3.frequencyTimer = 0x00;\n  Channel3.lengthCounter = 0x00;\n  Channel3.waveTablePosition = 0x00;\n  Channel3.volumeCode = 0x00;\n  Channel3.volumeCodeChanged = false; // Save States\n\n  Channel3.saveStateSlot = 9;\n  return Channel3;\n}(); // NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\n\n\nvar Channel4 =\n/** @class */\nfunction () {\n  function Channel4() {}\n\n  Channel4.updateNRx1 = function (value) {\n    Channel4.NRx1LengthLoad = value & 0x3f; // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n    // Channel length is determined by 64 (or 256 if channel 3), - the length load\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // Note, this will be different for channel 3\n\n    Channel4.lengthCounter = 64 - Channel4.NRx1LengthLoad;\n  };\n\n  Channel4.updateNRx2 = function (value) {\n    Channel4.NRx2StartingVolume = value >> 4 & 0x0f;\n    Channel4.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n    Channel4.NRx2EnvelopePeriod = value & 0x07; // Also, get our channel is dac enabled\n\n    Channel4.isDacEnabled = (value & 0xf8) > 0;\n  };\n\n  Channel4.updateNRx3 = function (value) {\n    Channel4.NRx3ClockShift = value >> 4;\n    Channel4.NRx3WidthMode = checkBitOnByte(3, value);\n    Channel4.NRx3DivisorCode = value & 0x07; // Also, get our divisor\n\n    switch (Channel4.NRx3DivisorCode) {\n      case 0:\n        Channel4.divisor = 8;\n        return;\n\n      case 1:\n        Channel4.divisor = 16;\n        return;\n\n      case 2:\n        Channel4.divisor = 32;\n        return;\n\n      case 3:\n        Channel4.divisor = 48;\n        return;\n\n      case 4:\n        Channel4.divisor = 64;\n        return;\n\n      case 5:\n        Channel4.divisor = 80;\n        return;\n\n      case 6:\n        Channel4.divisor = 96;\n        return;\n\n      case 7:\n        Channel4.divisor = 112;\n        return;\n    }\n  };\n\n  Channel4.updateNRx4 = function (value) {\n    Channel4.NRx4LengthEnabled = checkBitOnByte(6, value);\n  }; // Function to save the state of the class\n\n\n  Channel4.saveState = function () {\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot), Channel4.isEnabled);\n    store(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot), Channel4.frequencyTimer);\n    store(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot), Channel4.envelopeCounter);\n    store(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot), Channel4.lengthCounter);\n    store(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot), Channel4.volume);\n    store(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot), Channel4.linearFeedbackShiftRegister);\n  }; // Function to load the save state from memory\n\n\n  Channel4.loadState = function () {\n    Channel4.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot));\n    Channel4.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot));\n    Channel4.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot));\n    Channel4.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot));\n    Channel4.volume = load(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot));\n    Channel4.linearFeedbackShiftRegister = load(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot));\n  };\n\n  Channel4.initialize = function () {\n    eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1 - 1, 0xff);\n    eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1, 0xff);\n    eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx2, 0x00);\n    eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx3, 0x00);\n    eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx4, 0xbf);\n  }; // Function to get a sample using the cycle counter on the channel\n\n\n  Channel4.getSampleFromCycleCounter = function () {\n    var accumulatedCycles = Channel4.cycleCounter;\n    Channel4.cycleCounter = 0;\n    return Channel4.getSample(accumulatedCycles);\n  };\n\n  Channel4.getSample = function (numberOfCycles) {\n    // Decrement our channel timer\n    Channel4.frequencyTimer -= numberOfCycles;\n\n    if (Channel4.frequencyTimer <= 0) {\n      // Get the amount that overflowed so we don't drop cycles\n      var overflowAmount = abs(Channel4.frequencyTimer); // Reset our timer\n\n      Channel4.frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n      Channel4.frequencyTimer -= overflowAmount; // Do some cool stuff with lfsr\n      // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Noise_Channel\n      // First XOR bit zero and one\n\n      var lfsrBitZero = Channel4.linearFeedbackShiftRegister & 0x01;\n      var lfsrBitOne = Channel4.linearFeedbackShiftRegister >> 1;\n      lfsrBitOne = lfsrBitOne & 0x01;\n      var xorLfsrBitZeroOne = lfsrBitZero ^ lfsrBitOne; // Shift all lsfr bits by one\n\n      Channel4.linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister >> 1; // Place the XOR result on bit 15\n\n      Channel4.linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister | xorLfsrBitZeroOne << 14; // If the width mode is set, set xor on bit 6, and make lfsr 7 bit\n\n      if (Channel4.NRx3WidthMode) {\n        // Make 7 bit, by knocking off lower bits. Want to keeps bits 8 - 16, and then or on 7\n        Channel4.linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister & ~0x40;\n        Channel4.linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister | xorLfsrBitZeroOne << 6;\n      }\n    } // Get our ourput volume, set to zero for silence\n\n\n    var outputVolume = 0; // Finally to set our output volume, the channel must be enabled,\n    // Our channel DAC must be enabled, and we must be in an active state\n    // Of our duty cycle\n\n    if (Channel4.isEnabled && Channel4.isDacEnabled) {\n      outputVolume = Channel4.volume;\n    } else {\n      // Return silence\n      // Since range from -15 - 15, or 0 to 30 for our unsigned\n      return 15;\n    } // Declare our sample\n\n\n    var sample = 0; // Wave form output is bit zero of lfsr, INVERTED\n\n    if (!checkBitOnByte(0, Channel4.linearFeedbackShiftRegister)) {\n      sample = 1;\n    } else {\n      sample = -1;\n    }\n\n    sample = sample * outputVolume; // Noise Can range from -15 - 15. Therefore simply add 15\n\n    sample = sample + 15;\n    return sample;\n  }; //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n\n\n  Channel4.trigger = function () {\n    Channel4.isEnabled = true;\n\n    if (Channel4.lengthCounter === 0) {\n      Channel4.lengthCounter = 64;\n    } // Reset our timers\n\n\n    Channel4.frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n    Channel4.envelopeCounter = Channel4.NRx2EnvelopePeriod;\n    Channel4.volume = Channel4.NRx2StartingVolume; // Noise channel's LFSR bits are all set to 1.\n\n    Channel4.linearFeedbackShiftRegister = 0x7fff; // Finally if DAC is off, channel is still disabled\n\n    if (!Channel4.isDacEnabled) {\n      Channel4.isEnabled = false;\n    }\n  }; // Function to determine if the current channel would update when getting the sample\n  // This is used to accumulate samples\n\n\n  Channel4.willChannelUpdate = function (numberOfCycles) {\n    //Increment our cycle counter\n    Channel4.cycleCounter += numberOfCycles; // Dac enabled status cached by accumulator\n\n    if (Channel4.frequencyTimer - Channel4.cycleCounter > 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  Channel4.getNoiseChannelFrequencyPeriod = function () {\n    // Get our divisor from the divisor code, and shift by the clock shift\n    var response = Channel4.divisor << Channel4.NRx3ClockShift;\n\n    if (Cpu.GBCDoubleSpeed) {\n      response = response * 2;\n    }\n\n    return response;\n  };\n\n  Channel4.updateLength = function () {\n    if (Channel4.lengthCounter > 0 && Channel4.NRx4LengthEnabled) {\n      Channel4.lengthCounter -= 1;\n    }\n\n    if (Channel4.lengthCounter === 0) {\n      Channel4.isEnabled = false;\n    }\n  };\n\n  Channel4.updateEnvelope = function () {\n    // Obscure behavior\n    // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n    Channel4.envelopeCounter -= 1;\n\n    if (Channel4.envelopeCounter <= 0) {\n      Channel4.envelopeCounter = Channel4.NRx2EnvelopePeriod; // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n      // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n\n      if (Channel4.envelopeCounter !== 0) {\n        if (Channel4.NRx2EnvelopeAddMode && Channel4.volume < 15) {\n          Channel4.volume += 1;\n        } else if (!Channel4.NRx2EnvelopeAddMode && Channel4.volume > 0) {\n          Channel4.volume -= 1;\n        }\n      }\n    }\n  }; // Cycle Counter for our sound accumulator\n\n\n  Channel4.cycleCounter = 0; // Channel 4\n  // 'white noise' channel with volume envelope functions.\n  // NR41 -> Sound length (R/W)\n\n  Channel4.memoryLocationNRx1 = 0xff20; // --LL LLLL Length load (64-L)\n\n  Channel4.NRx1LengthLoad = 0; // NR42 -> Volume Envelope (R/W)\n\n  Channel4.memoryLocationNRx2 = 0xff21; // VVVV APPP Starting volume, Envelope add mode, period\n\n  Channel4.NRx2StartingVolume = 0;\n  Channel4.NRx2EnvelopeAddMode = false;\n  Channel4.NRx2EnvelopePeriod = 0; // NR43 -> Polynomial Counter (R/W)\n\n  Channel4.memoryLocationNRx3 = 0xff22; // SSSS WDDD Clock shift, Width mode of LFSR, Divisor code\n\n  Channel4.NRx3ClockShift = 0;\n  Channel4.NRx3WidthMode = false;\n  Channel4.NRx3DivisorCode = 0; // NR44 -> Trigger, Length Enable\n\n  Channel4.memoryLocationNRx4 = 0xff23; // TL-- ---- Trigger, Length enable\n\n  Channel4.NRx4LengthEnabled = false; // Channel Properties\n\n  Channel4.channelNumber = 4;\n  Channel4.isEnabled = false;\n  Channel4.isDacEnabled = false;\n  Channel4.frequencyTimer = 0x00;\n  Channel4.envelopeCounter = 0x00;\n  Channel4.lengthCounter = 0x00;\n  Channel4.volume = 0x00;\n  Channel4.divisor = 0; // Noise properties\n  // NOTE: Is only 15 bits\n\n  Channel4.linearFeedbackShiftRegister = 0x00; // Save States\n\n  Channel4.saveStateSlot = 10;\n  return Channel4;\n}(); // Another class simply for accumulating samples\n// Default everything to silence\n\n\nvar SoundAccumulator =\n/** @class */\nfunction () {\n  function SoundAccumulator() {}\n\n  SoundAccumulator.channel1Sample = 15;\n  SoundAccumulator.channel2Sample = 15;\n  SoundAccumulator.channel3Sample = 15;\n  SoundAccumulator.channel4Sample = 15;\n  SoundAccumulator.channel1DacEnabled = false;\n  SoundAccumulator.channel2DacEnabled = false;\n  SoundAccumulator.channel3DacEnabled = false;\n  SoundAccumulator.channel4DacEnabled = false;\n  SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n  SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n  SoundAccumulator.mixerVolumeChanged = false;\n  SoundAccumulator.mixerEnabledChanged = false; //If a channel was updated, need to also track if we need to need to mix them again\n\n  SoundAccumulator.needToRemixSamples = false;\n  return SoundAccumulator;\n}();\n\nfunction initializeSoundAccumulator() {\n  SoundAccumulator.channel1Sample = 15;\n  SoundAccumulator.channel2Sample = 15;\n  SoundAccumulator.channel3Sample = 15;\n  SoundAccumulator.channel4Sample = 15;\n  SoundAccumulator.channel1DacEnabled = false;\n  SoundAccumulator.channel2DacEnabled = false;\n  SoundAccumulator.channel3DacEnabled = false;\n  SoundAccumulator.channel4DacEnabled = false;\n  SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n  SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n  SoundAccumulator.mixerVolumeChanged = true;\n  SoundAccumulator.mixerEnabledChanged = true;\n  SoundAccumulator.needToRemixSamples = false;\n}\n\nfunction accumulateSound(numberOfCycles) {\n  // Check if any of the individual channels will update\n  var channel1WillUpdate = Channel1.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel1.channelNumber);\n  var channel2WillUpdate = Channel2.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel2.channelNumber);\n  var channel3WillUpdate = Channel3.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel3.channelNumber);\n  var channel4WillUpdate = Channel4.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel4.channelNumber);\n\n  if (channel1WillUpdate) {\n    SoundAccumulator.channel1Sample = Channel1.getSampleFromCycleCounter();\n  }\n\n  if (channel2WillUpdate) {\n    SoundAccumulator.channel2Sample = Channel2.getSampleFromCycleCounter();\n  }\n\n  if (channel3WillUpdate) {\n    SoundAccumulator.channel3Sample = Channel3.getSampleFromCycleCounter();\n  }\n\n  if (channel4WillUpdate) {\n    SoundAccumulator.channel4Sample = Channel4.getSampleFromCycleCounter();\n  } // If any channel updated, we need to re-mix our samples\n\n\n  if (channel1WillUpdate || channel2WillUpdate || channel3WillUpdate || channel4WillUpdate) {\n    SoundAccumulator.needToRemixSamples = true;\n  } // Do Some downsampling magic\n\n\n  Sound.downSampleCycleCounter += numberOfCycles * Sound.downSampleCycleMultiplier;\n\n  if (Sound.downSampleCycleCounter >= Sound.maxDownSampleCycles()) {\n    // Reset the downsample counter\n    // Don't set to zero to catch overflowed cycles\n    Sound.downSampleCycleCounter -= Sound.maxDownSampleCycles();\n\n    if (SoundAccumulator.needToRemixSamples || SoundAccumulator.mixerVolumeChanged || SoundAccumulator.mixerEnabledChanged) {\n      mixChannelSamples(SoundAccumulator.channel1Sample, SoundAccumulator.channel2Sample, SoundAccumulator.channel3Sample, SoundAccumulator.channel4Sample);\n    } // Finally Simply place the accumulated sample in memory\n    // Set our volumes in memory\n    // +1 so it can not be zero\n\n\n    setLeftAndRightOutputForAudioQueue(SoundAccumulator.leftChannelSampleUnsignedByte + 1, SoundAccumulator.rightChannelSampleUnsignedByte + 1, Sound.audioQueueIndex);\n    Sound.audioQueueIndex += 1; // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n    // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n    // Not 0xFFFF because we need half of 64kb since we store left and right channel\n\n    if (Sound.audioQueueIndex >= Sound.wasmBoyMemoryMaxBufferSize / 2 - 1) {\n      Sound.audioQueueIndex -= 1;\n    }\n  }\n} // Function used by SoundAccumulator to find out if a channel Dac Changed\n\n\nfunction didChannelDacChange(channelNumber) {\n  switch (channelNumber) {\n    case Channel1.channelNumber:\n      if (SoundAccumulator.channel1DacEnabled !== Channel1.isDacEnabled) {\n        SoundAccumulator.channel1DacEnabled = Channel1.isDacEnabled;\n        return true;\n      }\n\n      return false;\n\n    case Channel2.channelNumber:\n      if (SoundAccumulator.channel2DacEnabled !== Channel2.isDacEnabled) {\n        SoundAccumulator.channel2DacEnabled = Channel2.isDacEnabled;\n        return true;\n      }\n\n      return false;\n\n    case Channel3.channelNumber:\n      if (SoundAccumulator.channel3DacEnabled !== Channel3.isDacEnabled) {\n        SoundAccumulator.channel3DacEnabled = Channel3.isDacEnabled;\n        return true;\n      }\n\n      return false;\n\n    case Channel4.channelNumber:\n      if (SoundAccumulator.channel4DacEnabled !== Channel4.isDacEnabled) {\n        SoundAccumulator.channel4DacEnabled = Channel4.isDacEnabled;\n        return true;\n      }\n\n      return false;\n  }\n\n  return false;\n}\n\nvar Config =\n/** @class */\nfunction () {\n  function Config() {} // Boot Rom\n\n\n  Config.enableBootRom = false; // GBC Preference\n\n  Config.useGbcWhenAvailable = true; // Batch Processing\n\n  Config.audioBatchProcessing = false;\n  Config.graphicsBatchProcessing = false;\n  Config.timersBatchProcessing = false; // Scanline Rendering\n\n  Config.graphicsDisableScanlineRendering = false; // Acumulate Sound Samples\n\n  Config.audioAccumulateSamples = false; // Tile Rednering\n\n  Config.tileRendering = false;\n  Config.tileCaching = false;\n  return Config;\n}(); // https://emu-docs.org/Game%20Boy/gb_sound.txt\n\n\nvar Sound =\n/** @class */\nfunction () {\n  function Sound() {} // Number of cycles to run in each batch process\n  // This number should be in sync so that sound doesn't run too many cyles at once\n  // and does not exceed the minimum number of cyles for either down sampling, or\n  // How often we change the frame, or a channel's update process\n\n\n  Sound.batchProcessCycles = function () {\n    if (Cpu.GBCDoubleSpeed) {\n      return 174;\n    }\n\n    return 87;\n  };\n\n  Sound.updateNR50 = function (value) {\n    Sound.NR50LeftMixerVolume = value >> 4 & 0x07;\n    Sound.NR50RightMixerVolume = value & 0x07;\n  };\n\n  Sound.updateNR51 = function (value) {\n    Sound.NR51IsChannel4EnabledOnLeftOutput = checkBitOnByte(7, value);\n    Sound.NR51IsChannel3EnabledOnLeftOutput = checkBitOnByte(6, value);\n    Sound.NR51IsChannel2EnabledOnLeftOutput = checkBitOnByte(5, value);\n    Sound.NR51IsChannel1EnabledOnLeftOutput = checkBitOnByte(4, value);\n    Sound.NR51IsChannel4EnabledOnRightOutput = checkBitOnByte(3, value);\n    Sound.NR51IsChannel3EnabledOnRightOutput = checkBitOnByte(2, value);\n    Sound.NR51IsChannel2EnabledOnRightOutput = checkBitOnByte(1, value);\n    Sound.NR51IsChannel1EnabledOnRightOutput = checkBitOnByte(0, value);\n  };\n\n  Sound.updateNR52 = function (value) {\n    Sound.NR52IsSoundEnabled = checkBitOnByte(7, value);\n  };\n\n  Sound.maxFrameSequenceCycles = function () {\n    if (Cpu.GBCDoubleSpeed) {\n      return 16384;\n    }\n\n    return 8192;\n  };\n\n  Sound.maxDownSampleCycles = function () {\n    return Cpu.CLOCK_SPEED();\n  }; // Function to save the state of the class\n\n\n  Sound.saveState = function () {\n    store(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot), Sound.frameSequenceCycleCounter);\n    store(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot), Sound.downSampleCycleCounter);\n    store(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot), Sound.frameSequencer);\n  }; // Function to load the save state from memory\n\n\n  Sound.loadState = function () {\n    Sound.frameSequenceCycleCounter = load(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot));\n    Sound.downSampleCycleCounter = load(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot));\n    Sound.frameSequencer = load(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot));\n    clearAudioBuffer();\n  }; // Current cycles\n  // This will be used for batch processing\n  // https://github.com/binji/binjgb/commit/e028f45e805bc0b0aa4697224a209f9ae514c954\n  // TODO: May Also need to do this for Reads\n\n\n  Sound.currentCycles = 0; // Channel control / On-OFF / Volume (RW)\n\n  Sound.memoryLocationNR50 = 0xff24;\n  Sound.NR50LeftMixerVolume = 0;\n  Sound.NR50RightMixerVolume = 0; // 0xFF25 selects which output each channel goes to, Referred to as NR51\n\n  Sound.memoryLocationNR51 = 0xff25;\n  Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel1EnabledOnRightOutput = true;\n  Sound.NR51IsChannel2EnabledOnRightOutput = true;\n  Sound.NR51IsChannel3EnabledOnRightOutput = true;\n  Sound.NR51IsChannel4EnabledOnRightOutput = true; // Sound on/off\n\n  Sound.memoryLocationNR52 = 0xff26;\n  Sound.NR52IsSoundEnabled = true; // $FF30 -- $FF3F is the load register space for the 4-bit samples for channel 3\n\n  Sound.memoryLocationChannel3LoadRegisterStart = 0xff30; // Need to count how often we need to increment our frame sequencer\n  // Which you can read about below\n\n  Sound.frameSequenceCycleCounter = 0x0000; // Also need to downsample our audio to average audio qualty\n  // https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/\n  // Want to do 48000hz, so CpuRate / Sound Rate, 4194304 / 48000 ~ 87 cycles\n\n  Sound.downSampleCycleCounter = 0x00;\n  Sound.downSampleCycleMultiplier = 48000; // Frame sequencer controls what should be updated and and ticked\n  // Everyt time the sound is updated :) It is updated everytime the\n  // Cycle counter reaches the max cycle\n\n  Sound.frameSequencer = 0x00; // Our current sample number we are passing back to the wasmboy memory map\n  // Found that a static number of samples doesn't work well on mobile\n  // Will just update the queue index, grab as much as we can whenever we need more audio, then reset\n  // NOTE: Giving a really large sample rate gives more latency, but less pops!\n  //static readonly MAX_NUMBER_OF_SAMPLES: i32 = 4096;\n\n  Sound.audioQueueIndex = 0x0000;\n  Sound.wasmBoyMemoryMaxBufferSize = 0x20000; // Save States\n\n  Sound.saveStateSlot = 6;\n  return Sound;\n}(); // Initialize sound registers\n// From: https://emu-docs.org/Game%20Boy/gb_sound.txt\n\n\nfunction initializeSound() {\n  // Reset Stateful variables\n  Sound.currentCycles = 0;\n  Sound.NR50LeftMixerVolume = 0;\n  Sound.NR50RightMixerVolume = 0;\n  Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n  Sound.NR51IsChannel1EnabledOnRightOutput = true;\n  Sound.NR51IsChannel2EnabledOnRightOutput = true;\n  Sound.NR51IsChannel3EnabledOnRightOutput = true;\n  Sound.NR51IsChannel4EnabledOnRightOutput = true;\n  Sound.NR52IsSoundEnabled = true;\n  Sound.frameSequenceCycleCounter = 0x0000;\n  Sound.downSampleCycleCounter = 0x00;\n  Sound.frameSequencer = 0x00;\n  Sound.audioQueueIndex = 0x0000; // intiialize our channels\n\n  Channel1.initialize();\n  Channel2.initialize();\n  Channel3.initialize();\n  Channel4.initialize(); // Other Sound Registers\n\n  eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x77);\n  eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0xf3);\n  eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0xf1);\n  initializeSoundAccumulator();\n} // Function to batch process our audio after we skipped so many cycles\n\n\nfunction batchProcessAudio() {\n  if (Sound.currentCycles < Sound.batchProcessCycles()) {\n    return;\n  }\n\n  while (Sound.currentCycles >= Sound.batchProcessCycles()) {\n    updateSound(Sound.batchProcessCycles());\n    Sound.currentCycles = Sound.currentCycles - Sound.batchProcessCycles();\n  }\n} // Function for updating sound\n\n\nfunction updateSound(numberOfCycles) {\n  // Check if our frameSequencer updated\n  var frameSequencerUpdated = updateFrameSequencer(numberOfCycles);\n\n  if (Config.audioAccumulateSamples && !frameSequencerUpdated) {\n    accumulateSound(numberOfCycles);\n  } else {\n    calculateSound(numberOfCycles);\n  }\n} // Funciton to get the current Audio Queue index\n\n\nfunction getNumberOfSamplesInAudioBuffer() {\n  return Sound.audioQueueIndex;\n} // Function to reset the audio queue\n\n\nfunction clearAudioBuffer() {\n  Sound.audioQueueIndex = 0;\n}\n\nfunction calculateSound(numberOfCycles) {\n  // Update all of our channels\n  // All samples will be returned as 0 to 30\n  // 0 being -1.0, and 30 being 1.0\n  // (see blurb at top)\n  var channel1Sample = Channel1.getSample(numberOfCycles);\n  var channel2Sample = Channel2.getSample(numberOfCycles);\n  var channel3Sample = Channel3.getSample(numberOfCycles);\n  var channel4Sample = Channel4.getSample(numberOfCycles); // TODO: Allow individual channels to be muted\n  // let channel1Sample: i32 = 15;\n  // let channel2Sample: i32 = 15;\n  // let channel3Sample: i32 = 15;\n  // let channel4Sample: i32 = 15;\n  // Save the samples in the accumulator\n\n  SoundAccumulator.channel1Sample = channel1Sample;\n  SoundAccumulator.channel2Sample = channel2Sample;\n  SoundAccumulator.channel3Sample = channel3Sample;\n  SoundAccumulator.channel4Sample = channel4Sample; // Do Some downsampling magic\n\n  Sound.downSampleCycleCounter += numberOfCycles * Sound.downSampleCycleMultiplier;\n\n  if (Sound.downSampleCycleCounter >= Sound.maxDownSampleCycles()) {\n    // Reset the downsample counter\n    // Don't set to zero to catch overflowed cycles\n    Sound.downSampleCycleCounter -= Sound.maxDownSampleCycles(); // Mixe our samples\n\n    var mixedSample = mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample);\n    var leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n    var rightChannelSampleUnsignedByte = splitLowByte(mixedSample); // Set our volumes in memory\n    // +1 so it can not be zero\n\n    setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, Sound.audioQueueIndex);\n    Sound.audioQueueIndex += 1; // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n    // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n    // Not 0xFFFF because we need half of 64kb since we store left and right channel\n\n    if (Sound.audioQueueIndex >= Sound.wasmBoyMemoryMaxBufferSize / 2 - 1) {\n      Sound.audioQueueIndex -= 1;\n    }\n  }\n}\n\nfunction updateFrameSequencer(numberOfCycles) {\n  // APU runs at 4194304 / 512\n  // Or Cpu.clockSpeed / 512\n  // Which means, we need to update once every 8192 cycles :)\n  Sound.frameSequenceCycleCounter += numberOfCycles;\n\n  if (Sound.frameSequenceCycleCounter >= Sound.maxFrameSequenceCycles()) {\n    // Reset the frameSequenceCycleCounter\n    // Not setting to zero as we do not want to drop cycles\n    Sound.frameSequenceCycleCounter -= Sound.maxFrameSequenceCycles(); // Check our frame sequencer\n    // https://gist.github.com/drhelius/3652407\n\n    switch (Sound.frameSequencer) {\n      case 0:\n        // Update Length on Channels\n        Channel1.updateLength();\n        Channel2.updateLength();\n        Channel3.updateLength();\n        Channel4.updateLength();\n        break;\n\n      /* Do Nothing on one */\n\n      case 2:\n        // Update Sweep and Length on Channels\n        Channel1.updateLength();\n        Channel2.updateLength();\n        Channel3.updateLength();\n        Channel4.updateLength();\n        Channel1.updateSweep();\n        break;\n\n      /* Do Nothing on three */\n\n      case 4:\n        // Update Length on Channels\n        Channel1.updateLength();\n        Channel2.updateLength();\n        Channel3.updateLength();\n        Channel4.updateLength();\n        break;\n\n      /* Do Nothing on five */\n\n      case 6:\n        // Update Sweep and Length on Channels\n        Channel1.updateLength();\n        Channel2.updateLength();\n        Channel3.updateLength();\n        Channel4.updateLength();\n        Channel1.updateSweep();\n        break;\n\n      case 7:\n        // Update Envelope on channels\n        Channel1.updateEnvelope();\n        Channel2.updateEnvelope();\n        Channel4.updateEnvelope();\n        break;\n    } // Update our frame sequencer\n\n\n    Sound.frameSequencer += 1;\n\n    if (Sound.frameSequencer >= 8) {\n      Sound.frameSequencer = 0;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample) {\n  // Do Some Cool mixing\n  // NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol\n  // NR51 FF25 NW21 NW21 Left enables, Right enables\n  // NR52 FF26 P--- NW21 Power control/status, Channel length statuses\n  // NW21 = 4 bits on byte\n  // 3 -> Channel 4, 2 -> Channel 3, 1 -> Channel 2, 0 -> Channel 1\n  if (channel1Sample === void 0) {\n    channel1Sample = 15;\n  }\n\n  if (channel2Sample === void 0) {\n    channel2Sample = 15;\n  }\n\n  if (channel3Sample === void 0) {\n    channel3Sample = 15;\n  }\n\n  if (channel4Sample === void 0) {\n    channel4Sample = 15;\n  } // Matt's Proccess\n  // I push out 1024 samples at a time and use 96000 hz sampling rate, so I guess i'm a bit less than one frame,\n  // but I let the queue fill up with 4 x 1024 samples before I start waiting for the audio\n  // TODO: Vin Mixing\n\n\n  SoundAccumulator.mixerVolumeChanged = false; // Get our channel volume for left/right\n\n  var leftChannelSample = 0;\n  var rightChannelSample = 0; // Find the sample for the left if enabled\n  // other wise add silence (15) for the channel\n\n  if (Sound.NR51IsChannel1EnabledOnLeftOutput) {\n    leftChannelSample += channel1Sample;\n  } else {\n    leftChannelSample += 15;\n  }\n\n  if (Sound.NR51IsChannel2EnabledOnLeftOutput) {\n    leftChannelSample += channel2Sample;\n  } else {\n    leftChannelSample += 15;\n  }\n\n  if (Sound.NR51IsChannel3EnabledOnLeftOutput) {\n    leftChannelSample += channel3Sample;\n  } else {\n    leftChannelSample += 15;\n  }\n\n  if (Sound.NR51IsChannel4EnabledOnLeftOutput) {\n    leftChannelSample += channel4Sample;\n  } else {\n    leftChannelSample += 15;\n  } // Find the sample for the right if enabled\n  // other wise add silence (15) for the channel\n\n\n  if (Sound.NR51IsChannel1EnabledOnRightOutput) {\n    rightChannelSample += channel1Sample;\n  } else {\n    rightChannelSample += 15;\n  }\n\n  if (Sound.NR51IsChannel2EnabledOnRightOutput) {\n    rightChannelSample += channel2Sample;\n  } else {\n    rightChannelSample += 15;\n  }\n\n  if (Sound.NR51IsChannel3EnabledOnRightOutput) {\n    rightChannelSample += channel3Sample;\n  } else {\n    rightChannelSample += 15;\n  }\n\n  if (Sound.NR51IsChannel4EnabledOnRightOutput) {\n    rightChannelSample += channel4Sample;\n  } else {\n    rightChannelSample += 15;\n  } // Update our accumulator\n\n\n  SoundAccumulator.mixerEnabledChanged = false;\n  SoundAccumulator.needToRemixSamples = false; // Finally multiply our volumes by the mixer volume\n  // Mixer volume can be at most 7 + 1\n  // Can be at most 7, because we only have 3 bits, 111 = 7\n  // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Mixer\n  // Done in the getSampleAsUnsignedByte(), since we are doing some weirdness there :)\n  // Convert our samples from unsigned 32 to unsigned byte\n  // Reason being, We want to be able to pass in wasm memory as usigned byte. Javascript will handle the conversion back\n\n  var leftChannelSampleUnsignedByte = getSampleAsUnsignedByte(leftChannelSample, Sound.NR50LeftMixerVolume + 1);\n  var rightChannelSampleUnsignedByte = getSampleAsUnsignedByte(rightChannelSample, Sound.NR50RightMixerVolume + 1); // Save these samples in the accumulator\n\n  SoundAccumulator.leftChannelSampleUnsignedByte = leftChannelSampleUnsignedByte;\n  SoundAccumulator.rightChannelSampleUnsignedByte = rightChannelSampleUnsignedByte;\n  return concatenateBytes(leftChannelSampleUnsignedByte, rightChannelSampleUnsignedByte);\n}\n\nfunction getSampleAsUnsignedByte(sample, mixerVolume) {\n  // If the sample is silence, return silence as unsigned byte\n  // Silence is common, and should be checked for performance\n  if (sample === 60) {\n    return 127;\n  } // convert to a signed, precise scale of -6000 to 6000 (cheap way of -1.0 to 1.0)\n  // Multiply by the mixer volume fraction (to find the actual volume)\n\n\n  var precision = 100000;\n  var convertedSample = sample - 60;\n  convertedSample = convertedSample * precision; // Multiply by the mixer volume fraction (to find the actual volume)\n\n  convertedSample = convertedSample * mixerVolume / 8; // Convert back to scale of 0 to 120\n\n  convertedSample = convertedSample / precision;\n  convertedSample = convertedSample + 60; // Finally, convert to an unsigned byte scale\n  // With Four Channels (0 to 30) and no global volume. Max is 120\n  // max unsigned byte goal is 254 (see blurb at top).\n  // 120 / 254 should give the correct conversion\n  // For example, 120 / 254 = 0.47244094488188976\n  // Multiply by 1000 to increase the float into an int\n  // so, 120 * 1000 / (0.47244094488188976 * 1000) should give approximate answer for max mixer volume\n\n  var maxDivider = 120 * precision / 254;\n  convertedSample = convertedSample * precision / maxDivider; // Ensure we have an i32 and not a float for JS builds\n\n  convertedSample = i32Portable(convertedSample);\n  return convertedSample;\n} // Function to set our left and right channels at the correct queue index\n\n\nfunction setLeftAndRightOutputForAudioQueue(leftVolume, rightVolume, audioQueueIndex) {\n  // Get our stereo index\n  var audioQueueOffset = AUDIO_BUFFER_LOCATION + audioQueueIndex * 2; // Store our volumes\n  // +1 that way we don't have empty data to ensure that the value is set\n\n  store(audioQueueOffset, leftVolume + 1);\n  store(audioQueueOffset + 1, rightVolume + 1);\n} // Functions involved in R/W of sound registers\n// Function to check and handle writes to sound registers\n\n\nfunction SoundRegisterWriteTraps(offset, value) {\n  if (offset !== Sound.memoryLocationNR52 && !Sound.NR52IsSoundEnabled) {\n    // Block all writes to any sound register EXCEPT NR52!\n    // This is under the assumption that the check for\n    // offset >= 0xFF10 && offset <= 0xFF26\n    // is done in writeTraps.ts (which it is)\n    // NOTE: Except on DMG, length can still be written (whatever that means)\n    return false;\n  }\n\n  switch (offset) {\n    // Handle NRx0 on Channels\n    case Channel1.memoryLocationNRx0:\n      Channel1.updateNRx0(value);\n      return true;\n\n    case Channel3.memoryLocationNRx0:\n      Channel3.updateNRx0(value);\n      return true;\n    // Handle NRx1 (Length Counter) on Channels\n\n    case Channel1.memoryLocationNRx1:\n      Channel1.updateNRx1(value);\n      return true;\n\n    case Channel2.memoryLocationNRx1:\n      Channel2.updateNRx1(value);\n      return true;\n\n    case Channel3.memoryLocationNRx1:\n      Channel3.updateNRx1(value);\n      return true;\n\n    case Channel4.memoryLocationNRx1:\n      Channel4.updateNRx1(value);\n      return true;\n    // Handle NRx2 (Envelope / Volume) on Channels\n\n    case Channel1.memoryLocationNRx2:\n      Channel1.updateNRx2(value);\n      return true;\n\n    case Channel2.memoryLocationNRx2:\n      Channel2.updateNRx2(value);\n      return true;\n\n    case Channel3.memoryLocationNRx2:\n      // Check if channel 3's volume code was written too\n      // This is handcy to know for accumulation of samples\n      Channel3.volumeCodeChanged = true;\n      Channel3.updateNRx2(value);\n      return true;\n\n    case Channel4.memoryLocationNRx2:\n      Channel4.updateNRx2(value);\n      return true;\n    // Handle NRx3 (Frequency / Noise Properties) on Channels\n\n    case Channel1.memoryLocationNRx3:\n      Channel1.updateNRx3(value);\n      return true;\n\n    case Channel2.memoryLocationNRx3:\n      Channel2.updateNRx3(value);\n      return true;\n\n    case Channel3.memoryLocationNRx3:\n      Channel3.updateNRx3(value);\n      return true;\n\n    case Channel4.memoryLocationNRx3:\n      Channel4.updateNRx3(value);\n      return true;\n    // Check our NRx4 registers to trap our trigger bits\n\n    case Channel1.memoryLocationNRx4:\n      if (checkBitOnByte(7, value)) {\n        Channel1.updateNRx4(value);\n        Channel1.trigger();\n      }\n\n      return true;\n\n    case Channel2.memoryLocationNRx4:\n      if (checkBitOnByte(7, value)) {\n        Channel2.updateNRx4(value);\n        Channel2.trigger();\n      }\n\n      return true;\n\n    case Channel3.memoryLocationNRx4:\n      if (checkBitOnByte(7, value)) {\n        Channel3.updateNRx4(value);\n        Channel3.trigger();\n      }\n\n      return true;\n\n    case Channel4.memoryLocationNRx4:\n      if (checkBitOnByte(7, value)) {\n        Channel4.updateNRx4(value);\n        Channel4.trigger();\n      }\n\n      return true;\n    // Tell the sound accumulator if volumes changes\n\n    case Sound.memoryLocationNR50:\n      Sound.updateNR50(value);\n      SoundAccumulator.mixerVolumeChanged = true;\n      return true;\n    // Tell the sound accumulator if volumes changes\n\n    case Sound.memoryLocationNR51:\n      Sound.updateNR51(value);\n      SoundAccumulator.mixerEnabledChanged = true;\n      return true;\n\n    case Sound.memoryLocationNR52:\n      // Reset all registers except NR52\n      Sound.updateNR52(value);\n\n      if (!checkBitOnByte(7, value)) {\n        for (var i = 0xff10; i < 0xff26; i++) {\n          eightBitStoreIntoGBMemory(i, 0x00);\n        }\n      }\n\n      return true;\n  } // We did not handle the write, Allow the write\n\n\n  return true;\n} // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n\n\nfunction SoundRegisterReadTraps(offset) {\n  // TODO: OR All Registers\n  // This will fix bugs in orcale of ages :)\n  if (offset === Sound.memoryLocationNR52) {\n    // Get our registerNR52\n    var registerNR52 = eightBitLoadFromGBMemory(Sound.memoryLocationNR52); // Knock off lower 7 bits\n\n    registerNR52 = registerNR52 & 0x80; // Or from the table\n\n    registerNR52 = registerNR52 | 0x70;\n    return registerNR52;\n  }\n\n  return -1;\n}\n\nvar Interrupts =\n/** @class */\nfunction () {\n  function Interrupts() {}\n\n  Interrupts.updateInterruptEnabled = function (value) {\n    Interrupts.isVBlankInterruptEnabled = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n    Interrupts.isLcdInterruptEnabled = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n    Interrupts.isTimerInterruptEnabled = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n    Interrupts.isJoypadInterruptEnabled = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n    Interrupts.interruptsEnabledValue = value;\n  };\n\n  Interrupts.updateInterruptRequested = function (value) {\n    Interrupts.isVBlankInterruptRequested = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n    Interrupts.isLcdInterruptRequested = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n    Interrupts.isTimerInterruptRequested = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n    Interrupts.isJoypadInterruptRequested = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n    Interrupts.interruptsRequestedValue = value;\n  }; // Function to return if we have any pending interrupts\n\n\n  Interrupts.areInterruptsPending = function () {\n    return (Interrupts.interruptsRequestedValue & Interrupts.interruptsEnabledValue) > 0;\n  }; // Function to save the state of the class\n\n\n  Interrupts.saveState = function () {\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitch);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitchDelay);\n  }; // Function to load the save state from memory\n\n\n  Interrupts.loadState = function () {\n    Interrupts.masterInterruptSwitch = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot));\n    Interrupts.masterInterruptSwitchDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot));\n    Interrupts.updateInterruptEnabled(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptEnabled));\n    Interrupts.updateInterruptRequested(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest));\n  };\n\n  Interrupts.masterInterruptSwitch = false; // According to mooneye, interrupts are not handled until AFTER\n  // Next instruction\n  // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown\n\n  Interrupts.masterInterruptSwitchDelay = false; // Biut position for each part of the interrupts HW registers\n\n  Interrupts.bitPositionVBlankInterrupt = 0;\n  Interrupts.bitPositionLcdInterrupt = 1;\n  Interrupts.bitPositionTimerInterrupt = 2;\n  Interrupts.bitPositionJoypadInterrupt = 4;\n  Interrupts.memoryLocationInterruptEnabled = 0xffff; // Cache which Interrupts are enabled\n\n  Interrupts.interruptsEnabledValue = 0;\n  Interrupts.isVBlankInterruptEnabled = false;\n  Interrupts.isLcdInterruptEnabled = false;\n  Interrupts.isTimerInterruptEnabled = false;\n  Interrupts.isJoypadInterruptEnabled = false;\n  Interrupts.memoryLocationInterruptRequest = 0xff0f; // A.K.A interrupt Flag (IF)\n  // Cache which Interrupts are requested\n\n  Interrupts.interruptsRequestedValue = 0;\n  Interrupts.isVBlankInterruptRequested = false;\n  Interrupts.isLcdInterruptRequested = false;\n  Interrupts.isTimerInterruptRequested = false;\n  Interrupts.isJoypadInterruptRequested = false; // Save States\n\n  Interrupts.saveStateSlot = 2;\n  return Interrupts;\n}();\n\nfunction checkInterrupts() {\n  if (Interrupts.masterInterruptSwitch && Interrupts.interruptsEnabledValue > 0 && Interrupts.interruptsRequestedValue > 0) {\n    // Boolean to track if interrupts were handled\n    // Interrupt handling requires 20 cycles\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n    var wasInterruptHandled = false; // Check our interrupts\n\n    if (Interrupts.isVBlankInterruptEnabled && Interrupts.isVBlankInterruptRequested) {\n      _handleInterrupt(Interrupts.bitPositionVBlankInterrupt);\n\n      wasInterruptHandled = true;\n    } else if (Interrupts.isLcdInterruptEnabled && Interrupts.isLcdInterruptRequested) {\n      _handleInterrupt(Interrupts.bitPositionLcdInterrupt);\n\n      wasInterruptHandled = true;\n    } else if (Interrupts.isTimerInterruptEnabled && Interrupts.isTimerInterruptRequested) {\n      _handleInterrupt(Interrupts.bitPositionTimerInterrupt);\n\n      wasInterruptHandled = true;\n    } else if (Interrupts.isJoypadInterruptEnabled && Interrupts.isJoypadInterruptRequested) {\n      _handleInterrupt(Interrupts.bitPositionJoypadInterrupt);\n\n      wasInterruptHandled = true;\n    } // Interrupt handling requires 20 cycles, TCAGBD\n\n\n    if (wasInterruptHandled) {\n      var intteruptHandlerCycles = 20;\n\n      if (Cpu.isHalted) {\n        // If the CPU was halted, now is the time to un-halt\n        // Should be done here when the jump occurs according to:\n        // https://www.reddit.com/r/EmuDev/comments/6fmjch/gb_glitches_in_links_awakening_and_pok%C3%A9mon_gold/\n        Cpu.isHalted = false;\n        intteruptHandlerCycles += 4;\n      }\n\n      return intteruptHandlerCycles;\n    }\n  }\n\n  return 0;\n}\n\nfunction _handleInterrupt(bitPosition) {\n  // Disable the master switch\n  setInterrupts(false); // Disable the bit on the interruptRequest\n\n  var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n  interruptRequest = resetBitOnByte(bitPosition, interruptRequest);\n  Interrupts.interruptsRequestedValue = interruptRequest;\n  eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest); // Push the programCounter onto the stacks\n\n  Cpu.stackPointer = Cpu.stackPointer - 2;\n  sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter); // Jump to the correct interrupt location\n  // Also puiggyback off of the switch to reset our HW Register caching\n  // http://www.codeslinger.co.uk/pages/projects/gameboy/interupts.html\n\n  switch (bitPosition) {\n    case Interrupts.bitPositionVBlankInterrupt:\n      Interrupts.isVBlankInterruptRequested = false;\n      Cpu.programCounter = 0x40;\n      break;\n\n    case Interrupts.bitPositionLcdInterrupt:\n      Interrupts.isLcdInterruptRequested = false;\n      Cpu.programCounter = 0x48;\n      break;\n\n    case Interrupts.bitPositionTimerInterrupt:\n      Interrupts.isTimerInterruptRequested = false;\n      Cpu.programCounter = 0x50;\n      break;\n\n    case Interrupts.bitPositionJoypadInterrupt:\n      Interrupts.isJoypadInterruptRequested = false;\n      Cpu.programCounter = 0x60;\n      break;\n  }\n}\n\nfunction _requestInterrupt(bitPosition) {\n  var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest); // Pass to set the correct interrupt bit on interruptRequest\n\n  interruptRequest = setBitOnByte(bitPosition, interruptRequest);\n  Interrupts.interruptsRequestedValue = interruptRequest;\n  eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n}\n\nfunction setInterrupts(value) {\n  Interrupts.masterInterruptSwitch = value;\n}\n\nfunction requestVBlankInterrupt() {\n  Interrupts.isVBlankInterruptRequested = true;\n\n  _requestInterrupt(Interrupts.bitPositionVBlankInterrupt);\n}\n\nfunction requestLcdInterrupt() {\n  Interrupts.isLcdInterruptRequested = true;\n\n  _requestInterrupt(Interrupts.bitPositionLcdInterrupt);\n}\n\nfunction requestTimerInterrupt() {\n  Interrupts.isTimerInterruptRequested = true;\n\n  _requestInterrupt(Interrupts.bitPositionTimerInterrupt);\n}\n\nfunction requestJoypadInterrupt() {\n  Interrupts.isJoypadInterruptRequested = true;\n\n  _requestInterrupt(Interrupts.bitPositionJoypadInterrupt);\n}\n\nvar Timers =\n/** @class */\nfunction () {\n  function Timers() {} // Number of cycles to run in each batch process\n\n\n  Timers.batchProcessCycles = function () {\n    return 256;\n  };\n\n  Timers.updateDividerRegister = function (value) {\n    var oldDividerRegister = Timers.dividerRegister;\n    Timers.dividerRegister = 0;\n    eightBitStoreIntoGBMemory(Timers.memoryLocationDividerRegister, 0);\n\n    if (Timers.timerEnabled && _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, Timers.dividerRegister)) {\n      _incrementTimerCounter();\n    }\n  };\n\n  Timers.updateTimerCounter = function (value) {\n    if (Timers.timerEnabled) {\n      // From binjgb, dont write TIMA if we were just reset\n      if (Timers.timerCounterWasReset) {\n        return;\n      } // Mooneye Test, tima_write_reloading\n      // Writing in this strange delay cycle, will cancel\n      // Both the interrupt and the TMA reload\n\n\n      if (Timers.timerCounterOverflowDelay) {\n        Timers.timerCounterOverflowDelay = false;\n      }\n    }\n\n    Timers.timerCounter = value;\n  };\n\n  Timers.updateTimerModulo = function (value) {\n    Timers.timerModulo = value; // Mooneye Test, tma_write_reloading\n    // Don't update if we were reloading\n\n    if (Timers.timerEnabled && Timers.timerCounterWasReset) {\n      Timers.timerCounter = Timers.timerModulo;\n      Timers.timerCounterWasReset = false;\n    }\n  };\n\n  Timers.updateTimerControl = function (value) {\n    // Get some initial values\n    var oldTimerEnabled = Timers.timerEnabled;\n    Timers.timerEnabled = checkBitOnByte(2, value);\n    var newTimerInputClock = value & 0x03; // Do some obscure behavior for if we should increment TIMA\n    // This does the timer increments from rapid_toggle mooneye tests\n\n    if (!oldTimerEnabled) {\n      var oldTimerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n\n      var newTimerCounterMaskBit = _getTimerCounterMaskBit(newTimerInputClock);\n\n      var shouldIncrementTimerCounter = false;\n\n      if (Timers.timerEnabled) {\n        shouldIncrementTimerCounter = checkBitOnByte(oldTimerCounterMaskBit, Timers.dividerRegister);\n      } else {\n        shouldIncrementTimerCounter = checkBitOnByte(oldTimerCounterMaskBit, Timers.dividerRegister) && checkBitOnByte(newTimerCounterMaskBit, Timers.dividerRegister);\n      }\n\n      if (shouldIncrementTimerCounter) {\n        _incrementTimerCounter();\n      }\n    }\n\n    Timers.timerInputClock = newTimerInputClock;\n  }; // Function to save the state of the class\n  // TODO: Save state for new properties on Timers\n\n\n  Timers.saveState = function () {\n    store(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot), Timers.currentCycles);\n    store(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot), Timers.dividerRegister);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot), Timers.timerCounterOverflowDelay);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot), Timers.timerCounterWasReset);\n    eightBitStoreIntoGBMemory(Timers.memoryLocationTimerCounter, Timers.timerCounter);\n  }; // Function to load the save state from memory\n\n\n  Timers.loadState = function () {\n    Timers.currentCycles = load(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot));\n    Timers.dividerRegister = load(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot));\n    Timers.timerCounterOverflowDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot));\n    Timers.timerCounterWasReset = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot));\n    Timers.timerCounter = eightBitLoadFromGBMemory(Timers.memoryLocationTimerCounter);\n    Timers.timerModulo = eightBitLoadFromGBMemory(Timers.memoryLocationTimerModulo);\n    Timers.timerInputClock = eightBitLoadFromGBMemory(Timers.memoryLocationTimerControl);\n  }; // Current cycles\n  // This will be used for batch processing\n\n\n  Timers.currentCycles = 0; // Divider Register = DIV\n  // Divider Register is 16 bits.\n  // Divider Register when read is just the upper 8 bits\n  // But internally is used as the full 16\n  // Essentially dividerRegister is an always counting clock\n  // DIV Drives everything, it is the heart of the timer.\n  // All other timing registers base them selves relative to the DIV register\n  // Think of the div register as like a cycle counter :)\n  // DIV will increment TIMA, whenever there is a falling edge, see below for that.\n\n  Timers.memoryLocationDividerRegister = 0xff04; // DIV\n\n  Timers.dividerRegister = 0; // timerCounter = TIMA\n  // TIMA is the actual counter.\n  // Whenever the DIV gets the falling edge, and other obscure cases,\n  // This is incremented. When this overflows, we need to fire an interrupt.\n\n  Timers.memoryLocationTimerCounter = 0xff05;\n  Timers.timerCounter = 0;\n  Timers.timerCounterOverflowDelay = false;\n  Timers.timerCounterWasReset = false;\n  Timers.timerCounterMask = 0; // Timer Modulo = TMA\n  // TMA is what TIMA (Notice the I :p) is counting from, and TIMA will load\n  // Whenever TIMA overflow.\n  // For instance, we count like 1,2,3,4,5,6,7,8,9, and then overflow to 10.\n  // TMA would be like \"Hey, start counting from 5 whenever we reset\"\n  // Then we would be like 5,6,7,8,9...5,6,7,8,9...etc...\n\n  Timers.memoryLocationTimerModulo = 0xff06;\n  Timers.timerModulo = 0; // Timer Control = TAC\n  // TAC Says how fast we are counting.\n  // TAC controls which bit we are watching for the falling edge on the DIV register\n  // And whenever the bit has the falling edge, we increment TIMA (The thing counting).\n  // Therefore, depending on the value, we will either count faster or slower.\n\n  Timers.memoryLocationTimerControl = 0xff07; // Bit 2    - Timer Stop  (0=Stop, 1=Start)\n  // Bits 1-0 - Input Clock Select\n  //            00:   4096 Hz    (~4194 Hz SGB) (1024 cycles)\n  //            01: 262144 Hz  (~268400 Hz SGB) (16 cycles)\n  //            10:  65536 Hz   (~67110 Hz SGB) (64 cycles)\n  //            11:  16384 Hz   (~16780 Hz SGB) (256 cycles)\n\n  Timers.timerEnabled = false;\n  Timers.timerInputClock = 0; // Save States\n\n  Timers.saveStateSlot = 5;\n  return Timers;\n}();\n\nfunction initializeTimers() {\n  // Reset stateful Variables\n  Timers.currentCycles = 0;\n  Timers.dividerRegister = 0;\n  Timers.timerCounter = 0;\n  Timers.timerModulo = 0;\n  Timers.timerEnabled = false;\n  Timers.timerInputClock = 0;\n  Timers.timerCounterOverflowDelay = false;\n  Timers.timerCounterWasReset = false;\n\n  if (Cpu.GBCEnabled) {\n    // DIV\n    eightBitStoreIntoGBMemory(0xff04, 0x1e);\n    Timers.dividerRegister = 0x1ea0; // 0xFF05 -> 0xFF06 = 0x00\n    // TAC\n\n    eightBitStoreIntoGBMemory(0xff07, 0xf8);\n    Timers.timerInputClock = 0xf8;\n  } else {\n    // DIV\n    eightBitStoreIntoGBMemory(0xff04, 0xab);\n    Timers.dividerRegister = 0xabcc; // 0xFF05 -> 0xFF06 = 0x00\n    // TAC\n\n    eightBitStoreIntoGBMemory(0xff07, 0xf8);\n    Timers.timerInputClock = 0xf8;\n  }\n} // Batch Process Timers\n// Only checked on writes\n// Function to batch process our Timers after we skipped so many cycles\n\n\nfunction batchProcessTimers() {\n  // TODO: Did a timer rewrite, make a proper batch processing\n  // For timers\n  updateTimers(Timers.currentCycles);\n  Timers.currentCycles = 0;\n}\n\nfunction updateTimers(numberOfCycles) {\n  // Want to increment 4 cycles at a time like an actual GB would\n  var cyclesIncreased = 0;\n\n  while (cyclesIncreased < numberOfCycles) {\n    var oldDividerRegister = Timers.dividerRegister;\n    cyclesIncreased += 4;\n    Timers.dividerRegister += 4;\n\n    if (Timers.dividerRegister > 0xffff) {\n      Timers.dividerRegister -= 0x10000;\n    }\n\n    if (Timers.timerEnabled) {\n      if (Timers.timerCounterOverflowDelay) {\n        Timers.timerCounter = Timers.timerModulo; // Fire off timer interrupt\n\n        requestTimerInterrupt();\n        Timers.timerCounterOverflowDelay = false;\n        Timers.timerCounterWasReset = true;\n      } else if (Timers.timerCounterWasReset) {\n        Timers.timerCounterWasReset = false;\n      }\n\n      if (_checkDividerRegisterFallingEdgeDetector(oldDividerRegister, Timers.dividerRegister)) {\n        _incrementTimerCounter();\n      }\n    }\n  }\n} // Function to increment our Timer Counter\n// This fires off interrupts once we overflow\n\n\nfunction _incrementTimerCounter() {\n  Timers.timerCounter += 1;\n\n  if (Timers.timerCounter > 255) {\n    // Whenever the timer overflows, there is a slight delay (4 cycles)\n    // Of when TIMA gets TMA's value, and the interrupt is fired.\n    // Thus we will set the delay, which can be handled in the update timer or write trap\n    Timers.timerCounterOverflowDelay = true;\n    Timers.timerCounter = 0;\n  }\n} // Function to act as our falling edge detector\n// Whenever we have a falling edge, we need to increment TIMA\n// http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n// https://github.com/binji/binjgb/blob/master/src/emulator.c#L1944\n\n\nfunction _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, newDividerRegister) {\n  // Get our mask\n  var timerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock); // If the old register's watched bit was zero,\n  // but after adding the new registers wastch bit is now 1\n\n\n  if (checkBitOnByte(timerCounterMaskBit, oldDividerRegister) && !checkBitOnByte(timerCounterMaskBit, newDividerRegister)) {\n    return true;\n  }\n\n  return false;\n} // Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\n\n\nfunction _getTimerCounterMaskBit(timerInputClock) {\n  switch (timerInputClock) {\n    case 0x00:\n      return 9;\n\n    case 0x01:\n      return 3;\n\n    case 0x02:\n      return 5;\n\n    case 0x03:\n      return 7;\n  }\n\n  return 0;\n} // http://www.codeslinger.co.uk/pages/projects/gameboy/joypad.html\n// Joypad Register\n// Taken from pandocs\n// Bit 7 - Not used\n// Bit 6 - Not used\n// Bit 5 - P15 Select Button Keys (0=Select)\n// Bit 4 - P14 Select Direction Keys (0=Select)\n// Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only)\n// Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only)\n// Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only)\n// Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n// Button Ids will be the following:\n// UP - 0\n// RIGHT - 1\n// DOWN - 2\n// LEFT - 3\n// A - 4\n// B - 5\n// SELECT - 6\n// START - 7\n\n\nvar Joypad =\n/** @class */\nfunction () {\n  function Joypad() {}\n\n  Joypad.updateJoypad = function (value) {\n    Joypad.joypadRegisterFlipped = value ^ 0xff;\n    Joypad.isDpadType = checkBitOnByte(4, Joypad.joypadRegisterFlipped);\n    Joypad.isButtonType = checkBitOnByte(5, Joypad.joypadRegisterFlipped);\n  }; // Function to save the state of the class\n\n\n  Joypad.saveState = function () {}; // Function to load the save state from memory\n\n\n  Joypad.loadState = function () {\n    Joypad.updateJoypad(eightBitLoadFromGBMemory(Joypad.memoryLocationJoypadRegister));\n  };\n\n  Joypad.up = false;\n  Joypad.down = false;\n  Joypad.left = false;\n  Joypad.right = false;\n  Joypad.a = false;\n  Joypad.b = false;\n  Joypad.select = false;\n  Joypad.start = false;\n  Joypad.memoryLocationJoypadRegister = 0xff00; // Cache some values on the Joypad register\n\n  Joypad.joypadRegisterFlipped = 0;\n  Joypad.isDpadType = false;\n  Joypad.isButtonType = false; // Save States\n  // Not doing anything for Joypad for now\n\n  Joypad.saveStateSlot = 3;\n  return Joypad;\n}();\n\nfunction getJoypadState() {\n  // Get the joypad register\n  var joypadRegister = Joypad.joypadRegisterFlipped;\n\n  if (Joypad.isDpadType) {\n    // D-pad buttons\n    // Up\n    if (Joypad.up) {\n      joypadRegister = resetBitOnByte(2, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(2, joypadRegister);\n    } // Right\n\n\n    if (Joypad.right) {\n      joypadRegister = resetBitOnByte(0, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(0, joypadRegister);\n    } // Down\n\n\n    if (Joypad.down) {\n      joypadRegister = resetBitOnByte(3, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(3, joypadRegister);\n    } // Left\n\n\n    if (Joypad.left) {\n      joypadRegister = resetBitOnByte(1, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(1, joypadRegister);\n    }\n  } else if (Joypad.isButtonType) {\n    // A\n    if (Joypad.a) {\n      joypadRegister = resetBitOnByte(0, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(0, joypadRegister);\n    } // B\n\n\n    if (Joypad.b) {\n      joypadRegister = resetBitOnByte(1, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(1, joypadRegister);\n    } // Select\n\n\n    if (Joypad.select) {\n      joypadRegister = resetBitOnByte(2, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(2, joypadRegister);\n    } // Start\n\n\n    if (Joypad.start) {\n      joypadRegister = resetBitOnByte(3, joypadRegister);\n    } else {\n      joypadRegister = setBitOnByte(3, joypadRegister);\n    }\n  } // Set the top 4 bits to on\n\n\n  joypadRegister = joypadRegister | 0xf0;\n  return joypadRegister;\n}\n\nfunction setJoypadState(up, right, down, left, a, b, select, start) {\n  if (up > 0) {\n    _pressJoypadButton(0);\n  } else {\n    _releaseJoypadButton(0);\n  }\n\n  if (right > 0) {\n    _pressJoypadButton(1);\n  } else {\n    _releaseJoypadButton(1);\n  }\n\n  if (down > 0) {\n    _pressJoypadButton(2);\n  } else {\n    _releaseJoypadButton(2);\n  }\n\n  if (left > 0) {\n    _pressJoypadButton(3);\n  } else {\n    _releaseJoypadButton(3);\n  }\n\n  if (a > 0) {\n    _pressJoypadButton(4);\n  } else {\n    _releaseJoypadButton(4);\n  }\n\n  if (b > 0) {\n    _pressJoypadButton(5);\n  } else {\n    _releaseJoypadButton(5);\n  }\n\n  if (select > 0) {\n    _pressJoypadButton(6);\n  } else {\n    _releaseJoypadButton(6);\n  }\n\n  if (start > 0) {\n    _pressJoypadButton(7);\n  } else {\n    _releaseJoypadButton(7);\n  }\n}\n\nfunction _pressJoypadButton(buttonId) {\n  // Un stop the CPU\n  Cpu.isStopped = false; // Check if the button state changed from not pressed\n\n  var isButtonStateChanging = false;\n\n  if (!_getJoypadButtonStateFromButtonId(buttonId)) {\n    isButtonStateChanging = true;\n  } // Set our joypad state\n\n\n  _setJoypadButtonStateFromButtonId(buttonId, true); // If the button state is changing, check for an interrupt\n\n\n  if (isButtonStateChanging) {\n    // Determine if it is a button or a dpad button\n    var isDpadTypeButton = false;\n\n    if (buttonId <= 3) {\n      isDpadTypeButton = true;\n    }\n\n    var shouldRequestInterrupt = false; // Check if the game is looking for a dpad type button press\n\n    if (Joypad.isDpadType && isDpadTypeButton) {\n      shouldRequestInterrupt = true;\n    } // Check if the game is looking for a button type button press\n\n\n    if (Joypad.isButtonType && !isDpadTypeButton) {\n      shouldRequestInterrupt = true;\n    } // Finally, request the interrupt, if the button state actually changed\n\n\n    if (shouldRequestInterrupt) {\n      requestJoypadInterrupt();\n    }\n  }\n}\n\nfunction _releaseJoypadButton(buttonId) {\n  // Set our joypad state\n  _setJoypadButtonStateFromButtonId(buttonId, false);\n}\n\nfunction _getJoypadButtonStateFromButtonId(buttonId) {\n  switch (buttonId) {\n    case 0:\n      return Joypad.up;\n\n    case 1:\n      return Joypad.right;\n\n    case 2:\n      return Joypad.down;\n\n    case 3:\n      return Joypad.left;\n\n    case 4:\n      return Joypad.a;\n\n    case 5:\n      return Joypad.b;\n\n    case 6:\n      return Joypad.select;\n\n    case 7:\n      return Joypad.start;\n\n    default:\n      return false;\n  }\n}\n\nfunction _setJoypadButtonStateFromButtonId(buttonId, isPressed) {\n  switch (buttonId) {\n    case 0:\n      Joypad.up = isPressed;\n      break;\n\n    case 1:\n      Joypad.right = isPressed;\n      break;\n\n    case 2:\n      Joypad.down = isPressed;\n      break;\n\n    case 3:\n      Joypad.left = isPressed;\n      break;\n\n    case 4:\n      Joypad.a = isPressed;\n      break;\n\n    case 5:\n      Joypad.b = isPressed;\n      break;\n\n    case 6:\n      Joypad.select = isPressed;\n      break;\n\n    case 7:\n      Joypad.start = isPressed;\n      break;\n  }\n} // Function to handle rom/rambanking\n\n\nfunction handleBanking(offset, value) {\n  // Is rom Only does not bank\n  if (Memory.isRomOnly) {\n    return;\n  } // Enable Ram Banking\n\n\n  if (offset <= 0x1fff) {\n    if (Memory.isMBC2 && !checkBitOnByte(4, value)) {\n      // Do Nothing\n      return;\n    } else {\n      var romEnableByte = value & 0x0f;\n\n      if (romEnableByte === 0x00) {\n        Memory.isRamBankingEnabled = false;\n      } else if (romEnableByte === 0x0a) {\n        Memory.isRamBankingEnabled = true;\n      }\n    }\n  } else if (offset <= 0x3fff) {\n    if (!Memory.isMBC5 || offset <= 0x2fff) {\n      // Change Low Bits on the Current Rom Bank\n      if (Memory.isMBC2) {\n        Memory.currentRomBank = value & 0x0f;\n      } // Set the number of bottom bytes from the MBC type\n\n\n      var romBankLowerBits = value;\n\n      if (Memory.isMBC1) {\n        // Only want the bottom 5\n        romBankLowerBits = romBankLowerBits & 0x1f;\n        Memory.currentRomBank = Memory.currentRomBank & 0xe0;\n      } else if (Memory.isMBC3) {\n        // Only Want the bottom 7\n        romBankLowerBits = romBankLowerBits & 0x7f;\n        Memory.currentRomBank = Memory.currentRomBank & 0x80;\n      } else if (Memory.isMBC5) {\n        // Going to switch the whole thing\n        Memory.currentRomBank = Memory.currentRomBank & 0x00;\n      } // Set the lower bytes\n\n\n      Memory.currentRomBank = Memory.currentRomBank | romBankLowerBits;\n      return;\n    } else {\n      // TODO: MBC5 High bits Rom bank, check if this works, not sure about the value\n      var highByte = 0;\n      var lowByte = splitLowByte(Memory.currentRomBank);\n\n      if (value > 0) {\n        highByte = 1;\n      }\n\n      Memory.currentRomBank = concatenateBytes(highByte, lowByte);\n    }\n  } else if (!Memory.isMBC2 && offset <= 0x5fff) {\n    // ROM / RAM Banking, MBC2 doesn't do this\n    if (Memory.isMBC1 && Memory.isMBC1RomModeEnabled) {\n      // Do an upper bit rom bank for MBC 1\n      // Remove upper bits of currentRomBank\n      Memory.currentRomBank = Memory.currentRomBank & 0x1f;\n      var romBankHigherBits = value & 0xe0;\n      Memory.currentRomBank = Memory.currentRomBank | romBankHigherBits;\n      return;\n    }\n\n    var ramBankBits = value;\n\n    if (!Memory.isMBC5) {\n      // Get the bottom 2 bits\n      ramBankBits = ramBankBits & 0x03;\n    } else {\n      // Get the bottom nibble\n      ramBankBits = ramBankBits & 0x0f;\n    } // Set our ram bank\n\n\n    Memory.currentRamBank = ramBankBits;\n    return;\n  } else if (!Memory.isMBC2 && offset <= 0x7fff) {\n    if (Memory.isMBC1) {\n      if (checkBitOnByte(0, value)) {\n        Memory.isMBC1RomModeEnabled = true;\n      } else {\n        Memory.isMBC1RomModeEnabled = false;\n      }\n    } // TODO: MBC3 Latch Clock Data\n\n  }\n}\n\nfunction getRomBankAddress(gameboyOffset) {\n  var currentRomBank = Memory.currentRomBank;\n\n  if (!Memory.isMBC5 && currentRomBank === 0) {\n    currentRomBank = 1;\n  } // Adjust our gameboy offset relative to zero for the gameboy memory map\n\n\n  return 0x4000 * currentRomBank + (gameboyOffset - Memory.switchableCartridgeRomLocation);\n}\n\nfunction getRamBankAddress(gameboyOffset) {\n  // Adjust our gameboy offset relative to zero for the gameboy memory map\n  return 0x2000 * Memory.currentRamBank + (gameboyOffset - Memory.cartridgeRamLocation);\n}\n\nfunction initializeDma() {\n  if (Cpu.GBCEnabled) {\n    // GBC DMA\n    eightBitStoreIntoGBMemory(0xff51, 0xff);\n    eightBitStoreIntoGBMemory(0xff52, 0xff);\n    eightBitStoreIntoGBMemory(0xff53, 0xff);\n    eightBitStoreIntoGBMemory(0xff54, 0xff);\n    eightBitStoreIntoGBMemory(0xff55, 0xff);\n  } else {\n    // GBC DMA\n    eightBitStoreIntoGBMemory(0xff51, 0xff);\n    eightBitStoreIntoGBMemory(0xff52, 0xff);\n    eightBitStoreIntoGBMemory(0xff53, 0xff);\n    eightBitStoreIntoGBMemory(0xff54, 0xff);\n    eightBitStoreIntoGBMemory(0xff55, 0xff);\n  }\n}\n\nfunction startDmaTransfer(sourceAddressOffset) {\n  var sourceAddress = sourceAddressOffset;\n  sourceAddress = sourceAddress << 8;\n\n  for (var i = 0; i <= 0x9f; i++) {\n    var spriteInformationByte = eightBitLoadFromGBMemory(sourceAddress + i);\n    var spriteInformationAddress = Memory.spriteInformationTableLocation + i;\n    eightBitStoreIntoGBMemory(spriteInformationAddress, spriteInformationByte);\n  } // TCAGBD:  This copy (DMA) needs 160 × 4 + 4 clocks to complete in both double speed and single speeds modes\n  // Increment all of our Cycle coiunters in ../cpu/opcodes\n\n\n  Memory.DMACycles = 644;\n} // https://gist.github.com/drhelius/3394856\n// http://bgb.bircd.org/pandocs.htm\n\n\nfunction startHdmaTransfer(hdmaTriggerByteToBeWritten) {\n  // Check if we are Gbc\n  if (!Cpu.GBCEnabled) {\n    return;\n  } // Check if we are trying to terminate an already active HBLANK HDMA\n\n\n  if (Memory.isHblankHdmaActive && !checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n    // Don't reset anything, just set bit 7 to 1 on the trigger byte\n    Memory.isHblankHdmaActive = false;\n    var hdmaTriggerByte = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaTrigger);\n    eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, setBitOnByte(7, hdmaTriggerByte));\n    return;\n  } // Get our source and destination for the HDMA\n\n\n  var hdmaSource = getHdmaSourceFromMemory();\n  var hdmaDestination = getHdmaDestinationFromMemory(); // Get the length from the trigger\n  // Lower 7 bits, Add 1, times 16\n  // https://gist.github.com/drhelius/3394856\n\n  var transferLength = resetBitOnByte(7, hdmaTriggerByteToBeWritten);\n  transferLength = (transferLength + 1) * 16; // Get bit 7 of the trigger for the HDMA type\n\n  if (checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n    // H-Blank DMA\n    Memory.isHblankHdmaActive = true;\n    Memory.hblankHdmaTransferLengthRemaining = transferLength;\n    Memory.hblankHdmaSource = hdmaSource;\n    Memory.hblankHdmaDestination = hdmaDestination; // This will be handled in updateHblankHdma()\n    // Since we return false in write traps, we need to now write the byte\n    // Be sure to reset bit 7, to show that the hdma is active\n\n    eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, resetBitOnByte(7, hdmaTriggerByteToBeWritten));\n  } else {\n    // General DMA\n    hdmaTransfer(hdmaSource, hdmaDestination, transferLength); // Stop the DMA\n\n    eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, 0xff);\n  }\n}\n\nfunction updateHblankHdma() {\n  if (!Memory.isHblankHdmaActive) {\n    return;\n  } // Get our amount of bytes to transfer (Only 0x10 bytes at a time)\n\n\n  var bytesToTransfer = 0x10;\n\n  if (Memory.hblankHdmaTransferLengthRemaining < bytesToTransfer) {\n    // Set to the difference\n    bytesToTransfer = Memory.hblankHdmaTransferLengthRemaining;\n  } // Do the transfer (Only 0x10 bytes at a time)\n\n\n  hdmaTransfer(Memory.hblankHdmaSource, Memory.hblankHdmaDestination, bytesToTransfer); // Update our source and destination\n\n  Memory.hblankHdmaSource += bytesToTransfer;\n  Memory.hblankHdmaDestination += bytesToTransfer;\n  Memory.hblankHdmaTransferLengthRemaining -= bytesToTransfer;\n\n  if (Memory.hblankHdmaTransferLengthRemaining <= 0) {\n    // End the transfer\n    Memory.isHblankHdmaActive = false; // Need to clear the HDMA with 0xFF, which sets bit 7 to 1 to show the HDMA has ended\n\n    eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, 0xff);\n  } else {\n    // Set our new transfer length, make sure it is in the weird format,\n    // and make sure bit 7 is 0, to show that the HDMA is Active\n    var remainingTransferLength = Memory.hblankHdmaTransferLengthRemaining;\n    var transferLengthAsByte = remainingTransferLength / 16 - 1;\n    eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, resetBitOnByte(7, transferLengthAsByte));\n  }\n} // Simple Function to transfer the bytes from a destination to a source for a general pourpose or Hblank HDMA\n\n\nfunction hdmaTransfer(hdmaSource, hdmaDestination, transferLength) {\n  for (var i = 0; i < transferLength; i++) {\n    var sourceByte = eightBitLoadFromGBMemoryWithTraps(hdmaSource + i); // get the hdmaDestination with wrapping\n    // See issue #61: https://github.com/torch2424/wasmBoy/issues/61\n\n    var hdmaDestinationWithWrapping = hdmaDestination + i;\n\n    while (hdmaDestinationWithWrapping > 0x9fff) {\n      // Simply clear the top 3 bits\n      hdmaDestinationWithWrapping = hdmaDestinationWithWrapping - 0x2000;\n    }\n\n    eightBitStoreIntoGBMemoryWithTraps(hdmaDestinationWithWrapping, sourceByte);\n  } // Set our Cycles used for the HDMA\n  // Since DMA in GBC Double Speed Mode takes 80 micro seconds,\n  // And HDMA takes 8 micro seconds per 0x10 bytes in GBC Double Speed mode (and GBC Normal Mode)\n  // Will assume (644 / 10) cycles for GBC Double Speed Mode,\n  // and (644 / 10 / 2) for GBC Normal Mode\n\n\n  var hdmaCycles = 32;\n\n  if (Cpu.GBCDoubleSpeed) {\n    hdmaCycles = 64;\n  }\n\n  hdmaCycles = hdmaCycles * (transferLength / 0x10);\n  Memory.DMACycles += hdmaCycles;\n} // Function to get our HDMA Source\n// Follows the poan docs\n\n\nfunction getHdmaSourceFromMemory() {\n  // Get our source for the HDMA\n  var hdmaSourceHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceHigh);\n  var hdmaSourceLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceLow);\n  var hdmaSource = concatenateBytes(hdmaSourceHigh, hdmaSourceLow); // And off the appopriate bits for the source and destination\n  // And off the bottom 4 bits\n\n  hdmaSource = hdmaSource & 0xfff0;\n  return hdmaSource;\n} // Function to get our HDMA Destination\n// Follows the poan docs\n\n\nfunction getHdmaDestinationFromMemory() {\n  var hdmaDestinationHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationHigh);\n  var hdmaDestinationLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationLow);\n  var hdmaDestination = concatenateBytes(hdmaDestinationHigh, hdmaDestinationLow); // Can only be in VRAM, 0x8000 -> 0x9FF0\n  // Pan docs says to knock off upper 3 bits, and lower 4 bits\n  // Which gives us: 0001111111110000 or 0x1FF0\n  // Meaning we must add 0x8000\n\n  hdmaDestination = hdmaDestination & 0x1ff0;\n  hdmaDestination += Memory.videoRamLocation;\n  return hdmaDestination;\n} // Internal function to trap any modify data trying to be written to Gameboy memory\n// Follows the Gameboy memory map\n\n\nfunction checkWriteTraps(offset, value) {\n  // Cache globals used multiple times for performance\n  var videoRamLocation = Memory.videoRamLocation;\n  var spriteInformationTableLocation = Memory.spriteInformationTableLocation; // Handle banking\n\n  if (offset < videoRamLocation) {\n    handleBanking(offset, value);\n    return false;\n  } // Check the graphics mode to see if we can write to VRAM\n  // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n\n\n  if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n    // Can only read/write from VRAM During Modes 0 - 2\n    // See graphics/lcd.ts\n    // TODO: This can do more harm than good in a beta emulator,\n    // requires precise timing disabling for now\n    // if (Graphics.currentLcdMode > 2) {\n    //   return false;\n    // }\n    // Not batch processing here for performance\n    // batchProcessGraphics();\n    // Allow the original write, and return since we dont need to look anymore\n    return true;\n  } // Be sure to copy everything in EchoRam to Work Ram\n  // Codeslinger: The ECHO memory region (0xE000-0xFDFF) is quite different because any data written here is also written in the equivelent ram memory region 0xC000-0xDDFF.\n  // Hence why it is called echo\n\n\n  if (offset >= Memory.echoRamLocation && offset < spriteInformationTableLocation) {\n    var wramOffset = offset - 0x2000;\n    eightBitStoreIntoGBMemory(wramOffset, value); // Allow the original write, and return since we dont need to look anymore\n\n    return true;\n  } // Also check for individal writes\n  // Can only read/write from OAM During Modes 0 - 1\n  // See graphics/lcd.ts\n\n\n  if (offset >= spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n    // Can only read/write from OAM During Mode 2\n    // See graphics/lcd.ts\n    if (Lcd.currentLcdMode < 2) {\n      return false;\n    } // Not batch processing here for performance\n    // batchProcessGraphics();\n    // Allow the original write, and return since we dont need to look anymore\n\n\n    return true;\n  }\n\n  if (offset >= Memory.unusableMemoryLocation && offset <= Memory.unusableMemoryEndLocation) {\n    return false;\n  } // Sound\n  // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n\n\n  if (offset >= 0xff10 && offset <= 0xff26) {\n    batchProcessAudio();\n    return SoundRegisterWriteTraps(offset, value);\n  } // FF27 - FF2F not used\n  // Final Wave Table for Channel 3\n\n\n  if (offset >= 0xff30 && offset <= 0xff3f) {\n    batchProcessAudio();\n  } // Other Memory effects fomr read/write to Lcd/Graphics\n\n\n  if (offset >= Lcd.memoryLocationLcdControl && offset <= Graphics.memoryLocationWindowX) {\n    // Not batch processing here for performance\n    // batchProcessGraphics();\n    if (offset === Lcd.memoryLocationLcdControl) {\n      // Shorcut for isLCD Enabled since it gets \"hot\"\n      Lcd.updateLcdControl(value);\n      return true;\n    } // reset the current scanline if the game tries to write to it\n\n\n    if (offset === Graphics.memoryLocationScanlineRegister) {\n      Graphics.scanlineRegister = 0;\n      eightBitStoreIntoGBMemory(offset, 0);\n      return false;\n    } // Cache our coincidence compare\n\n\n    if (offset === Lcd.memoryLocationCoincidenceCompare) {\n      Lcd.coincidenceCompare = value;\n      return true;\n    } // Do the direct memory access transfer for spriteInformationTable\n    // Check the graphics mode to see if we can write to VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n\n\n    if (offset === Graphics.memoryLocationDmaTransfer) {\n      // otherwise, perform a DMA transfer\n      // And allow the original write\n      startDmaTransfer(value);\n      return true;\n    } // Scroll and Window XY\n\n\n    switch (offset) {\n      case Graphics.memoryLocationScrollX:\n        Graphics.scrollX = value;\n        return true;\n\n      case Graphics.memoryLocationScrollY:\n        Graphics.scrollY = value;\n        return true;\n\n      case Graphics.memoryLocationWindowX:\n        Graphics.windowX = value;\n        return true;\n\n      case Graphics.memoryLocationWindowY:\n        Graphics.windowY = value;\n        return true;\n    } // Allow the original write, and return since we dont need to look anymore\n\n\n    return true;\n  } // Do an HDMA\n\n\n  if (offset === Memory.memoryLocationHdmaTrigger) {\n    startHdmaTransfer(value);\n    return false;\n  } // Don't allow banking if we are doing an Hblank HDM transfer\n  // https://gist.github.com/drhelius/3394856\n\n\n  if (offset === Memory.memoryLocationGBCWRAMBank || offset === Memory.memoryLocationGBCVRAMBank) {\n    if (Memory.isHblankHdmaActive) {\n      if (Memory.hblankHdmaSource >= 0x4000 && Memory.hblankHdmaSource <= 0x7fff || Memory.hblankHdmaSource >= 0xd000 && Memory.hblankHdmaSource <= 0xdfff) {\n        return false;\n      }\n    }\n  } // Handle GBC Pallete Write\n\n\n  if (offset >= Palette.memoryLocationBackgroundPaletteIndex && offset <= Palette.memoryLocationSpritePaletteData) {\n    // Incremeenting the palette handled by the write\n    writeColorPaletteToMemory(offset, value);\n    return true;\n  } // Handle timer writes\n\n\n  if (offset >= Timers.memoryLocationDividerRegister && offset <= Timers.memoryLocationTimerControl) {\n    // Batch Process\n    batchProcessTimers();\n\n    switch (offset) {\n      case Timers.memoryLocationDividerRegister:\n        Timers.updateDividerRegister(value);\n        return false;\n\n      case Timers.memoryLocationTimerCounter:\n        Timers.updateTimerCounter(value);\n        return true;\n\n      case Timers.memoryLocationTimerModulo:\n        Timers.updateTimerModulo(value);\n        return true;\n\n      case Timers.memoryLocationTimerControl:\n        Timers.updateTimerControl(value);\n        return true;\n    }\n\n    return true;\n  } // Handle Joypad writes for HW reg caching\n\n\n  if (offset === Joypad.memoryLocationJoypadRegister) {\n    Joypad.updateJoypad(value);\n  } // Handle Interrupt writes\n\n\n  if (offset === Interrupts.memoryLocationInterruptRequest) {\n    Interrupts.updateInterruptRequested(value);\n    return true;\n  }\n\n  if (offset === Interrupts.memoryLocationInterruptEnabled) {\n    Interrupts.updateInterruptEnabled(value);\n    return true;\n  } // Allow the original write\n\n\n  return true;\n} // WasmBoy memory map:\n// Private function to translate a offset meant for the gameboy memory map\n// To the wasmboy memory map\n// Following: http://gameboy.mongenel.com/dmg/asmmemmap.html\n// And https://github.com/Dooskington/GameLad/wiki/Part-11---Memory-Bank-Controllers\n// Performance help from @dcodeIO, and awesome-gbdev\n\n\nfunction getWasmBoyOffsetFromGameBoyOffset(gameboyOffset) {\n  // Get the top byte and switch\n  var gameboyOffsetHighByte = gameboyOffset >> 12;\n\n  switch (gameboyOffsetHighByte) {\n    case 0x00:\n    case 0x01:\n    case 0x02:\n    case 0x03:\n      // Cartridge ROM - Bank 0 (fixed)\n      // 0x0000 -> 0x0D2400\n      return gameboyOffset + CARTRIDGE_ROM_LOCATION;\n\n    case 0x04:\n    case 0x05:\n    case 0x06:\n    case 0x07:\n      // Cartridge ROM - Switchable Banks 1-xx\n      // 0x4000 -> (0x0D2400 + 0x4000)\n      return getRomBankAddress(gameboyOffset) + CARTRIDGE_ROM_LOCATION;\n\n    case 0x08:\n    case 0x09:\n      // Video RAM\n      // 0x8000 -> 0x000400\n      var vramBankId = 0;\n\n      if (Cpu.GBCEnabled) {\n        // Find our current VRAM Bank\n        vramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCVRAMBank) & 0x01; // Even though We added another 0x2000, the Cartridge ram is pulled out of our Internal Memory Space\n        // Therefore, we do not need to adjust for this extra 0x2000\n      }\n\n      return gameboyOffset - Memory.videoRamLocation + VIDEO_RAM_LOCATION + 0x2000 * vramBankId;\n\n    case 0x0a:\n    case 0x0b:\n      // Cartridge RAM - A.K.A External RAM\n      // 0xA000 -> 0x008400\n      return getRamBankAddress(gameboyOffset) + CARTRIDGE_RAM_LOCATION;\n\n    case 0x0c:\n      // Gameboy Ram Bank 0\n      // 0xC000 -> 0x000400\n      // Don't need to add head, since we move out 0x200 from the cartridge ram\n      return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION;\n\n    case 0x0d:\n      // Gameboy Ram Banks, Switchable in GBC Mode\n      // 0xD000 -> 0x000400\n      // In CGB Mode 32 KBytes internal RAM are available.\n      // This memory is divided into 8 banks of 4 KBytes each.\n      // Bank 0 is always available in memory at C000-CFFF,\n      // Bank 1-7 can be selected into the address space at D000-DFFF.\n      // http://gbdev.gg8.se/wiki/articles/CGB_Registers#FF70_-_SVBK_-_CGB_Mode_Only_-_WRAM_Bank\n      // Get the last 3 bits to find our wram ID\n      var wramBankId = 0;\n\n      if (Cpu.GBCEnabled) {\n        wramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCWRAMBank) & 0x07;\n      }\n\n      if (wramBankId < 1) {\n        wramBankId = 1;\n      } // (0x1000 * (wramBankId - 1)) -> To find the correct wram bank.\n      // wramBankId - 1, because we alreayd have the space for wramBank 1, and are currently in it\n      // So need to address space for 6 OTHER banks\n\n\n      return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION + 0x1000 * (wramBankId - 1);\n\n    default:\n      // Everything Else after Gameboy Ram Banks\n      // 0xE000 -> 0x000400\n      // 0x6000 For the Extra WRAM Banks\n      return gameboyOffset - Memory.echoRamLocation + OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION;\n  }\n} // Store / Write memory access\n\n\nfunction eightBitStoreIntoGBMemory(gameboyOffset, value) {\n  store(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset), value);\n}\n\nfunction eightBitStoreIntoGBMemoryWithTraps(offset, value) {\n  if (checkWriteTraps(offset, value)) {\n    eightBitStoreIntoGBMemory(offset, value);\n  }\n}\n\nfunction sixteenBitStoreIntoGBMemoryWithTraps(offset, value) {\n  // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n  // Split the value into two seperate bytes\n  var highByte = splitHighByte(value);\n  var lowByte = splitLowByte(value);\n  var nextOffset = offset + 1;\n\n  if (checkWriteTraps(offset, lowByte)) {\n    eightBitStoreIntoGBMemory(offset, lowByte);\n  }\n\n  if (checkWriteTraps(nextOffset, highByte)) {\n    eightBitStoreIntoGBMemory(nextOffset, highByte);\n  }\n}\n\nfunction sixteenBitStoreIntoGBMemory(offset, value) {\n  // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n  // Split the value into two seperate bytes\n  var highByte = splitHighByte(value);\n  var lowByte = splitLowByte(value);\n  var nextOffset = offset + 1;\n  eightBitStoreIntoGBMemory(offset, lowByte);\n  eightBitStoreIntoGBMemory(nextOffset, highByte);\n}\n\nfunction storeBooleanDirectlyToWasmMemory(offset, value) {\n  if (value) {\n    store(offset, 0x01);\n  } else {\n    store(offset, 0x00);\n  }\n} // Funcitons for setting and checking the LCD\n\n\nvar Lcd =\n/** @class */\nfunction () {\n  function Lcd() {} // Functions called in write traps to update our hardware registers\n\n\n  Lcd.updateLcdControl = function (value) {\n    Lcd.enabled = checkBitOnByte(7, value);\n    Lcd.windowTileMapDisplaySelect = checkBitOnByte(6, value);\n    Lcd.windowDisplayEnabled = checkBitOnByte(5, value);\n    Lcd.bgWindowTileDataSelect = checkBitOnByte(4, value);\n    Lcd.bgTileMapDisplaySelect = checkBitOnByte(3, value);\n    Lcd.tallSpriteSize = checkBitOnByte(2, value);\n    Lcd.spriteDisplayEnable = checkBitOnByte(1, value);\n    Lcd.bgDisplayEnabled = checkBitOnByte(0, value);\n  }; // Memory Locations\n  // Also known at STAT\n  // LCD Status (0xFF41) bits Explanation\n  // 0                0                    000                    0             00\n  //       |Coicedence Interrupt|     |Mode Interrupts|  |coincidence flag|  | Mode |\n  // Modes:\n  // 0 or 00: H-Blank\n  // 1 or 01: V-Blank\n  // 2 or 10: Searching Sprites Atts\n  // 3 or 11: Transfering Data to LCD Driver\n\n\n  Lcd.memoryLocationLcdStatus = 0xff41;\n  Lcd.currentLcdMode = 0;\n  Lcd.memoryLocationCoincidenceCompare = 0xff45;\n  Lcd.coincidenceCompare = 0; // Also known as LCDC\n  // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n  // Bit 7 - LCD Display Enable (0=Off, 1=On)\n  // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n  // Bit 5 - Window Display Enable (0=Off, 1=On)\n  // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n  // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n  // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n  // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n  // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On\n\n  Lcd.memoryLocationLcdControl = 0xff40; // Decoupled LCDC for caching\n\n  Lcd.enabled = true;\n  Lcd.windowTileMapDisplaySelect = false;\n  Lcd.windowDisplayEnabled = false;\n  Lcd.bgWindowTileDataSelect = false;\n  Lcd.bgTileMapDisplaySelect = false;\n  Lcd.tallSpriteSize = false;\n  Lcd.spriteDisplayEnable = false;\n  Lcd.bgDisplayEnabled = false;\n  return Lcd;\n}(); // Pass in the lcd status for performance\n\n\nfunction setLcdStatus() {\n  // Check if the Lcd was disabled\n  if (!Lcd.enabled) {\n    // Reset scanline cycle counter\n    Graphics.scanlineCycleCounter = 0;\n    Graphics.scanlineRegister = 0;\n    eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, 0); // Set to mode 0\n    // https://www.reddit.com/r/EmuDev/comments/4w6479/gb_dr_mario_level_generation_issues/\n\n    var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n    lcdStatus = resetBitOnByte(1, lcdStatus);\n    lcdStatus = resetBitOnByte(0, lcdStatus);\n    Lcd.currentLcdMode = 0; // Store the status in memory\n\n    eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    return;\n  } // Get our current scanline, and lcd mode\n\n\n  var scanlineRegister = Graphics.scanlineRegister;\n  var lcdMode = Lcd.currentLcdMode; // Default to  H-Blank\n\n  var newLcdMode = 0; // Find our newLcd mode\n\n  if (scanlineRegister >= 144) {\n    // VBlank mode\n    newLcdMode = 1;\n  } else {\n    if (Graphics.scanlineCycleCounter >= Graphics.MIN_CYCLES_SPRITES_LCD_MODE()) {\n      // Searching Sprites Atts\n      newLcdMode = 2;\n    } else if (Graphics.scanlineCycleCounter >= Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE()) {\n      // Transferring data to lcd\n      newLcdMode = 3;\n    }\n  }\n\n  if (lcdMode !== newLcdMode) {\n    // Get our lcd status\n    var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus); // Save our lcd mode\n\n    Lcd.currentLcdMode = newLcdMode;\n    var shouldRequestInterrupt = false; // Set our LCD Statuc accordingly\n\n    switch (newLcdMode) {\n      case 0x00:\n        lcdStatus = resetBitOnByte(0, lcdStatus);\n        lcdStatus = resetBitOnByte(1, lcdStatus);\n        shouldRequestInterrupt = checkBitOnByte(3, lcdStatus);\n        break;\n\n      case 0x01:\n        lcdStatus = resetBitOnByte(1, lcdStatus);\n        lcdStatus = setBitOnByte(0, lcdStatus);\n        shouldRequestInterrupt = checkBitOnByte(4, lcdStatus);\n        break;\n\n      case 0x02:\n        lcdStatus = resetBitOnByte(0, lcdStatus);\n        lcdStatus = setBitOnByte(1, lcdStatus);\n        shouldRequestInterrupt = checkBitOnByte(5, lcdStatus);\n        break;\n\n      case 0x03:\n        lcdStatus = setBitOnByte(0, lcdStatus);\n        lcdStatus = setBitOnByte(1, lcdStatus);\n        break;\n    } // Check if we want to request an interrupt, and we JUST changed modes\n\n\n    if (shouldRequestInterrupt) {\n      requestLcdInterrupt();\n    } // Check for updating the Hblank HDMA\n\n\n    if (newLcdMode === 0) {\n      // Update the Hblank DMA, will simply return if not active\n      updateHblankHdma();\n    } // Check for requesting a VBLANK interrupt\n\n\n    if (newLcdMode === 1) {\n      requestVBlankInterrupt();\n    } // Check for the coincidence flag\n    // Need to check on every mode, and not just HBLANK, as checking on hblank breaks shantae, which checks on vblank\n\n\n    var coincidenceCompare = Lcd.coincidenceCompare;\n\n    if ((newLcdMode === 0 || newLcdMode === 1) && scanlineRegister === coincidenceCompare) {\n      lcdStatus = setBitOnByte(2, lcdStatus);\n\n      if (checkBitOnByte(6, lcdStatus)) {\n        requestLcdInterrupt();\n      }\n    } else {\n      lcdStatus = resetBitOnByte(2, lcdStatus);\n    } // Finally, save our status\n\n\n    eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n  }\n} // Functions for rendering the background\n\n\nfunction renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n  // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n  // Get our scrollX and scrollY (u16 to play nice with assemblyscript)\n  // let scrollX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollX);\n  // let scrollY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollY);\n  var scrollX = Graphics.scrollX;\n  var scrollY = Graphics.scrollY; // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n  // this is done by getting the current scroll Y position,\n  // and adding it do what Y Value the scanline is drawing on the camera.\n\n  var pixelYPositionInMap = scanlineRegister + scrollY; // Gameboy camera will \"wrap\" around the background map,\n  // meaning that if the pixelValue is 350, then we need to subtract 256 (decimal) to get it's actual value\n  // pixel values (scrollX and scrollY) range from 0x00 - 0xFF\n\n  if (pixelYPositionInMap >= 0x100) {\n    pixelYPositionInMap -= 0x100;\n  } // Draw the Background scanline\n\n\n  drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, 0, scrollX);\n}\n\nfunction renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n  // Get our windowX and windowY\n  // let windowX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowX);\n  // let windowY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowY);\n  var windowX = Graphics.windowX;\n  var windowY = Graphics.windowY; // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n  // First ensure that the scanline is greater than our window\n\n  if (scanlineRegister < windowY) {\n    // Window is not within the current camera view\n    return;\n  } // WindowX is offset by 7\n\n\n  windowX = windowX - 7; // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n\n  var pixelYPositionInMap = scanlineRegister - windowY; // xOffset is simply a neagative window x\n\n  var xOffset = -1 * windowX; // Draw the Background scanline\n\n  drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, windowX, xOffset);\n} // Function frankenstein'd together to allow background and window to share the same draw scanline function\n\n\nfunction drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, iStart, xOffset) {\n  // Get our tile Y position in the map\n  var tileYPositionInMap = pixelYPositionInMap >> 3; // Loop through x to draw the line like a CRT\n\n  for (var i = iStart; i < 160; i++) {\n    // Get our Current X position of our pixel on the on the 160x144 camera\n    // this is done by getting the current scroll X position,\n    // and adding it do what X Value the scanline is drawing on the camera.\n    var pixelXPositionInMap = i + xOffset; // This is to compensate wrapping, same as pixelY\n\n    if (pixelXPositionInMap >= 0x100) {\n      pixelXPositionInMap -= 0x100;\n    } // Divide our pixel position by 8 to get our tile.\n    // Since, there are 256x256 pixels, and 32x32 tiles.\n    // 256 / 8 = 32.\n    // Also, bitshifting by 3, do do a division by 8\n    // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n\n\n    var tileXPositionInMap = pixelXPositionInMap >> 3; // Get our tile address on the tileMap\n    // NOTE: (tileMap represents where each tile is displayed on the screen)\n    // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n    // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n    // And we have x pixel 160. 160 / 8 = 20.\n    // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n    // Think like indexing a 2d array, as a 1d array and it make sense :)\n\n    var tileMapAddress = tileMapMemoryLocation + tileYPositionInMap * 32 + tileXPositionInMap; // Get the tile Id on the Tile Map\n\n    var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0); // Now that we have our Tile Id, let's check our Tile Cache\n\n    var usedTileCache = false;\n\n    if (Config.tileCaching) {\n      var pixelsDrawn = drawLineOfTileFromTileCache(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap); // Increment i by 7, not 8 because i will be incremented at end of for loop\n\n      if (pixelsDrawn > 0) {\n        i += pixelsDrawn - 1;\n        usedTileCache = true;\n      }\n    }\n\n    if (Config.tileRendering && !usedTileCache) {\n      var pixelsDrawn = drawLineOfTileFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap); // A line of a tile is 8 pixels wide, therefore increase i by (pixelsDrawn - 1), and then the for loop will increment by 1\n      // For a net increment for 8\n\n      if (pixelsDrawn > 0) {\n        i += pixelsDrawn - 1;\n      }\n    } else if (!usedTileCache) {\n      if (Cpu.GBCEnabled) {\n        // Draw the individual pixel\n        drawColorPixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n      } else {\n        // Draw the individual pixel\n        drawMonochromePixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap);\n      }\n    }\n  }\n} // Function to draw a pixel for the standard GB\n\n\nfunction drawMonochromePixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap) {\n  // Now we can process the the individual bytes that represent the pixel on a tile\n  // Now get our tileDataAddress for the corresponding tileID we found in the map\n  // Read the comments in _getTileDataAddress() to see what's going on.\n  // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n  // This funcitons returns the start of memory locaiton for the tile 'c'.\n  var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap); // Get the y pixel of the 8 by 8 tile.\n  // Simply modulo the scanline.\n  // For instance, let's say we are printing the first line of pixels on our camera,\n  // And the first line of pixels on our tile.\n  // yPixel = 1. 1 % 8 = 1.\n  // And for the last line\n  // yPixel = 144. 144 % 8 = 0.\n  // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n  // Because remember, we are counting lines on the display NOT including zero\n\n  var pixelYInTile = pixelYPositionInMap % 8; // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n  // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n  // Again, think like you had to map a 2d array as a 1d.\n\n  var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, 0);\n  var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, 0); // Same logic as pixelYInTile.\n  // However, We need to reverse our byte,\n  // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n  // Therefore, is pixelX was 2, then really is need to be 5\n  // So 2 - 7 = -5, * 1 = 5\n  // Or to simplify, 7 - 2 = 5 haha!\n\n  var pixelXInTile = pixelXPositionInMap % 8;\n  pixelXInTile = 7 - pixelXInTile; // Now we can get the color for that pixel\n  // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n  // To Get the color Id.\n  // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n  // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n\n  var paletteColorId = 0;\n\n  if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n    // Byte one represents the second bit in our color id, so bit shift\n    paletteColorId += 1;\n    paletteColorId = paletteColorId << 1;\n  }\n\n  if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n    paletteColorId += 1;\n  } // Not checking u8 Portability overflow here, since it can't be greater than i32 over :p\n  // Now get the colorId from the pallete, to get our final color\n  // Developers could change colorIds to represents different colors\n  // in their palette, thus we need to grab the color from there\n  //let pixelColorInTileFromPalette: u8 = getColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n  // Moved below for perofrmance\n  // FINALLY, RENDER THAT PIXEL!\n  // Only rendering camera for now, so coordinates are for the camera.\n  // Get the rgb value for the color Id, will be repeated into R, G, B\n\n\n  var monochromeColor = getMonochromeColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n  setPixelOnFrame(xPixel, yPixel, 0, monochromeColor);\n  setPixelOnFrame(xPixel, yPixel, 1, monochromeColor);\n  setPixelOnFrame(xPixel, yPixel, 2, monochromeColor); // Lastly, add the pixel to our background priority map\n  // https://github.com/torch2424/wasmBoy/issues/51\n  // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n  // Bit 2 will represent if the Bg/Window has GBC priority.\n\n  addPriorityforPixel(xPixel, yPixel, paletteColorId);\n} // Function to draw a pixel from a tile in C O L O R\n// See above for more context on some variables\n\n\nfunction drawColorPixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n  // Now get our tileDataAddress for the corresponding tileID we found in the map\n  // Read the comments in _getTileDataAddress() to see what's going on.\n  // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n  // This funcitons returns the start of memory locaiton for the tile 'c'.\n  var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap); // Get the GB Map Attributes\n  // Bit 0-2  Background Palette number  (BGP0-7)\n  // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n  // Bit 4    Not used\n  // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n  // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n  // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n\n  var bgMapAttributes = loadFromVramBank(tileMapAddress, 1); // See above for explanation\n\n  var pixelYInTile = pixelYPositionInMap % 8;\n\n  if (checkBitOnByte(6, bgMapAttributes)) {\n    // We are mirroring the tile, therefore, we need to opposite byte\n    // So if our pixel was 0 our of 8, it wild become 7 :)\n    pixelYInTile = 7 - pixelYInTile;\n  } // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n  // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n  // But we need to load the time from a specific Vram bank\n\n\n  var vramBankId = 0;\n\n  if (checkBitOnByte(3, bgMapAttributes)) {\n    vramBankId = 1;\n  }\n\n  var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n  var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId); // Get our X pixel. Need to NOT reverse it if it was flipped.\n  // See above, you have to reverse this normally\n\n  var pixelXInTile = pixelXPositionInMap % 8;\n\n  if (!checkBitOnByte(5, bgMapAttributes)) {\n    pixelXInTile = 7 - pixelXInTile;\n  } // Now we can get the color for that pixel\n  // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n  // To Get the color Id.\n  // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n  // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n\n\n  var paletteColorId = 0;\n\n  if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n    // Byte one represents the second bit in our color id, so bit shift\n    paletteColorId += 1;\n    paletteColorId = paletteColorId << 1;\n  }\n\n  if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n    paletteColorId += 1;\n  } // Finally lets add some, C O L O R\n  // Want the botom 3 bits\n\n\n  var bgPalette = bgMapAttributes & 0x07; // Call the helper function to grab the correct color from the palette\n\n  var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false); // Split off into red green and blue\n\n  var red = getColorComponentFromRgb(0, rgbColorPalette);\n  var green = getColorComponentFromRgb(1, rgbColorPalette);\n  var blue = getColorComponentFromRgb(2, rgbColorPalette); // Finally Place our colors on the things\n\n  setPixelOnFrame(xPixel, yPixel, 0, red);\n  setPixelOnFrame(xPixel, yPixel, 1, green);\n  setPixelOnFrame(xPixel, yPixel, 2, blue); // Lastly, add the pixel to our background priority map\n  // https://github.com/torch2424/wasmBoy/issues/51\n  // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n  // Bit 2 will represent if the Bg/Window has GBC priority.\n\n  addPriorityforPixel(xPixel, yPixel, paletteColorId, checkBitOnByte(7, bgMapAttributes));\n} // Function to attempt to draw the tile from the tile cache\n\n\nfunction drawLineOfTileFromTileCache(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n  // First, initialize how many pixels we have drawn\n  var pixelsDrawn = 0; // Check if the current tile matches our tileId\n  // TODO: Allow the first line to use the tile cache, for some odd reason it doesn't work when scanline is 0\n\n  if (yPixel > 0 && xPixel > 8 && tileIdFromTileMap === TileCache.tileId && xPixel === TileCache.nextXIndexToPerformCacheCheck) {\n    // Was last tile flipped\n    var wasLastTileHorizontallyFlipped = false;\n    var isCurrentTileHorizontallyFlipped = false;\n\n    if (checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress - 1))) {\n      wasLastTileHorizontallyFlipped = true;\n    }\n\n    if (checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress))) {\n      isCurrentTileHorizontallyFlipped = true;\n    } // Simply copy the last 8 pixels from memory to copy the line from the tile\n\n\n    for (var tileCacheIndex = 0; tileCacheIndex < 8; tileCacheIndex++) {\n      // Check if we need to render backwards for flipping\n      if (wasLastTileHorizontallyFlipped !== isCurrentTileHorizontallyFlipped) {\n        tileCacheIndex = 7 - tileCacheIndex;\n      } // First check for overflow\n\n\n      if (xPixel + tileCacheIndex <= 160) {\n        // Get the pixel location in memory of the tile\n        var previousXPixel = xPixel - (8 - tileCacheIndex);\n        var previousTilePixelLocation = FRAME_LOCATION + getRgbPixelStart(xPixel + tileCacheIndex, yPixel); // Cycle through the RGB\n\n        for (var tileCacheRgb = 0; tileCacheRgb < 3; tileCacheRgb++) {\n          setPixelOnFrame(xPixel + tileCacheIndex, yPixel, tileCacheRgb, load(previousTilePixelLocation + tileCacheRgb));\n        } // Copy the priority for the pixel\n\n\n        var pixelPriority = getPriorityforPixel(previousXPixel, yPixel);\n        addPriorityforPixel(xPixel + tileCacheIndex, yPixel, resetBitOnByte(2, pixelPriority), checkBitOnByte(2, pixelPriority));\n        pixelsDrawn++;\n      }\n    }\n  } else {\n    // Save our current tile Id, and the next x value we should check the x index\n    TileCache.tileId = tileIdFromTileMap;\n  } // Calculate when we should do the tileCache calculation again\n\n\n  if (xPixel >= TileCache.nextXIndexToPerformCacheCheck) {\n    TileCache.nextXIndexToPerformCacheCheck = xPixel + 8;\n    var xOffsetTileWidthRemainder = pixelXPositionInMap % 8;\n\n    if (xPixel < xOffsetTileWidthRemainder) {\n      TileCache.nextXIndexToPerformCacheCheck += xOffsetTileWidthRemainder;\n    }\n  }\n\n  return pixelsDrawn;\n} // Function to draw a line of a tile in Color\n// This is for tile rendering shortcuts\n\n\nfunction drawLineOfTileFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n  // Get the which line of the tile we are rendering\n  var tileLineY = pixelYPositionInMap % 8; // Now lets find our tileX start and end\n  // This is for the case where i = 0, but scroll X was 3.\n  // Or i is 157, and our camera is only 160 pixels wide\n\n  var tileXStart = 0;\n\n  if (xPixel == 0) {\n    tileXStart = pixelXPositionInMap - pixelXPositionInMap / 8 * 8;\n  }\n\n  var tileXEnd = 7;\n\n  if (xPixel + 8 > 160) {\n    tileXEnd = 160 - xPixel;\n  } // initialize some variables for GBC\n\n\n  var bgMapAttributes = -1;\n  var vramBankId = 0;\n\n  if (Cpu.GBCEnabled) {\n    // Get Our GBC properties\n    bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n\n    if (checkBitOnByte(3, bgMapAttributes)) {\n      vramBankId = 1;\n    }\n\n    if (checkBitOnByte(6, bgMapAttributes)) {\n      // We are mirroring the tile, therefore, we need to opposite byte\n      // So if our pixel was 0 our of 8, it wild become 7 :)\n      tileLineY = 7 - tileLineY;\n    }\n  } // Return the number of pixels drawn\n\n\n  return drawPixelsFromLineOfTile(tileIdFromTileMap, tileDataMemoryLocation, vramBankId, tileXStart, tileXEnd, tileLineY, xPixel, yPixel, 160, FRAME_LOCATION, false, 0, bgMapAttributes);\n} // Functions for rendering the sprites\n\n\nfunction renderSprites(scanlineRegister, useLargerSprites) {\n  // Need to loop through all 40 sprites to check their status\n  // Going backwards since lower sprites draw over higher ones\n  // Will fix dragon warrior 3 intro\n  for (var i = 39; i >= 0; i--) {\n    // Sprites occupy 4 bytes in the sprite attribute table\n    var spriteTableIndex = i * 4; // Y positon is offset by 16, X position is offset by 8\n\n    var spriteYPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex);\n    var spriteXPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 1);\n    var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2); // Pan docs of sprite attirbute table\n    // Bit7   OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\n    //      (Used for both BG and Window. BG color 0 is always behind OBJ)\n    // Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n    // Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n    // Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n    // Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n    // Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n    // Apply sprite X and Y offset\n    // TODO: Sprites are overflowing on x if less than 8\n\n    spriteYPosition -= 16;\n    spriteXPosition -= 8; // Find our sprite height\n\n    var spriteHeight = 8;\n\n    if (useLargerSprites) {\n      spriteHeight = 16; // @binji says in 8x16 mode, even tileId always drawn first\n      // This will fix shantae sprites which always uses odd numbered indexes\n      // TODO: Do the actual Pandocs thing:\n      // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n      // So just knock off the last bit? :)\n\n      if (spriteTileId % 2 === 1) {\n        spriteTileId -= 1;\n      }\n    } // Find if our sprite is on the current scanline\n\n\n    if (scanlineRegister >= spriteYPosition && scanlineRegister < spriteYPosition + spriteHeight) {\n      // Then we need to draw the current sprite\n      // Get our sprite attributes since we know we shall be drawing the tile\n      var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3); // Check sprite Priority\n\n      var isSpritePriorityBehindWindowAndBackground = checkBitOnByte(7, spriteAttributes); // Check if we should flip the sprite on the x or y axis\n\n      var flipSpriteY = checkBitOnByte(6, spriteAttributes);\n      var flipSpriteX = checkBitOnByte(5, spriteAttributes); // Find which line on the sprite we are on\n\n      var currentSpriteLine = scanlineRegister - spriteYPosition; // If we fliiped the Y axis on our sprite, need to read from memory backwards to acheive the same effect\n\n      if (flipSpriteY) {\n        currentSpriteLine -= spriteHeight;\n        currentSpriteLine = currentSpriteLine * -1; // Bug fix for the flipped flies in link's awakening\n\n        currentSpriteLine -= 1;\n      } // Each line of a tile takes two bytes of memory\n\n\n      currentSpriteLine = currentSpriteLine * 2; // Get our sprite tile address, need to also add the current sprite line to get the correct bytes\n\n      var spriteTileAddressStart = getTileDataAddress(Graphics.memoryLocationTileDataSelectOneStart, spriteTileId);\n      spriteTileAddressStart = spriteTileAddressStart + currentSpriteLine;\n      var spriteTileAddress = spriteTileAddressStart; // Find which VRAM Bank to load from\n\n      var vramBankId = 0;\n\n      if (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes)) {\n        vramBankId = 1;\n      }\n\n      var spriteDataByteOneForLineOfTilePixels = loadFromVramBank(spriteTileAddress, vramBankId);\n      var spriteDataByteTwoForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 1, vramBankId); // Iterate over the width of our sprite to find our individual pixels\n\n      for (var tilePixel = 7; tilePixel >= 0; tilePixel--) {\n        // Get our spritePixel, and check for flipping\n        var spritePixelXInTile = tilePixel;\n\n        if (flipSpriteX) {\n          spritePixelXInTile -= 7;\n          spritePixelXInTile = spritePixelXInTile * -1;\n        } // Get the color Id of our sprite, similar to renderBackground()\n        // With the first byte, and second byte lined up method thing\n        // Yes, the second byte comes before the first, see ./background.ts\n\n\n        var spriteColorId = 0;\n\n        if (checkBitOnByte(spritePixelXInTile, spriteDataByteTwoForLineOfTilePixels)) {\n          // Byte one represents the second bit in our color id, so bit shift\n          spriteColorId += 1;\n          spriteColorId = spriteColorId << 1;\n        }\n\n        if (checkBitOnByte(spritePixelXInTile, spriteDataByteOneForLineOfTilePixels)) {\n          spriteColorId += 1;\n        } // ColorId zero (last two bits of pallette) are transparent\n        // http://gbdev.gg8.se/wiki/articles/Video_Display\n\n\n        if (spriteColorId !== 0) {\n          // Find our actual X pixel location on the gameboy \"camera\" view\n          // This cannot be less than zero, i32 will overflow\n          var spriteXPixelLocationInCameraView = spriteXPosition + (7 - tilePixel);\n\n          if (spriteXPixelLocationInCameraView >= 0 && spriteXPixelLocationInCameraView <= 160) {\n            // There are two cases where wouldnt draw the pixel on top of the Bg/window\n            // 1. if isSpritePriorityBehindWindowAndBackground, sprite can only draw over color 0\n            // 2. if bit 2 of our priority is set, then BG-to-OAM Priority from pandoc\n            //  is active, meaning BG tile will have priority above all OBJs\n            //  (regardless of the priority bits in OAM memory)\n            // But if GBC and Bit 0 of LCDC is set, we always draw the object\n            var shouldShowFromLcdcPriority = false;\n            var shouldHideFromOamPriority = false;\n            var shouldHideFromBgPriority = false; // LCDC Priority\n\n            if (Cpu.GBCEnabled && !Lcd.bgDisplayEnabled) {\n              shouldShowFromLcdcPriority = true;\n            }\n\n            if (!shouldShowFromLcdcPriority) {\n              // Now that we have our coordinates, check for sprite priority\n              // Lets get the priority byte we put in memory\n              var bgPriorityByte = getPriorityforPixel(spriteXPixelLocationInCameraView, scanlineRegister);\n              var bgColorFromPriorityByte = bgPriorityByte & 0x03; // Doing an else if, since either will automatically stop drawing the pixel\n\n              if (isSpritePriorityBehindWindowAndBackground && bgColorFromPriorityByte > 0) {\n                // OAM Priority\n                shouldHideFromOamPriority = true;\n              } else if (Cpu.GBCEnabled && checkBitOnByte(2, bgPriorityByte) && bgColorFromPriorityByte > 0) {\n                // Bg priority\n                shouldHideFromBgPriority = true;\n              }\n            }\n\n            if (shouldShowFromLcdcPriority || !shouldHideFromOamPriority && !shouldHideFromBgPriority) {\n              if (!Cpu.GBCEnabled) {\n                // Get our monochrome color RGB from the current sprite pallete\n                // Get our sprite pallete\n                var spritePaletteLocation = Graphics.memoryLocationSpritePaletteOne;\n\n                if (checkBitOnByte(4, spriteAttributes)) {\n                  spritePaletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                }\n\n                var spritePixelColorFromPalette = getMonochromeColorFromPalette(spriteColorId, spritePaletteLocation); // Finally set the pixel!\n\n                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, spritePixelColorFromPalette);\n                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, spritePixelColorFromPalette);\n                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, spritePixelColorFromPalette);\n              } else {\n                // Get our RGB Color\n                // Finally lets add some, C O L O R\n                // Want the botom 3 bits\n                var bgPalette = spriteAttributes & 0x07; // Call the helper function to grab the correct color from the palette\n\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, spriteColorId, true); // Split off into red green and blue\n\n                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                var blue = getColorComponentFromRgb(2, rgbColorPalette); // Finally Place our colors on the things\n\n                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, red);\n                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, green);\n                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, blue);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n} // Main Class and funcitons for rendering the gameboy display\n\n\nvar Graphics =\n/** @class */\nfunction () {\n  function Graphics() {} // Number of cycles to run in each batch process\n  // This number should be in sync so that graphics doesn't run too many cyles at once\n  // and does not exceed the minimum number of cyles for either scanlines, or\n  // How often we change the frame, or a channel's update process\n\n\n  Graphics.batchProcessCycles = function () {\n    return Graphics.MAX_CYCLES_PER_SCANLINE();\n  };\n\n  Graphics.MAX_CYCLES_PER_SCANLINE = function () {\n    if (Cpu.GBCDoubleSpeed) {\n      return 912;\n    }\n\n    return 456;\n  };\n\n  Graphics.MIN_CYCLES_SPRITES_LCD_MODE = function () {\n    if (Cpu.GBCDoubleSpeed) {\n      // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n      return 752;\n    }\n\n    return 376;\n  };\n\n  Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE = function () {\n    if (Cpu.GBCDoubleSpeed) {\n      // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n      return 498;\n    }\n\n    return 249;\n  }; // Function to save the state of the class\n\n\n  Graphics.saveState = function () {\n    store(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot), Graphics.scanlineCycleCounter);\n    store(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot), Lcd.currentLcdMode);\n    eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, Graphics.scanlineRegister);\n  }; // Function to load the save state from memory\n\n\n  Graphics.loadState = function () {\n    Graphics.scanlineCycleCounter = load(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot));\n    Lcd.currentLcdMode = load(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot));\n    Graphics.scanlineRegister = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n    Lcd.updateLcdControl(eightBitLoadFromGBMemory(Lcd.memoryLocationLcdControl));\n  }; // Current cycles\n  // This will be used for batch processing\n\n\n  Graphics.currentCycles = 0; // Count the number of cycles to keep synced with cpu cycles\n  // Found GBC cycles by finding clock speed from Gb Cycles\n  // See TCAGBD For cycles\n\n  Graphics.scanlineCycleCounter = 0x00; // LCD\n  // scanlineRegister also known as LY\n  // See: http://bgb.bircd.org/pandocs.txt , and search \" LY \"\n\n  Graphics.memoryLocationScanlineRegister = 0xff44;\n  Graphics.scanlineRegister = 0;\n  Graphics.memoryLocationDmaTransfer = 0xff46; // Scroll and Window\n\n  Graphics.memoryLocationScrollX = 0xff43;\n  Graphics.scrollX = 0;\n  Graphics.memoryLocationScrollY = 0xff42;\n  Graphics.scrollY = 0;\n  Graphics.memoryLocationWindowX = 0xff4b;\n  Graphics.windowX = 0;\n  Graphics.memoryLocationWindowY = 0xff4a;\n  Graphics.windowY = 0; // Tile Maps And Data\n\n  Graphics.memoryLocationTileMapSelectZeroStart = 0x9800;\n  Graphics.memoryLocationTileMapSelectOneStart = 0x9c00;\n  Graphics.memoryLocationTileDataSelectZeroStart = 0x8800;\n  Graphics.memoryLocationTileDataSelectOneStart = 0x8000; // Sprites\n\n  Graphics.memoryLocationSpriteAttributesTable = 0xfe00; // Palettes\n\n  Graphics.memoryLocationBackgroundPalette = 0xff47;\n  Graphics.memoryLocationSpritePaletteOne = 0xff48;\n  Graphics.memoryLocationSpritePaletteTwo = 0xff49; // Screen data needs to be stored in wasm memory\n  // Save States\n\n  Graphics.saveStateSlot = 1;\n  return Graphics;\n}(); // Batch Process Graphics\n// http://gameboy.mongenel.com/dmg/asmmemmap.html and http://gbdev.gg8.se/wiki/articles/Video_Display\n// Function to batch process our graphics after we skipped so many cycles\n// This is not currently checked in memory read/write\n\n\nfunction batchProcessGraphics() {\n  if (Graphics.currentCycles < Graphics.batchProcessCycles()) {\n    return;\n  }\n\n  while (Graphics.currentCycles >= Graphics.batchProcessCycles()) {\n    updateGraphics(Graphics.batchProcessCycles());\n    Graphics.currentCycles = Graphics.currentCycles - Graphics.batchProcessCycles();\n  }\n}\n\nfunction initializeGraphics() {\n  // Reset Stateful Variables\n  Graphics.currentCycles = 0;\n  Graphics.scanlineCycleCounter = 0x00;\n  Graphics.scanlineRegister = 0;\n  Graphics.scrollX = 0;\n  Graphics.scrollY = 0;\n  Graphics.windowX = 0;\n  Graphics.windowY = 0;\n\n  if (Cpu.GBCEnabled) {\n    // Bgb says LY is 90 on boot\n    Graphics.scanlineRegister = 0x90;\n    eightBitStoreIntoGBMemory(0xff40, 0x91);\n    eightBitStoreIntoGBMemory(0xff41, 0x81); // 0xFF42 -> 0xFF43 = 0x00\n\n    eightBitStoreIntoGBMemory(0xff44, 0x90); // 0xFF45 -> 0xFF46 = 0x00\n\n    eightBitStoreIntoGBMemory(0xff47, 0xfc); // 0xFF48 -> 0xFF4B = 0x00\n    // GBC VRAM Banks\n\n    eightBitStoreIntoGBMemory(0xff4f, 0x00);\n    eightBitStoreIntoGBMemory(0xff70, 0x01);\n  } else {\n    Graphics.scanlineRegister = 0x90;\n    eightBitStoreIntoGBMemory(0xff40, 0x91);\n    eightBitStoreIntoGBMemory(0xff41, 0x85); // 0xFF42 -> 0xFF45 = 0x00\n\n    eightBitStoreIntoGBMemory(0xff46, 0xff);\n    eightBitStoreIntoGBMemory(0xff47, 0xfc);\n    eightBitStoreIntoGBMemory(0xff48, 0xff);\n    eightBitStoreIntoGBMemory(0xff49, 0xff); // 0xFF4A -> 0xFF4B = 0x00\n    // GBC VRAM Banks\n\n    eightBitStoreIntoGBMemory(0xff4f, 0x00);\n    eightBitStoreIntoGBMemory(0xff70, 0x01);\n  }\n}\n\nfunction updateGraphics(numberOfCycles) {\n  if (Lcd.enabled) {\n    Graphics.scanlineCycleCounter += numberOfCycles;\n\n    while (Graphics.scanlineCycleCounter >= Graphics.MAX_CYCLES_PER_SCANLINE()) {\n      // Reset the scanlineCycleCounter\n      // Don't set to zero to catch extra cycles\n      Graphics.scanlineCycleCounter -= Graphics.MAX_CYCLES_PER_SCANLINE(); // Move to next scanline\n      // let scanlineRegister: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n\n      var scanlineRegister = Graphics.scanlineRegister; // Check if we've reached the last scanline\n\n      if (scanlineRegister === 144) {\n        // Draw the scanline\n        if (!Config.graphicsDisableScanlineRendering) {\n          _drawScanline(scanlineRegister);\n        } else {\n          _renderEntireFrame();\n        } // Clear the priority map\n\n\n        clearPriorityMap(); // Reset the tile cache\n\n        resetTileCache();\n      } else if (scanlineRegister < 144) {\n        // Draw the scanline\n        if (!Config.graphicsDisableScanlineRendering) {\n          _drawScanline(scanlineRegister);\n        }\n      } // Post increment the scanline register after drawing\n\n\n      if (scanlineRegister > 153) {\n        // Check if we overflowed scanlines\n        // if so, reset our scanline number\n        scanlineRegister = 0;\n      } else {\n        scanlineRegister += 1;\n      } // Store our new scanline value\n\n\n      Graphics.scanlineRegister = scanlineRegister; // eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, scanlineRegister);\n    }\n  } // Games like Pokemon crystal want the vblank right as it turns to the value, and not have it increment after\n  // It will break and lead to an infinite loop in crystal\n  // Therefore, we want to be checking/Setting our LCD status after the scanline updates\n\n\n  setLcdStatus();\n} // TODO: Make this a _drawPixelOnScanline, as values can be updated while drawing a scanline\n\n\nfunction _drawScanline(scanlineRegister) {\n  // Get our seleted tile data memory location\n  var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n\n  if (Lcd.bgWindowTileDataSelect) {\n    tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n  } // Check if the background is enabled\n  // NOTE: On Gameboy color, Pandocs says this does something completely different\n  // LCDC.0 - 2) CGB in CGB Mode: BG and Window Master Priority\n  // When Bit 0 is cleared, the background and window lose their priority -\n  // the sprites will be always displayed on top of background and window,\n  // independently of the priority flags in OAM and BG Map attributes.\n  // TODO: Enable this different feature for GBC\n\n\n  if (Cpu.GBCEnabled || Lcd.bgDisplayEnabled) {\n    // Get our map memory location\n    var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n\n    if (Lcd.bgTileMapDisplaySelect) {\n      tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n    } // Finally, pass everything to draw the background\n\n\n    renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n  } // Check if the window is enabled, and we are currently\n  // Drawing lines on the window\n\n\n  if (Lcd.windowDisplayEnabled) {\n    // Get our map memory location\n    var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n\n    if (Lcd.windowTileMapDisplaySelect) {\n      tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n    } // Finally, pass everything to draw the background\n\n\n    renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n  }\n\n  if (Lcd.spriteDisplayEnable) {\n    // Sprites are enabled, render them!\n    renderSprites(scanlineRegister, Lcd.tallSpriteSize);\n  }\n} // Function to render everything for a frame at once\n// This is to improve performance\n// See above for comments on how things are donw\n\n\nfunction _renderEntireFrame() {\n  // Scanline needs to be in sync while we draw, thus, we can't shortcut anymore than here\n  for (var i = 0; i <= 144; i++) {\n    _drawScanline(i);\n  }\n} // Function to get the start of a RGB pixel (R, G, B)\n\n\nfunction getRgbPixelStart(x, y) {\n  // Get the pixel number\n  // let pixelNumber: i32 = (y * 160) + x;\n  // Each pixel takes 3 slots, therefore, multiply by 3!\n  return (y * 160 + x) * 3;\n} // Also need to store current frame in memory to be read by JS\n\n\nfunction setPixelOnFrame(x, y, colorId, color) {\n  // Currently only supports 160x144\n  // Storing in X, then y\n  // So need an offset\n  store(FRAME_LOCATION + getRgbPixelStart(x, y) + colorId, color);\n} // Function to shortcut the memory map, and load directly from the VRAM Bank\n\n\nfunction loadFromVramBank(gameboyOffset, vramBankId) {\n  var wasmBoyAddress = gameboyOffset - Memory.videoRamLocation + GAMEBOY_INTERNAL_MEMORY_LOCATION + 0x2000 * (vramBankId & 0x01);\n  return load(wasmBoyAddress);\n} // Returns -1 if no trap found, otherwise returns a value that should be fed for the address\n\n\nfunction checkReadTraps(offset) {\n  // Cache globals used multiple times for performance\n  var videoRamLocation = Memory.videoRamLocation; // Try to break early for most common scenario\n\n  if (offset < videoRamLocation) {\n    return -1;\n  } // Check the graphics mode to see if we can read VRAM\n  // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n\n\n  if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n    // Can only read/write from VRAM During Modes 0 - 2\n    // See graphics/lcd.ts\n    // TODO: This can do more harm than good in a beta emulator,\n    // requres precise timing, disabling for now\n    // if (Graphics.currentLcdMode > 2) {\n    //   return 0xFF;\n    // }\n    return -1;\n  } // ECHO Ram, E000\tFDFF\tMirror of C000~DDFF (ECHO RAM)\n  // http://gbdev.gg8.se/wiki/articles/Memory_Map\n\n\n  if (offset >= Memory.echoRamLocation && offset < Memory.spriteInformationTableLocation) {\n    // Simply return the mirror'd value\n    return eightBitLoadFromGBMemory(offset - 0x2000);\n  } // Check for individal writes\n  // Can only read/write from OAM During Modes 0 - 1\n  // See graphics/lcd.ts\n\n\n  if (offset >= Memory.spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n    // Can only read/write from OAM During Mode 2\n    // See graphics/lcd.ts\n    if (Lcd.currentLcdMode < 2) {\n      return 0xff;\n    } // Not batch processing here for performance\n    // batchProcessGraphics();\n\n\n    return -1;\n  } // Graphics\n  // Not batch processing here for performance\n  // batchProcessGraphics();\n\n\n  if (offset === Graphics.memoryLocationScanlineRegister) {\n    eightBitStoreIntoGBMemory(offset, Graphics.scanlineRegister);\n    return Graphics.scanlineRegister;\n  } // Sound\n  // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n  // TODO: Put these bounds on the Sound Class\n\n\n  if (offset >= 0xff10 && offset <= 0xff26) {\n    batchProcessAudio();\n    return SoundRegisterReadTraps(offset);\n  } // FF27 - FF2F not used\n  // Final Wave Table for Channel 3\n\n\n  if (offset >= 0xff30 && offset <= 0xff3f) {\n    batchProcessAudio();\n    return -1;\n  } // Timers\n\n\n  if (offset === Timers.memoryLocationDividerRegister) {\n    // Divider register in memory is just the upper 8 bits\n    // http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n    var upperDividerRegisterBits = splitHighByte(Timers.dividerRegister);\n    eightBitStoreIntoGBMemory(offset, upperDividerRegisterBits);\n    return upperDividerRegisterBits;\n  }\n\n  if (offset === Timers.memoryLocationTimerCounter) {\n    eightBitStoreIntoGBMemory(offset, Timers.timerCounter);\n    return Timers.timerCounter;\n  } // Joypad\n\n\n  if (offset === Joypad.memoryLocationJoypadRegister) {\n    return getJoypadState();\n  }\n\n  return -1;\n} // Load/Read functionality for memory\n\n\nfunction eightBitLoadFromGBMemory(gameboyOffset) {\n  return load(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset));\n}\n\nfunction eightBitLoadFromGBMemoryWithTraps(offset) {\n  var readTrapResult = checkReadTraps(offset);\n\n  switch (readTrapResult) {\n    case -1:\n      return eightBitLoadFromGBMemory(offset);\n\n    default:\n      return readTrapResult;\n  }\n} // TODO: Rename this to sixteenBitLoadFromGBMemoryWithTraps\n\n\nfunction sixteenBitLoadFromGBMemory(offset) {\n  // Get our low byte\n  var lowByte = 0;\n  var lowByteReadTrapResult = checkReadTraps(offset);\n\n  switch (lowByteReadTrapResult) {\n    case -1:\n      lowByte = eightBitLoadFromGBMemory(offset);\n      break;\n\n    default:\n      lowByte = lowByteReadTrapResult;\n      break;\n  } // Get the next offset for the second byte\n\n\n  var nextOffset = offset + 1; // Get our high byte\n\n  var highByte = 0;\n  var highByteReadTrapResult = checkReadTraps(nextOffset);\n\n  switch (highByteReadTrapResult) {\n    case -1:\n      highByte = eightBitLoadFromGBMemory(nextOffset);\n      break;\n\n    default:\n      highByte = highByteReadTrapResult;\n      break;\n  } // Concatenate the bytes and return\n\n\n  return concatenateBytes(highByte, lowByte);\n}\n\nfunction loadBooleanDirectlyFromWasmMemory(offset) {\n  var booleanAsInt = load(offset);\n\n  if (booleanAsInt > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nvar Memory =\n/** @class */\nfunction () {\n  function Memory() {} // Function to save the state of the class\n\n\n  Memory.saveState = function () {\n    store(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot), Memory.currentRomBank);\n    store(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot), Memory.currentRamBank);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot), Memory.isRamBankingEnabled);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot), Memory.isMBC1RomModeEnabled);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot), Memory.isRomOnly);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot), Memory.isMBC1);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot), Memory.isMBC2);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot), Memory.isMBC3);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot), Memory.isMBC5);\n  }; // Function to load the save state from memory\n\n\n  Memory.loadState = function () {\n    Memory.currentRomBank = load(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot));\n    Memory.currentRamBank = load(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot));\n    Memory.isRamBankingEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot));\n    Memory.isMBC1RomModeEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot));\n    Memory.isRomOnly = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot));\n    Memory.isMBC1 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot));\n    Memory.isMBC2 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot));\n    Memory.isMBC3 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot));\n    Memory.isMBC5 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot));\n  }; // ----------------------------------\n  // Gameboy Memory Map\n  // ----------------------------------\n  // https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf\n  // http://gameboy.mongenel.com/dmg/asmmemmap.html\n  // using Arrays, first index is start, second is end\n\n\n  Memory.cartridgeRomLocation = 0x0000;\n  Memory.switchableCartridgeRomLocation = 0x4000;\n  Memory.videoRamLocation = 0x8000;\n  Memory.cartridgeRamLocation = 0xa000;\n  Memory.internalRamBankZeroLocation = 0xc000; // This ram bank is switchable\n\n  Memory.internalRamBankOneLocation = 0xd000;\n  Memory.echoRamLocation = 0xe000;\n  Memory.spriteInformationTableLocation = 0xfe00;\n  Memory.spriteInformationTableLocationEnd = 0xfe9f;\n  Memory.unusableMemoryLocation = 0xfea0;\n  Memory.unusableMemoryEndLocation = 0xfeff; // Hardware I/O, 0xFF00 -> 0xFF7F\n  // Zero Page, 0xFF80 -> 0xFFFE\n  // Intterupt Enable Flag, 0xFFFF\n  // ----------------------------------\n  // Rom/Ram Banking\n  // ----------------------------------\n  // http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers#MBC3_.28max_2MByte_ROM_and.2For_32KByte_RAM_and_Timer.29\n  // http://www.codeslinger.co.uk/pages/projects/gameboy/banking.html\n\n  Memory.currentRomBank = 0x00;\n  Memory.currentRamBank = 0x00;\n  Memory.isRamBankingEnabled = false;\n  Memory.isMBC1RomModeEnabled = true; // Cartridge Types\n  // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n\n  Memory.isRomOnly = true;\n  Memory.isMBC1 = false;\n  Memory.isMBC2 = false;\n  Memory.isMBC3 = false;\n  Memory.isMBC5 = false; // DMA\n\n  Memory.memoryLocationHdmaSourceHigh = 0xff51;\n  Memory.memoryLocationHdmaSourceLow = 0xff52;\n  Memory.memoryLocationHdmaDestinationHigh = 0xff53;\n  Memory.memoryLocationHdmaDestinationLow = 0xff54;\n  Memory.memoryLocationHdmaTrigger = 0xff55; // Cycles accumulated for DMA\n\n  Memory.DMACycles = 0; // Boolean we will mirror to indicate if Hdma is active\n\n  Memory.isHblankHdmaActive = false;\n  Memory.hblankHdmaTransferLengthRemaining = 0x00; // Store the source and destination for performance, and update as needed\n\n  Memory.hblankHdmaSource = 0x00;\n  Memory.hblankHdmaDestination = 0x00; // GBC Registers\n\n  Memory.memoryLocationGBCVRAMBank = 0xff4f;\n  Memory.memoryLocationGBCWRAMBank = 0xff70; // Save States\n\n  Memory.saveStateSlot = 4;\n  return Memory;\n}();\n\nfunction initializeCartridge() {\n  // Reset stateful variables\n  Memory.isRamBankingEnabled = false;\n  Memory.isMBC1RomModeEnabled = true; // Get our game MBC type from the cartridge header\n  // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n\n  var cartridgeType = eightBitLoadFromGBMemory(0x0147); // Reset our Cartridge types\n\n  Memory.isRomOnly = false;\n  Memory.isMBC1 = false;\n  Memory.isMBC2 = false;\n  Memory.isMBC3 = false;\n  Memory.isMBC5 = false;\n\n  if (cartridgeType === 0x00) {\n    Memory.isRomOnly = true;\n  } else if (cartridgeType >= 0x01 && cartridgeType <= 0x03) {\n    Memory.isMBC1 = true;\n  } else if (cartridgeType >= 0x05 && cartridgeType <= 0x06) {\n    Memory.isMBC2 = true;\n  } else if (cartridgeType >= 0x0f && cartridgeType <= 0x13) {\n    Memory.isMBC3 = true;\n  } else if (cartridgeType >= 0x19 && cartridgeType <= 0x1e) {\n    Memory.isMBC5 = true;\n  }\n\n  Memory.currentRomBank = 0x01;\n  Memory.currentRamBank = 0x00;\n} // WasmBoy memory map:\n// Everything Static as class instances just aren't quite there yet\n// https://github.com/AssemblyScript/assemblyscript/blob/master/tests/compiler/showcase.ts\n\n\nvar Cpu =\n/** @class */\nfunction () {\n  function Cpu() {}\n\n  Cpu.CLOCK_SPEED = function () {\n    if (Cpu.GBCDoubleSpeed) {\n      // 2^23, thanks binji!\n      return 8388608;\n    }\n\n    return 4194304;\n  }; // Cycles Per Frame = Clock Speed / fps\n  // So: 4194304 / 59.73\n\n\n  Cpu.MAX_CYCLES_PER_FRAME = function () {\n    if (Cpu.GBCDoubleSpeed) {\n      return 140448;\n    }\n\n    return 70224;\n  }; // Function to save the state of the class\n\n\n  Cpu.saveState = function () {\n    // Registers\n    store(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot), Cpu.registerA);\n    store(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot), Cpu.registerB);\n    store(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot), Cpu.registerC);\n    store(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot), Cpu.registerD);\n    store(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot), Cpu.registerE);\n    store(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot), Cpu.registerH);\n    store(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot), Cpu.registerL);\n    store(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot), Cpu.registerF);\n    store(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot), Cpu.stackPointer);\n    store(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot), Cpu.programCounter);\n    store(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot), Cpu.currentCycles);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot), Cpu.isHalted);\n    storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot), Cpu.isStopped);\n  }; // Function to load the save state from memory\n\n\n  Cpu.loadState = function () {\n    // Registers\n    Cpu.registerA = load(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot));\n    Cpu.registerB = load(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot));\n    Cpu.registerC = load(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot));\n    Cpu.registerD = load(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot));\n    Cpu.registerE = load(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot));\n    Cpu.registerH = load(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot));\n    Cpu.registerL = load(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot));\n    Cpu.registerF = load(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot));\n    Cpu.stackPointer = load(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot));\n    Cpu.programCounter = load(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot));\n    Cpu.currentCycles = load(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot));\n    Cpu.isHalted = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot));\n    Cpu.isStopped = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot));\n  }; // Status to track if we are in Gameboy Color Mode, and GBC State\n\n\n  Cpu.GBCEnabled = false;\n  Cpu.GBCDoubleSpeed = false; // 8-bit Cpu.registers\n\n  Cpu.registerA = 0;\n  Cpu.registerB = 0;\n  Cpu.registerC = 0;\n  Cpu.registerD = 0;\n  Cpu.registerE = 0;\n  Cpu.registerH = 0;\n  Cpu.registerL = 0;\n  Cpu.registerF = 0; // 16-bit Cpu.registers\n\n  Cpu.stackPointer = 0; // Boot rom from 0x00 to 0x99, all games start at 0x100\n\n  Cpu.programCounter = 0x00; // Current number of cycles, shouldn't execeed max number of cycles\n\n  Cpu.currentCycles = 0; // HALT and STOP instructions need to stop running opcodes, but simply check timers\n  // https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n  // Matt said is should work to, so it must work!\n\n  Cpu.isHalted = false;\n  Cpu.isStopped = false; // Memory Location for the GBC Speed switch\n\n  Cpu.memoryLocationSpeedSwitch = 0xff4d; // Save States\n\n  Cpu.saveStateSlot = 0;\n  return Cpu;\n}();\n\nfunction initializeCpu() {\n  // Reset all stateful Cpu variables\n  // Cpu.GBCEnabled is done by core/initialize\n  Cpu.GBCDoubleSpeed = false;\n  Cpu.registerA = 0;\n  Cpu.registerB = 0;\n  Cpu.registerC = 0;\n  Cpu.registerD = 0;\n  Cpu.registerE = 0;\n  Cpu.registerH = 0;\n  Cpu.registerL = 0;\n  Cpu.registerF = 0;\n  Cpu.stackPointer = 0;\n  Cpu.programCounter = 0x00;\n  Cpu.currentCycles = 0;\n  Cpu.isHalted = false;\n  Cpu.isStopped = false;\n\n  if (Cpu.GBCEnabled) {\n    // CPU Registers\n    Cpu.registerA = 0x11;\n    Cpu.registerF = 0x80;\n    Cpu.registerB = 0x00;\n    Cpu.registerC = 0x00;\n    Cpu.registerD = 0xff;\n    Cpu.registerE = 0x56;\n    Cpu.registerH = 0x00;\n    Cpu.registerL = 0x0d; // Cpu Control Flow\n\n    Cpu.programCounter = 0x100;\n    Cpu.stackPointer = 0xfffe;\n  } else {\n    // Cpu Registers\n    Cpu.registerA = 0x01;\n    Cpu.registerF = 0xb0;\n    Cpu.registerB = 0x00;\n    Cpu.registerC = 0x13;\n    Cpu.registerD = 0x00;\n    Cpu.registerE = 0xd8;\n    Cpu.registerH = 0x01;\n    Cpu.registerL = 0x4d; // Cpu Control Flow\n\n    Cpu.programCounter = 0x100;\n    Cpu.stackPointer = 0xfffe;\n  }\n} // Imports\n// General Logic Instructions\n// Such as the ones found on the CB table and 0x40 - 0xBF\n// NOTE: Only CB table uses these for now, was mostly me realizing that I messed up, trying to be all cute and verbose :p\n// NOTE: TODO: Refactor honestly shouldn't take that long, and may happen once assembly script is improved\n\n\nfunction addARegister(register) {\n  checkAndSetEightBitHalfCarryFlag(Cpu.registerA, register);\n  checkAndSetEightBitCarryFlag(Cpu.registerA, register);\n  Cpu.registerA = u8Portable(Cpu.registerA + register);\n\n  if (Cpu.registerA === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n}\n\nfunction addAThroughCarryRegister(register) {\n  // Handling flags manually as they require some special overflow\n  // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n  // CTRL+F adc\n  var result = u8Portable(Cpu.registerA + register + getCarryFlag$$1());\n\n  if ((u8Portable(Cpu.registerA ^ register ^ result) & 0x10) != 0) {\n    setHalfCarryFlag(1);\n  } else {\n    setHalfCarryFlag(0);\n  }\n\n  var overflowedResult = u16Portable(Cpu.registerA + register + getCarryFlag$$1());\n\n  if ((overflowedResult & 0x100) > 0) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  Cpu.registerA = result;\n\n  if (Cpu.registerA === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n}\n\nfunction subARegister(register) {\n  // Need to convert the register on one line, and flip the sign on another\n  var negativeRegister = register;\n  negativeRegister = negativeRegister * -1;\n  checkAndSetEightBitHalfCarryFlag(Cpu.registerA, negativeRegister);\n  checkAndSetEightBitCarryFlag(Cpu.registerA, negativeRegister);\n  Cpu.registerA = u8Portable(Cpu.registerA - register);\n\n  if (Cpu.registerA === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(1);\n}\n\nfunction subAThroughCarryRegister(register) {\n  // Handling flags manually as they require some special overflow\n  // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n  // CTRL+F adc\n  var result = u8Portable(Cpu.registerA - register - getCarryFlag$$1());\n  var carryRegisterCheck = u8Portable((Cpu.registerA ^ register ^ result) & 0x10);\n\n  if (carryRegisterCheck != 0) {\n    setHalfCarryFlag(1);\n  } else {\n    setHalfCarryFlag(0);\n  }\n\n  var overflowedResult = u16Portable(Cpu.registerA - register - getCarryFlag$$1());\n\n  if ((overflowedResult & 0x100) > 0) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  Cpu.registerA = result;\n\n  if (Cpu.registerA === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(1);\n}\n\nfunction andARegister(register) {\n  Cpu.registerA = Cpu.registerA & register;\n\n  if (Cpu.registerA === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(1);\n  setCarryFlag(0);\n}\n\nfunction xorARegister(register) {\n  Cpu.registerA = u8Portable(Cpu.registerA ^ register);\n\n  if (Cpu.registerA === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n  setCarryFlag(0);\n}\n\nfunction orARegister(register) {\n  Cpu.registerA = Cpu.registerA | register;\n\n  if (Cpu.registerA === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n  setCarryFlag(0);\n}\n\nfunction cpARegister(register) {\n  // 0xB8 - 0xBF\n  // CP B\n  // 1  4\n  // Z 1 H C\n  var negativeRegister = register;\n  negativeRegister = negativeRegister * -1;\n  checkAndSetEightBitHalfCarryFlag(Cpu.registerA, negativeRegister);\n  checkAndSetEightBitCarryFlag(Cpu.registerA, negativeRegister);\n  var tempResult = Cpu.registerA + negativeRegister;\n\n  if (tempResult === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(1);\n}\n\nfunction rotateRegisterLeft(register) {\n  // RLC register 8-bit\n  // Z 0 0 C\n  if ((register & 0x80) === 0x80) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  register = rotateByteLeft(register);\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  } // Set all other flags to zero\n\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0); // Return the register\n\n  return register;\n}\n\nfunction rotateRegisterRight(register) {\n  // RLC register 8-bit\n  // Z 0 0 C\n  // Check for the last bit, to see if it will be carried\n  if ((register & 0x01) > 0) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  register = rotateByteRight(register);\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0); // Return the register\n\n  return register;\n}\n\nfunction rotateRegisterLeftThroughCarry(register) {\n  // RL register 8-bit\n  // Z 0 0 C\n  // setting has first bit since we need to use carry\n  var hasHighbit = false;\n\n  if ((register & 0x80) === 0x80) {\n    hasHighbit = true;\n  }\n\n  register = rotateByteLeftThroughCarry(register);\n\n  if (hasHighbit) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n  return register;\n}\n\nfunction rotateRegisterRightThroughCarry(register) {\n  // RR register 8-bit\n  // Z 0 0 C\n  var hasLowBit = false;\n\n  if ((register & 0x01) === 0x01) {\n    hasLowBit = true;\n  }\n\n  register = rotateByteRightThroughCarry(register);\n\n  if (hasLowBit) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n  return register;\n}\n\nfunction shiftLeftRegister(register) {\n  // SLA register 8-bit\n  // Z 0 0 C\n  var hasHighbit = false;\n\n  if ((register & 0x80) === 0x80) {\n    hasHighbit = true;\n  }\n\n  register = u8Portable(register << 1);\n\n  if (hasHighbit) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n  return register;\n}\n\nfunction shiftRightArithmeticRegister(register) {\n  // SRA register 8-bit\n  // Z 0 0 C\n  // NOTE: This C flag may need to be set to 0;\n  // This preserves the MSB (Most significant bit)\n  var hasHighbit = false;\n\n  if ((register & 0x80) === 0x80) {\n    hasHighbit = true;\n  }\n\n  var hasLowbit = false;\n\n  if ((register & 0x01) === 0x01) {\n    hasLowbit = true;\n  }\n\n  register = u8Portable(register >> 1);\n\n  if (hasHighbit) {\n    register = register | 0x80;\n  }\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n\n  if (hasLowbit) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  return register;\n}\n\nfunction swapNibblesOnRegister(register) {\n  // SWAP register 8-bit\n  // Z 0 0 0\n  var highNibble = register & 0xf0;\n  var lowNibble = register & 0x0f;\n  register = u8Portable(lowNibble << 4 | highNibble >> 4);\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n  setCarryFlag(0);\n  return register;\n}\n\nfunction shiftRightLogicalRegister(register) {\n  // SRA register 8-bit\n  // Z 0 0 C\n  // NOTE: This C flag may need to be set to 0;\n  // This does NOT preserve MSB (most significant bit)\n  var hasLowbit = false;\n\n  if ((register & 0x01) === 0x01) {\n    hasLowbit = true;\n  }\n\n  register = u8Portable(register >> 1);\n\n  if (register === 0) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(0);\n\n  if (hasLowbit) {\n    setCarryFlag(1);\n  } else {\n    setCarryFlag(0);\n  }\n\n  return register;\n}\n\nfunction testBitOnRegister(bitPosition, register) {\n  // BIT bitPosition ,register 8-bit\n  // Z 0 1 -\n  var testByte = 0x01 << bitPosition;\n  var result = register & testByte;\n\n  if (result === 0x00) {\n    setZeroFlag$$1(1);\n  } else {\n    setZeroFlag$$1(0);\n  }\n\n  setSubtractFlag(0);\n  setHalfCarryFlag(1);\n  return register;\n}\n\nfunction setBitOnRegister(bitPosition, bitValue, register) {\n  // RES 0,B or SET 0,B depending on bit value\n  if (bitValue > 0) {\n    var setByte = 0x01 << bitPosition;\n    register = register | setByte;\n  } else {\n    // NOT (byte we want)\n    // 0000 0100 becomes 1111 1011\n    var setByte = ~(0x01 << bitPosition);\n    register = register & setByte;\n  }\n\n  return register;\n} // Private function for our relative jumps\n\n\nfunction relativeJump(value) {\n  // Need to convert the value to i8, since in this case, u8 can be negative\n  var relativeJumpOffset = i8Portable(value);\n  Cpu.programCounter = u16Portable(Cpu.programCounter + relativeJumpOffset); // Realtive jump, using bgb debugger\n  // and my debugger shows,\n  // on JR you need to jump to the relative jump offset,\n  // However, if the jump fails (such as conditional), only jump +2 in total\n\n  Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n} // Imports\n// Handle CB Opcodes\n// NOTE: Program stpes and cycles are standardized depending on the register type\n// NOTE: Doing some funny stuff to get around not having arrays or objects\n\n\nfunction handleCbOpcode(cbOpcode) {\n  var numberOfCycles = -1;\n  var handledOpcode = false; // The result of our cb logic instruction\n\n  var instructionRegisterValue = 0;\n  var instructionRegisterResult = 0; // Get our register number by modulo 0x08 (number of registers)\n  // cbOpcode % 0x08\n\n  var registerNumber = cbOpcode % 0x08; // NOTE: registerNumber = register on CB table. Cpu.registerB = 0, Cpu.registerC = 1....Cpu.registerA = 7\n\n  switch (registerNumber) {\n    case 0:\n      instructionRegisterValue = Cpu.registerB;\n      break;\n\n    case 1:\n      instructionRegisterValue = Cpu.registerC;\n      break;\n\n    case 2:\n      instructionRegisterValue = Cpu.registerD;\n      break;\n\n    case 3:\n      instructionRegisterValue = Cpu.registerE;\n      break;\n\n    case 4:\n      instructionRegisterValue = Cpu.registerH;\n      break;\n\n    case 5:\n      instructionRegisterValue = Cpu.registerL;\n      break;\n\n    case 6:\n      // Value at register HL\n      // 4 cycles\n      instructionRegisterValue = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      break;\n\n    case 7:\n      instructionRegisterValue = Cpu.registerA;\n      break;\n  } // Grab the high nibble to perform skips to speed up performance\n\n\n  var opcodeHighNibble = cbOpcode & 0xf0;\n  opcodeHighNibble = opcodeHighNibble >> 4; // Send to the correct function\n\n  switch (opcodeHighNibble) {\n    case 0x00:\n      if (cbOpcode <= 0x07) {\n        // RLC register 8-bit\n        // Z 0 0 C\n        instructionRegisterResult = rotateRegisterLeft(instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x0f) {\n        // RRC register 8-bit\n        // Z 0 0 C\n        instructionRegisterResult = rotateRegisterRight(instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x01:\n      if (cbOpcode <= 0x17) {\n        // RL register 8-bit\n        // Z 0 0 C\n        instructionRegisterResult = rotateRegisterLeftThroughCarry(instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x1f) {\n        // RR register 8-bit\n        // Z 0 0 C\n        instructionRegisterResult = rotateRegisterRightThroughCarry(instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x02:\n      if (cbOpcode <= 0x27) {\n        // SLA register 8-bit\n        // Z 0 0 C\n        instructionRegisterResult = shiftLeftRegister(instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x2f) {\n        // SRA register 8-bit\n        // Z 0 0 0\n        instructionRegisterResult = shiftRightArithmeticRegister(instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x03:\n      if (cbOpcode <= 0x37) {\n        // SWAP register 8-bit\n        // Z 0 0 0\n        instructionRegisterResult = swapNibblesOnRegister(instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x3f) {\n        // SRL B\n        // Z 0 0 C\n        instructionRegisterResult = shiftRightLogicalRegister(instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x04:\n      if (cbOpcode <= 0x47) {\n        // BIT 0,register 8-bit\n        // Z 0 1 -\n        //TODO: Optimize this not to do logic of setting register back\n        instructionRegisterResult = testBitOnRegister(0, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x4f) {\n        // BIT 1,register 8-bit\n        // Z 0 1 -\n        instructionRegisterResult = testBitOnRegister(1, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x05:\n      if (cbOpcode <= 0x57) {\n        // BIT 2,register 8-bit\n        // Z 0 1 -\n        instructionRegisterResult = testBitOnRegister(2, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x5f) {\n        // BIT 3,register 8-bit\n        // Z 0 1 -\n        instructionRegisterResult = testBitOnRegister(3, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x06:\n      if (cbOpcode <= 0x67) {\n        // BIT 4,register 8-bit\n        // Z 0 1 -\n        instructionRegisterResult = testBitOnRegister(4, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x6f) {\n        // BIT 5,register 8-bit\n        // Z 0 1 -\n        instructionRegisterResult = testBitOnRegister(5, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x07:\n      if (cbOpcode <= 0x77) {\n        // BIT 6,register 8-bit\n        // Z 0 1 -\n        instructionRegisterResult = testBitOnRegister(6, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x7f) {\n        // BIT 7,register 8-bit\n        // Z 0 1 -\n        instructionRegisterResult = testBitOnRegister(7, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x08:\n      if (cbOpcode <= 0x87) {\n        // Res 0,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(0, 0, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x8f) {\n        // Res 1,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(1, 0, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x09:\n      if (cbOpcode <= 0x97) {\n        // Res 2,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(2, 0, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0x9f) {\n        // Res 3,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(3, 0, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x0a:\n      if (cbOpcode <= 0xa7) {\n        // Res 4,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(4, 0, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0xaf) {\n        // Res 5,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(5, 0, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x0b:\n      if (cbOpcode <= 0xb7) {\n        // Res 6,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(6, 0, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0xbf) {\n        // Res 7,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(7, 0, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x0c:\n      if (cbOpcode <= 0xc7) {\n        // SET 0,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(0, 1, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0xcf) {\n        // SET 1,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(1, 1, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x0d:\n      if (cbOpcode <= 0xd7) {\n        // SET 2,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(2, 1, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0xdf) {\n        // SET 3,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(3, 1, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x0e:\n      if (cbOpcode <= 0xe7) {\n        // SET 4,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(4, 1, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0xef) {\n        // SET 5,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(5, 1, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n\n    case 0x0f:\n      if (cbOpcode <= 0xf7) {\n        // SET 6,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(6, 1, instructionRegisterValue);\n        handledOpcode = true;\n      } else if (cbOpcode <= 0xff) {\n        // SET 7,register 8-bit\n        // - - - -\n        instructionRegisterResult = setBitOnRegister(7, 1, instructionRegisterValue);\n        handledOpcode = true;\n      }\n\n      break;\n  } // Finally Pass back into the correct register\n\n\n  switch (registerNumber) {\n    case 0:\n      Cpu.registerB = instructionRegisterResult;\n      break;\n\n    case 1:\n      Cpu.registerC = instructionRegisterResult;\n      break;\n\n    case 2:\n      Cpu.registerD = instructionRegisterResult;\n      break;\n\n    case 3:\n      Cpu.registerE = instructionRegisterResult;\n      break;\n\n    case 4:\n      Cpu.registerH = instructionRegisterResult;\n      break;\n\n    case 5:\n      Cpu.registerL = instructionRegisterResult;\n      break;\n\n    case 6:\n      // Value at register HL\n      // Opcodes 0x40 -> 0x7F only do simple\n      // Bit test, and don't need to be stored back in memory\n      // Thus they take 4 less cycles to run\n      if (opcodeHighNibble < 0x04 || opcodeHighNibble > 0x07) {\n        // Store the result back\n        // 4 cycles\n        eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), instructionRegisterResult);\n      }\n\n      break;\n\n    case 7:\n      Cpu.registerA = instructionRegisterResult;\n      break;\n  } // Finally our number of cycles\n  // Set if we handled the opcode\n\n\n  if (handledOpcode) {\n    numberOfCycles = 4;\n  } // Return our number of cycles\n\n\n  return numberOfCycles;\n} // Imports\n// Take in any opcode, and decode it, and return the number of cycles\n// Program counter can be gotten from getProgramCounter();\n// Setting return value to i32 instead of u16, as we want to return a negative number on error\n// https://rednex.github.io/rgbds/gbz80.7.html\n// http://pastraiser.com/cpu/gameboy/gameboyopcodes.html\n\n\nfunction executeOpcode$$1(opcode) {\n  // Always implement the program counter by one\n  // Any other value can just subtract or add however much offset before reaching this line\n  Cpu.programCounter = u16Portable(Cpu.programCounter + 1); // Split our opcode into a high nibble to speed up performance\n  // Running 255 if statements is slow, even in wasm haha!\n\n  var opcodeHighNibble = opcode & 0xf0;\n  opcodeHighNibble = opcodeHighNibble >> 4; // NOTE: @binji rule of thumb: it takes 4 cpu cycles to read one byte\n  // Therefore isntructions that use more than just the opcode (databyte one and two) will take at least\n  // 8 cyckles to use getDataByteOne(), and two cycles to use the concatented\n  // Not using a switch statement to avoid cannot redeclare this variable errors\n  // And it would be a ton of work :p\n\n  switch (opcodeHighNibble) {\n    case 0x00:\n      return handleOpcode0x(opcode);\n\n    case 0x01:\n      return handleOpcode1x(opcode);\n\n    case 0x02:\n      return handleOpcode2x(opcode);\n\n    case 0x03:\n      return handleOpcode3x(opcode);\n\n    case 0x04:\n      return handleOpcode4x(opcode);\n\n    case 0x05:\n      return handleOpcode5x(opcode);\n\n    case 0x06:\n      return handleOpcode6x(opcode);\n\n    case 0x07:\n      return handleOpcode7x(opcode);\n\n    case 0x08:\n      return handleOpcode8x(opcode);\n\n    case 0x09:\n      return handleOpcode9x(opcode);\n\n    case 0x0a:\n      return handleOpcodeAx(opcode);\n\n    case 0x0b:\n      return handleOpcodeBx(opcode);\n\n    case 0x0c:\n      return handleOpcodeCx(opcode);\n\n    case 0x0d:\n      return handleOpcodeDx(opcode);\n\n    case 0x0e:\n      return handleOpcodeEx(opcode);\n\n    default:\n      return handleOpcodeFx(opcode);\n  }\n} // Wrapper functions around loading and storing memory, and syncing those cycles\n\n\nfunction eightBitLoadSyncCycles(gameboyOffset) {\n  syncCycles(4);\n  return eightBitLoadFromGBMemoryWithTraps(gameboyOffset);\n}\n\nfunction eightBitStoreSyncCycles(gameboyOffset, value) {\n  syncCycles(4);\n  eightBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\n\nfunction sixteenBitLoadSyncCycles(gameboyOffset) {\n  syncCycles(8); // sixteen bit load has traps even though it has no label\n\n  return sixteenBitLoadFromGBMemory(gameboyOffset);\n}\n\nfunction sixteenBitStoreSyncCycles(gameboyOffset, value) {\n  syncCycles(8);\n  sixteenBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n} // Functions to access the next operands of a opcode, reffering to them as \"dataBytes\"\n\n\nfunction getDataByteOne() {\n  syncCycles(4);\n  return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\n\nfunction getDataByteTwo() {\n  syncCycles(4);\n  return eightBitLoadFromGBMemory(u16Portable(Cpu.programCounter + 1));\n} // Get our concatenated databyte one and getDataByteTwo()\n// Find and replace with : getConcatenatedDataByte()\n\n\nfunction getConcatenatedDataByte() {\n  return concatenateBytes(getDataByteTwo(), getDataByteOne());\n}\n\nfunction handleOpcode0x(opcode) {\n  switch (opcode) {\n    case 0x00:\n      // NOP\n      // 1  4\n      // No Operation\n      return 4;\n\n    case 0x01:\n      // LD BC,d16\n      // 3  12\n      // 8 cycles\n      var concatenatedDataByte = getConcatenatedDataByte();\n      Cpu.registerB = splitHighByte(concatenatedDataByte);\n      Cpu.registerC = splitLowByte(concatenatedDataByte);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n      return 4;\n\n    case 0x02:\n      // LD (BC),A\n      // 1  8\n      // () means load into address pointed by BC\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC), Cpu.registerA);\n      return 4;\n\n    case 0x03:\n      // INC BC\n      // 1  8\n      var registerBC3 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n      registerBC3++;\n      Cpu.registerB = splitHighByte(registerBC3);\n      Cpu.registerC = splitLowByte(registerBC3);\n      return 8;\n\n    case 0x04:\n      // INC B\n      // 1  4\n      // Z 0 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerB, 1);\n      Cpu.registerB = u8Portable(Cpu.registerB + 1);\n\n      if (Cpu.registerB === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0);\n      return 4;\n\n    case 0x05:\n      // DEC B\n      // 1  4\n      // Z 1 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerB, -1);\n      Cpu.registerB = u8Portable(Cpu.registerB - 1);\n\n      if (Cpu.registerB === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1);\n      return 4;\n\n    case 0x06:\n      // LD B,d8\n      // 2  8\n      // 4 cycles\n      Cpu.registerB = getDataByteOne();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x07:\n      // RLCA\n      // 1  4\n      // 0 0 0 C\n      // Check for the carry\n      if ((Cpu.registerA & 0x80) === 0x80) {\n        setCarryFlag(1);\n      } else {\n        setCarryFlag(0);\n      }\n\n      Cpu.registerA = rotateByteLeft(Cpu.registerA); // Set all other flags to zero\n\n      setZeroFlag$$1(0);\n      setSubtractFlag(0);\n      setHalfCarryFlag(0);\n      return 4;\n\n    case 0x08:\n      // LD (a16),SP\n      // 3  20\n      // Load the stack pointer into the 16 bit address represented by the two data bytes\n      // 16 cycles, 8 from data byte, 8 from sixteenbit store\n      sixteenBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.stackPointer);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n      return 4;\n\n    case 0x09:\n      // ADD HL,BC\n      // 1 8\n      // - 0 H C\n      var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      var registerBC9 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n      checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerBC9, false);\n      var result = u16Portable(registerHL + registerBC9);\n      Cpu.registerH = splitHighByte(result);\n      Cpu.registerL = splitLowByte(result);\n      setSubtractFlag(0);\n      return 8;\n\n    case 0x0a:\n      // LD A,(BC)\n      // 1 8\n      // 4 cycles from load\n      Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC));\n      return 4;\n\n    case 0x0b:\n      // DEC BC\n      // 1  8\n      var registerBCB = concatenateBytes(Cpu.registerB, Cpu.registerC);\n      registerBCB = u16Portable(registerBCB - 1);\n      Cpu.registerB = splitHighByte(registerBCB);\n      Cpu.registerC = splitLowByte(registerBCB);\n      return 8;\n\n    case 0x0c:\n      // INC C\n      // 1  4\n      // Z 0 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerC, 1);\n      Cpu.registerC = u8Portable(Cpu.registerC + 1);\n\n      if (Cpu.registerC === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0);\n      return 4;\n\n    case 0x0d:\n      // DEC C\n      // 1  4\n      // Z 1 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerC, -1);\n      Cpu.registerC = u8Portable(Cpu.registerC - 1);\n\n      if (Cpu.registerC === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1);\n      return 4;\n\n    case 0x0e:\n      // LD C,d8\n      // 2 8\n      // 4 cycles\n      Cpu.registerC = getDataByteOne();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x0f:\n      // RRCA\n      // 1 4\n      // 0 0 0 C\n      // Check for the last bit, to see if it will be carried\n      if ((Cpu.registerA & 0x01) > 0) {\n        setCarryFlag(1);\n      } else {\n        setCarryFlag(0);\n      }\n\n      Cpu.registerA = rotateByteRight(Cpu.registerA); // Set all other flags to zero\n\n      setZeroFlag$$1(0);\n      setSubtractFlag(0);\n      setHalfCarryFlag(0);\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode1x(opcode) {\n  switch (opcode) {\n    case 0x10:\n      // STOP 0\n      // 2 4\n      // Enter CPU very low power mode. Also used to switch between double and normal speed CPU modes in GBC.\n      // Meaning Don't Decode anymore opcodes , or updated the LCD until joypad interrupt (or when button is pressed if I am wrong)\n      // See HALT\n      // If we are in gameboy color mode, set the new speed\n      if (Cpu.GBCEnabled) {\n        // 4 cycles\n        var speedSwitch = eightBitLoadSyncCycles(Cpu.memoryLocationSpeedSwitch);\n\n        if (checkBitOnByte(0, speedSwitch)) {\n          // Reset the prepare bit\n          speedSwitch = resetBitOnByte(0, speedSwitch); // Switch to the new mode, and set the speed switch to the OTHER speed, to represent our new speed\n\n          if (!checkBitOnByte(7, speedSwitch)) {\n            Cpu.GBCDoubleSpeed = true;\n            speedSwitch = setBitOnByte(7, speedSwitch);\n          } else {\n            Cpu.GBCDoubleSpeed = false;\n            speedSwitch = resetBitOnByte(7, speedSwitch);\n          } // Store the final speed switch\n          // 4 cycles\n\n\n          eightBitStoreSyncCycles(Cpu.memoryLocationSpeedSwitch, speedSwitch); // Cycle accurate gameboy docs says this takes 76 clocks\n          // 76 - 8 cycles (from load/store) = 68\n\n          return 68;\n        }\n      } // NOTE: This breaks Blarggs CPU testsif CGB Stop is not implemented\n\n\n      Cpu.isStopped = true;\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x11:\n      // LD DE,d16\n      // 3  12\n      // 8 cycles\n      var concatenatedDataByte = getConcatenatedDataByte();\n      Cpu.registerD = splitHighByte(concatenatedDataByte);\n      Cpu.registerE = splitLowByte(concatenatedDataByte);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n      return 4;\n\n    case 0x12:\n      // LD (DE),A\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerD, Cpu.registerE), Cpu.registerA);\n      return 4;\n\n    case 0x13:\n      // INC DE\n      // 1 8\n      var registerDE3 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n      registerDE3 = u16Portable(registerDE3 + 1);\n      Cpu.registerD = splitHighByte(registerDE3);\n      Cpu.registerE = splitLowByte(registerDE3);\n      return 8;\n\n    case 0x14:\n      // INC D\n      // 1  4\n      // Z 0 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerD, 1);\n      Cpu.registerD = u8Portable(Cpu.registerD + 1);\n\n      if (Cpu.registerD === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0);\n      return 4;\n\n    case 0x15:\n      // DEC D\n      // 1  4\n      // Z 1 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerD, -1);\n      Cpu.registerD = u8Portable(Cpu.registerD - 1);\n\n      if (Cpu.registerD === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1);\n      return 4;\n\n    case 0x16:\n      // LD D,d8\n      // 2 8\n      // 4 cycles\n      Cpu.registerD = getDataByteOne();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x17:\n      // RLA\n      // 1 4\n      // 0 0 0 C\n      // Check for the carry\n      // setting has first bit since we need to use carry\n      var hasHighbit = false;\n\n      if ((Cpu.registerA & 0x80) === 0x80) {\n        hasHighbit = true;\n      }\n\n      Cpu.registerA = rotateByteLeftThroughCarry(Cpu.registerA); // OR the carry flag to the end\n\n      if (hasHighbit) {\n        setCarryFlag(1);\n      } else {\n        setCarryFlag(0);\n      } // Set all other flags to zero\n\n\n      setZeroFlag$$1(0);\n      setSubtractFlag(0);\n      setHalfCarryFlag(0);\n      return 4;\n\n    case 0x18:\n      // JR r8\n      // 2  12\n      // NOTE: Discoved dataByte is signed\n      // However the relative Jump Function handles this\n      // 4 cycles\n      relativeJump(getDataByteOne());\n      return 8;\n    // Relative Jump Function Handles program counter\n\n    case 0x19:\n      // ADD HL,DE\n      // 1  8\n      // - 0 H C\n      var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      var registerDE9 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n      checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerDE9, false);\n      var result = u16Portable(registerHL + registerDE9);\n      Cpu.registerH = splitHighByte(result);\n      Cpu.registerL = splitLowByte(result);\n      setSubtractFlag(0);\n      return 8;\n\n    case 0x1a:\n      // LD A,(DE)\n      // 1 8\n      var registerDEA = concatenateBytes(Cpu.registerD, Cpu.registerE); // 4 cycles\n\n      Cpu.registerA = eightBitLoadSyncCycles(registerDEA);\n      return 4;\n\n    case 0x1b:\n      // DEC DE\n      // 1 8\n      var registerDEB = concatenateBytes(Cpu.registerD, Cpu.registerE);\n      registerDEB = u16Portable(registerDEB - 1);\n      Cpu.registerD = splitHighByte(registerDEB);\n      Cpu.registerE = splitLowByte(registerDEB);\n      return 8;\n\n    case 0x1c:\n      // INC E\n      // 1  4\n      // Z 0 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerE, 1);\n      Cpu.registerE = u8Portable(Cpu.registerE + 1);\n\n      if (Cpu.registerE === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0);\n      return 4;\n\n    case 0x1d:\n      // DEC E\n      // 1  4\n      // Z 1 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerE, -1);\n      Cpu.registerE = u8Portable(Cpu.registerE - 1);\n\n      if (Cpu.registerE === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1);\n      return 4;\n\n    case 0x1e:\n      // LD E,d8\n      // 2 8\n      // 4 cycles\n      Cpu.registerE = getDataByteOne();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x1f:\n      // RRA\n      // 1 4\n      // 0 0 0 C\n      // Check for the carry\n      // setting has low bit since we need to use carry\n      var hasLowBit = false;\n\n      if ((Cpu.registerA & 0x01) === 0x01) {\n        hasLowBit = true;\n      }\n\n      Cpu.registerA = rotateByteRightThroughCarry(Cpu.registerA);\n\n      if (hasLowBit) {\n        setCarryFlag(1);\n      } else {\n        setCarryFlag(0);\n      } // Set all other flags to zero\n\n\n      setZeroFlag$$1(0);\n      setSubtractFlag(0);\n      setHalfCarryFlag(0);\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode2x(opcode) {\n  switch (opcode) {\n    case 0x20:\n      // JR NZ,r8\n      // 2  12/8\n      // NOTE: NZ stands for not [flag], so in this case, not zero flag\n      // Also, / means, if condition. so if met, 12 cycles, otherwise 8 cycles\n      if (getZeroFlag$$1() === 0) {\n        // 4 cycles\n        relativeJump(getDataByteOne()); // Relative Jump Funciton handles program counter\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      }\n\n      return 8;\n\n    case 0x21:\n      // LD HL,d16\n      // 3  12\n      // 8 cycles\n      var sixteenBitDataByte = getConcatenatedDataByte();\n      Cpu.registerH = splitHighByte(sixteenBitDataByte);\n      Cpu.registerL = splitLowByte(sixteenBitDataByte);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n      return 4;\n\n    case 0x22:\n      // LD (HL+),A\n      // 1 8\n      var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL); // 4 cycles\n\n      eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n      registerHL2 = u16Portable(registerHL2 + 1);\n      Cpu.registerH = splitHighByte(registerHL2);\n      Cpu.registerL = splitLowByte(registerHL2);\n      return 4;\n\n    case 0x23:\n      // INC HL\n      // 1  8\n      var registerHL3 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      registerHL3 = u16Portable(registerHL3 + 1);\n      Cpu.registerH = splitHighByte(registerHL3);\n      Cpu.registerL = splitLowByte(registerHL3);\n      return 8;\n\n    case 0x24:\n      // INC H\n      // 1  4\n      // Z 0 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerH, 1);\n      Cpu.registerH = u8Portable(Cpu.registerH + 1);\n\n      if (Cpu.registerH === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0);\n      return 4;\n\n    case 0x25:\n      // DEC H\n      // 1  4\n      // Z 1 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerH, -1);\n      Cpu.registerH = u8Portable(Cpu.registerH - 1);\n\n      if (Cpu.registerH === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1);\n      return 4;\n\n    case 0x26:\n      // LD H,d8\n      // 2 8\n      // 4 cycles\n      Cpu.registerH = getDataByteOne();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x27:\n      // DAA\n      // 1 4\n      // Z - 0 C\n      var adjustedRegister = 0;\n      var adjustment = 0;\n\n      if (getHalfCarryFlag() > 0) {\n        adjustment = adjustment | 0x06;\n      }\n\n      if (getCarryFlag$$1() > 0) {\n        adjustment = adjustment | 0x60;\n      }\n\n      if (getSubtractFlag() > 0) {\n        adjustedRegister = u8Portable(Cpu.registerA - adjustment);\n      } else {\n        if ((Cpu.registerA & 0x0f) > 0x09) {\n          adjustment = adjustment | 0x06;\n        }\n\n        if (Cpu.registerA > 0x99) {\n          adjustment = adjustment | 0x60;\n        }\n\n        adjustedRegister = u8Portable(Cpu.registerA + adjustment);\n      } // Now set our flags to the correct values\n\n\n      if (adjustedRegister === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      if ((adjustment & 0x60) !== 0) {\n        setCarryFlag(1);\n      } else {\n        setCarryFlag(0);\n      }\n\n      setHalfCarryFlag(0);\n      Cpu.registerA = adjustedRegister;\n      return 4;\n\n    case 0x28:\n      // JR Z,r8\n      // 2  12/8\n      if (getZeroFlag$$1() > 0) {\n        // 4 cycles\n        relativeJump(getDataByteOne()); // Relative Jump funciton handles pogram counter\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      }\n\n      return 8;\n\n    case 0x29:\n      // ADD HL,HL\n      // 1  8\n      // - 0 H C\n      var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      checkAndSetSixteenBitFlagsAddOverflow(registerHL9, registerHL9, false);\n      registerHL9 = u16Portable(registerHL9 * 2);\n      Cpu.registerH = splitHighByte(registerHL9);\n      Cpu.registerL = splitLowByte(registerHL9);\n      setSubtractFlag(0);\n      return 8;\n\n    case 0x2a:\n      // LD A,(HL+)\n      // 1  8\n      var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL); // 4 cycles\n\n      Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n      registerHLA = u16Portable(registerHLA + 1);\n      Cpu.registerH = splitHighByte(registerHLA);\n      Cpu.registerL = splitLowByte(registerHLA);\n      return 4;\n\n    case 0x2b:\n      // DEC HL\n      // 1 8\n      var registerHLB = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      registerHLB = u16Portable(registerHLB - 1);\n      Cpu.registerH = splitHighByte(registerHLB);\n      Cpu.registerL = splitLowByte(registerHLB);\n      return 8;\n\n    case 0x2c:\n      // INC L\n      // 1  4\n      // Z 0 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerL, 1);\n      Cpu.registerL = u8Portable(Cpu.registerL + 1);\n\n      if (Cpu.registerL === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0);\n      return 4;\n\n    case 0x2d:\n      // DEC L\n      // 1  4\n      // Z 1 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerL, -1);\n      Cpu.registerL = u8Portable(Cpu.registerL - 1);\n\n      if (Cpu.registerL === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1);\n      return 4;\n\n    case 0x2e:\n      // LD L,d8\n      // 2  8\n      // 4 cycles\n      Cpu.registerL = getDataByteOne();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x2f:\n      // CPL\n      // 1 4\n      // - 1 1 -\n      Cpu.registerA = ~Cpu.registerA;\n      setSubtractFlag(1);\n      setHalfCarryFlag(1);\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode3x(opcode) {\n  switch (opcode) {\n    case 0x30:\n      // JR NC,r8\n      // 2 12 / 8\n      if (getCarryFlag$$1() === 0) {\n        // 4 cycles\n        relativeJump(getDataByteOne()); // Relative Jump function handles program counter\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      }\n\n      return 8;\n\n    case 0x31:\n      // LD SP,d16\n      // 3 12\n      // 8 cycles\n      Cpu.stackPointer = getConcatenatedDataByte();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n      return 4;\n\n    case 0x32:\n      // LD (HL-),A\n      // 1 8\n      var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL); // 4 cycles\n\n      eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n      registerHL2 = u16Portable(registerHL2 - 1);\n      Cpu.registerH = splitHighByte(registerHL2);\n      Cpu.registerL = splitLowByte(registerHL2);\n      return 4;\n\n    case 0x33:\n      // INC SP\n      // 1 8\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + 1);\n      return 8;\n\n    case 0x34:\n      // INC (HL)\n      // 1  12\n      // Z 0 H -\n      var registerHL4 = concatenateBytes(Cpu.registerH, Cpu.registerL); // 4 cycles\n\n      var valueAtHL4 = eightBitLoadSyncCycles(registerHL4); // Creating a varible for this to fix assemblyscript overflow bug\n      // Requires explicit casting\n      // https://github.com/AssemblyScript/assemblyscript/issues/26\n\n      var incrementer = 1;\n      checkAndSetEightBitHalfCarryFlag(valueAtHL4, incrementer);\n      valueAtHL4 = u8Portable(valueAtHL4 + incrementer);\n\n      if (valueAtHL4 === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0); // 4 cycles\n\n      eightBitStoreSyncCycles(registerHL4, valueAtHL4);\n      return 4;\n\n    case 0x35:\n      // DEC (HL)\n      // 1  12\n      // Z 1 H -\n      var registerHL5 = concatenateBytes(Cpu.registerH, Cpu.registerL); // 4 cycles\n\n      var valueAtHL5 = eightBitLoadSyncCycles(registerHL5); // NOTE: This opcode may not overflow correctly,\n      // Please see previous opcode\n\n      checkAndSetEightBitHalfCarryFlag(valueAtHL5, -1);\n      valueAtHL5 = u8Portable(valueAtHL5 - 1);\n\n      if (valueAtHL5 === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1); // 4 cycles\n\n      eightBitStoreSyncCycles(registerHL5, valueAtHL5);\n      return 4;\n\n    case 0x36:\n      // LD (HL),d8\n      // 2  12\n      // 8 cycles, 4 from store, 4 from data byte\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x37:\n      // SCF\n      // 1  4\n      // - 0 0 1\n      // Simply set the carry flag\n      setSubtractFlag(0);\n      setHalfCarryFlag(0);\n      setCarryFlag(1);\n      return 4;\n\n    case 0x38:\n      // JR C,r8\n      // 2 12/8\n      if (getCarryFlag$$1() === 1) {\n        // 4 cycles\n        relativeJump(getDataByteOne()); // Relative Jump Funciton handles program counter\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      }\n\n      return 8;\n\n    case 0x39:\n      // ADD HL,SP\n      // 1 8\n      // - 0 H C\n      var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      checkAndSetSixteenBitFlagsAddOverflow(registerHL9, Cpu.stackPointer, false);\n      var result = u16Portable(registerHL9 + Cpu.stackPointer);\n      Cpu.registerH = splitHighByte(result);\n      Cpu.registerL = splitLowByte(result);\n      setSubtractFlag(0);\n      return 8;\n\n    case 0x3a:\n      // LD A,(HL-)\n      // 1 8\n      var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL); // 4 cycles\n\n      Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n      registerHLA = u16Portable(registerHLA - 1);\n      Cpu.registerH = splitHighByte(registerHLA);\n      Cpu.registerL = splitLowByte(registerHLA);\n      return 4;\n\n    case 0x3b:\n      // DEC SP\n      // 1 8\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 1);\n      return 8;\n\n    case 0x3c:\n      // INC A\n      // 1  4\n      // Z 0 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerA, 1);\n      Cpu.registerA = u8Portable(Cpu.registerA + 1);\n\n      if (Cpu.registerA === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(0);\n      return 4;\n\n    case 0x3d:\n      // DEC A\n      // 1  4\n      // Z 1 H -\n      checkAndSetEightBitHalfCarryFlag(Cpu.registerA, -1);\n      Cpu.registerA = u8Portable(Cpu.registerA - 1);\n\n      if (Cpu.registerA === 0) {\n        setZeroFlag$$1(1);\n      } else {\n        setZeroFlag$$1(0);\n      }\n\n      setSubtractFlag(1);\n      return 4;\n\n    case 0x3e:\n      // LD A,d8\n      // 2 8\n      // 4 cycles\n      Cpu.registerA = getDataByteOne();\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0x3f:\n      // CCF\n      // 1 4\n      // - 0 0 C\n      setSubtractFlag(0);\n      setHalfCarryFlag(0);\n\n      if (getCarryFlag$$1() > 0) {\n        setCarryFlag(0);\n      } else {\n        setCarryFlag(1);\n      }\n\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode4x(opcode) {\n  switch (opcode) {\n    case 0x40:\n      // LD B,B\n      // 1 4\n      // Load B into B, Do nothing\n      return 4;\n\n    case 0x41:\n      // LD B,C\n      // 1 4\n      Cpu.registerB = Cpu.registerC;\n      return 4;\n\n    case 0x42:\n      // LD B,D\n      // 1 4\n      Cpu.registerB = Cpu.registerD;\n      return 4;\n\n    case 0x43:\n      // LD B,E\n      // 1 4\n      Cpu.registerB = Cpu.registerE;\n      return 4;\n\n    case 0x44:\n      // LD B,H\n      // 1 4\n      Cpu.registerB = Cpu.registerH;\n      return 4;\n\n    case 0x45:\n      // LD B,L\n      // 1 4\n      Cpu.registerB = Cpu.registerL;\n      return 4;\n\n    case 0x46:\n      // LD B,(HL)\n      // 1 8\n      // 4 cycles\n      Cpu.registerB = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 4;\n\n    case 0x47:\n      // LD B,A\n      // 1 4\n      Cpu.registerB = Cpu.registerA;\n      return 4;\n\n    case 0x48:\n      // LD C,B\n      // 1 4\n      Cpu.registerC = Cpu.registerB;\n      return 4;\n\n    case 0x49:\n      // LD C,C\n      // 1 4\n      // Do nothing\n      return 4;\n\n    case 0x4a:\n      // LD C,D\n      // 1 4\n      Cpu.registerC = Cpu.registerD;\n      return 4;\n\n    case 0x4b:\n      // LD C,E\n      // 1 4\n      Cpu.registerC = Cpu.registerE;\n      return 4;\n\n    case 0x4c:\n      // LD C,H\n      // 1 4\n      Cpu.registerC = Cpu.registerH;\n      return 4;\n\n    case 0x4d:\n      // LD C,L\n      // 1 4\n      Cpu.registerC = Cpu.registerL;\n      return 4;\n\n    case 0x4e:\n      // LD C,(HL)\n      // 1 8\n      // 4 cycles\n      Cpu.registerC = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 4;\n\n    case 0x4f:\n      // LD C,A\n      // 1 4\n      Cpu.registerC = Cpu.registerA;\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode5x(opcode) {\n  switch (opcode) {\n    case 0x50:\n      // LD D,B\n      // 1 4\n      Cpu.registerD = Cpu.registerB;\n      return 4;\n\n    case 0x51:\n      // LD D,C\n      // 1 4\n      Cpu.registerD = Cpu.registerC;\n      return 4;\n\n    case 0x52:\n      // LD D,D\n      // 1 4\n      // Do Nothing\n      return 4;\n\n    case 0x53:\n      // LD D,E\n      // 1 4\n      Cpu.registerD = Cpu.registerE;\n      return 4;\n\n    case 0x54:\n      // LD D,H\n      // 1 4\n      Cpu.registerD = Cpu.registerH;\n      return 4;\n\n    case 0x55:\n      // LD D,L\n      // 1 4\n      Cpu.registerD = Cpu.registerL;\n      return 4;\n\n    case 0x56:\n      // LD D,(HL)\n      // 1 8\n      // 4 cycles\n      Cpu.registerD = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 4;\n\n    case 0x57:\n      // LD D,A\n      // 1 4\n      Cpu.registerD = Cpu.registerA;\n      return 4;\n\n    case 0x58:\n      // LD E,B\n      // 1 4\n      Cpu.registerE = Cpu.registerB;\n      return 4;\n\n    case 0x59:\n      // LD E,C\n      // 1 4\n      Cpu.registerE = Cpu.registerC;\n      return 4;\n\n    case 0x5a:\n      // LD E,D\n      // 1 4\n      Cpu.registerE = Cpu.registerD;\n      return 4;\n\n    case 0x5b:\n      // LD E,E\n      // 1 4\n      // Do Nothing\n      return 4;\n\n    case 0x5c:\n      // LD E,H\n      // 1 4\n      Cpu.registerE = Cpu.registerH;\n      return 4;\n\n    case 0x5d:\n      // LD E,L\n      // 1 4\n      Cpu.registerE = Cpu.registerL;\n      return 4;\n\n    case 0x5e:\n      // LD E,(HL)\n      // 1 8\n      // 4 cycles\n      Cpu.registerE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 4;\n\n    case 0x5f:\n      // LD E,A\n      // 1 4\n      Cpu.registerE = Cpu.registerA;\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode6x(opcode) {\n  switch (opcode) {\n    case 0x60:\n      // LD H,B\n      // 1 4\n      Cpu.registerH = Cpu.registerB;\n      return 4;\n\n    case 0x61:\n      // LD H,C\n      // 1 4\n      Cpu.registerH = Cpu.registerC;\n      return 4;\n\n    case 0x62:\n      // LD H,D\n      // 1 4\n      Cpu.registerH = Cpu.registerD;\n      return 4;\n\n    case 0x63:\n      // LD H,E\n      // 1 4\n      Cpu.registerH = Cpu.registerE;\n      return 4;\n\n    case 0x64:\n      // LD H,H\n      // 1 4\n      Cpu.registerH = Cpu.registerH;\n      return 4;\n\n    case 0x65:\n      // LD H,L\n      // 1 4\n      Cpu.registerH = Cpu.registerL;\n      return 4;\n\n    case 0x66:\n      // LD H,(HL)\n      // 1 8\n      // 4 cycles\n      Cpu.registerH = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 4;\n\n    case 0x67:\n      // LD H,A\n      // 1 4\n      Cpu.registerH = Cpu.registerA;\n      return 4;\n\n    case 0x68:\n      // LD L,B\n      // 1 4\n      Cpu.registerL = Cpu.registerB;\n      return 4;\n\n    case 0x69:\n      // LD L,C\n      // 1 4\n      Cpu.registerL = Cpu.registerC;\n      return 4;\n\n    case 0x6a:\n      // LD L,D\n      // 1 4\n      Cpu.registerL = Cpu.registerD;\n      return 4;\n\n    case 0x6b:\n      // LD L,E\n      // 1 4\n      Cpu.registerL = Cpu.registerE;\n      return 4;\n\n    case 0x6c:\n      // LD L,H\n      // 1 4\n      Cpu.registerL = Cpu.registerH;\n      return 4;\n\n    case 0x6d:\n      // LD L,L\n      // 1 4\n      Cpu.registerL = Cpu.registerL;\n      return 4;\n\n    case 0x6e:\n      // LD L,(HL)\n      // 1 8\n      // 4 cycles\n      Cpu.registerL = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 4;\n\n    case 0x6f:\n      // LD L,A\n      // 1 4\n      Cpu.registerL = Cpu.registerA;\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode7x(opcode) {\n  switch (opcode) {\n    case 0x70:\n      // LD (HL),B\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerB);\n      return 4;\n\n    case 0x71:\n      // LD (HL),C\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerC);\n      return 4;\n\n    case 0x72:\n      // LD (HL),D\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerD);\n      return 4;\n\n    case 0x73:\n      // LD (HL),E\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerE);\n      return 4;\n\n    case 0x74:\n      // LD (HL),H\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerH);\n      return 4;\n\n    case 0x75:\n      // LD (HL),L\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerL);\n      return 4;\n\n    case 0x76:\n      // HALT\n      // 1 4\n      // Enter CPU very low power mode\n      // Meaning Don't Decode anymore opcodes until an interrupt occurs\n      // Still need to do timers and things\n      // Can't Halt during an HDMA\n      // https://gist.github.com/drhelius/3394856\n      if (!Memory.isHblankHdmaActive) {\n        Cpu.isHalted = true;\n      }\n\n      return 4;\n\n    case 0x77:\n      // LD (HL),A\n      // 1 8\n      // 4 cycles\n      eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerA);\n      return 4;\n\n    case 0x78:\n      // LD A,B\n      // 1 4\n      Cpu.registerA = Cpu.registerB;\n      return 4;\n\n    case 0x79:\n      // LD A,C\n      // 1 4\n      Cpu.registerA = Cpu.registerC;\n      return 4;\n\n    case 0x7a:\n      // LD A,D\n      // 1 4\n      Cpu.registerA = Cpu.registerD;\n      return 4;\n\n    case 0x7b:\n      // LD A,E\n      // 1 4\n      Cpu.registerA = Cpu.registerE;\n      return 4;\n\n    case 0x7c:\n      // LD A,H\n      // 1 4\n      Cpu.registerA = Cpu.registerH;\n      return 4;\n\n    case 0x7d:\n      // LD A,L\n      // 1 4\n      Cpu.registerA = Cpu.registerL;\n      return 4;\n\n    case 0x7e:\n      // LD A,(HL)\n      // 1 8\n      // NOTE: Thanks to @binji for catching that this should be 8 cycles, not 4\n      // 4 cycles\n      Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 4;\n\n    case 0x7f:\n      // LD A,A\n      // 1 4\n      // Do Nothing\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode8x(opcode) {\n  switch (opcode) {\n    case 0x80:\n      // ADD A,B\n      // 1 4\n      // Z 0 H C\n      addARegister(Cpu.registerB);\n      return 4;\n\n    case 0x81:\n      // ADD A,C\n      // 1 4\n      // Z 0 H C\n      addARegister(Cpu.registerC);\n      return 4;\n\n    case 0x82:\n      // ADD A,D\n      // 1 4\n      // Z 0 H C\n      addARegister(Cpu.registerD);\n      return 4;\n\n    case 0x83:\n      // ADD A,E\n      // 1 4\n      // Z 0 H C\n      addARegister(Cpu.registerE);\n      return 4;\n\n    case 0x84:\n      // ADD A,H\n      // 1 4\n      // Z 0 H C\n      addARegister(Cpu.registerH);\n      return 4;\n\n    case 0x85:\n      // ADD A,L\n      // 1 4\n      // Z 0 H C\n      addARegister(Cpu.registerL);\n      return 4;\n\n    case 0x86:\n      // ADD A,(HL)\n      // 1 8\n      // Z 0 H C\n      // 4 cycles\n      var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      addARegister(valueAtHL6);\n      return 4;\n\n    case 0x87:\n      // ADD A,A\n      // 1 4\n      // Z 0 H C\n      addARegister(Cpu.registerA);\n      return 4;\n\n    case 0x88:\n      // ADC A,B\n      // 1 4\n      // Z 0 H C\n      addAThroughCarryRegister(Cpu.registerB);\n      return 4;\n\n    case 0x89:\n      // ADC A,C\n      // 1 4\n      // Z 0 H C\n      addAThroughCarryRegister(Cpu.registerC);\n      return 4;\n\n    case 0x8a:\n      // ADC A,D\n      // 1 4\n      // Z 0 H C\n      addAThroughCarryRegister(Cpu.registerD);\n      return 4;\n\n    case 0x8b:\n      // ADC A,E\n      // 1 4\n      // Z 0 H C\n      addAThroughCarryRegister(Cpu.registerE);\n      return 4;\n\n    case 0x8c:\n      // ADC A,H\n      // 1 4\n      // Z 0 H C\n      addAThroughCarryRegister(Cpu.registerH);\n      return 4;\n\n    case 0x8d:\n      // ADC A,L\n      // 1 4\n      // Z 0 H C\n      addAThroughCarryRegister(Cpu.registerL);\n      return 4;\n\n    case 0x8e:\n      // ADC A,(HL)\n      // 1 8\n      // Z 0 H C\n      // 4 cycles\n      var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      addAThroughCarryRegister(valueAtHLE);\n      return 4;\n\n    case 0x8f:\n      // ADC A,A\n      // 1 4\n      // Z 0 H C\n      addAThroughCarryRegister(Cpu.registerA);\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcode9x(opcode) {\n  switch (opcode) {\n    case 0x90:\n      // SUB B\n      // 1  4\n      // Z 1 H C\n      subARegister(Cpu.registerB);\n      return 4;\n\n    case 0x91:\n      // SUB C\n      // 1  4\n      // Z 1 H C\n      subARegister(Cpu.registerC);\n      return 4;\n\n    case 0x92:\n      // SUB D\n      // 1  4\n      // Z 1 H C\n      subARegister(Cpu.registerD);\n      return 4;\n\n    case 0x93:\n      // SUB E\n      // 1  4\n      // Z 1 H C\n      subARegister(Cpu.registerE);\n      return 4;\n\n    case 0x94:\n      // SUB H\n      // 1  4\n      // Z 1 H C\n      subARegister(Cpu.registerH);\n      return 4;\n\n    case 0x95:\n      // SUB L\n      // 1  4\n      // Z 1 H C\n      subARegister(Cpu.registerL);\n      return 4;\n\n    case 0x96:\n      // SUB (HL)\n      // 1  8\n      // Z 1 H C\n      // 4 cycles\n      var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      subARegister(valueAtHL6);\n      return 4;\n\n    case 0x97:\n      // SUB A\n      // 1  4\n      // Z 1 H C\n      subARegister(Cpu.registerA);\n      return 4;\n\n    case 0x98:\n      // SBC A,B\n      // 1  4\n      // Z 1 H C\n      subAThroughCarryRegister(Cpu.registerB);\n      return 4;\n\n    case 0x99:\n      // SBC A,C\n      // 1  4\n      // Z 1 H C\n      subAThroughCarryRegister(Cpu.registerC);\n      return 4;\n\n    case 0x9a:\n      // SBC A,D\n      // 1  4\n      // Z 1 H C\n      subAThroughCarryRegister(Cpu.registerD);\n      return 4;\n\n    case 0x9b:\n      // SBC A,E\n      // 1  4\n      // Z 1 H C\n      subAThroughCarryRegister(Cpu.registerE);\n      return 4;\n\n    case 0x9c:\n      // SBC A,H\n      // 1  4\n      // Z 1 H C\n      subAThroughCarryRegister(Cpu.registerH);\n      return 4;\n\n    case 0x9d:\n      // SBC A,L\n      // 1  4\n      // Z 1 H C\n      subAThroughCarryRegister(Cpu.registerL);\n      return 4;\n\n    case 0x9e:\n      // SBC A,(HL)\n      // 1  8\n      // Z 1 H C\n      // 4 cycles\n      var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      subAThroughCarryRegister(valueAtHLE);\n      return 4;\n\n    case 0x9f:\n      // SBC A,A\n      // 1  4\n      // Z 1 H C\n      subAThroughCarryRegister(Cpu.registerA);\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcodeAx(opcode) {\n  switch (opcode) {\n    case 0xa0:\n      // AND B\n      // 1  4\n      // Z 0 1 0\n      andARegister(Cpu.registerB);\n      return 4;\n\n    case 0xa1:\n      // AND C\n      // 1  4\n      // Z 0 1 0\n      andARegister(Cpu.registerC);\n      return 4;\n\n    case 0xa2:\n      // AND D\n      // 1  4\n      // Z 0 1 0\n      andARegister(Cpu.registerD);\n      return 4;\n\n    case 0xa3:\n      // AND E\n      // 1  4\n      // Z 0 1 0\n      andARegister(Cpu.registerE);\n      return 4;\n\n    case 0xa4:\n      // AND H\n      // 1  4\n      // Z 0 1 0\n      andARegister(Cpu.registerH);\n      return 4;\n\n    case 0xa5:\n      // AND L\n      // 1  4\n      // Z 0 1 0\n      andARegister(Cpu.registerL);\n      return 4;\n\n    case 0xa6:\n      // AND (HL)\n      // 1  8\n      // Z 0 1 0\n      // 4 cycles\n      var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      andARegister(valueAtHL6);\n      return 4;\n\n    case 0xa7:\n      // AND A\n      // 1  4\n      // Z 0 1 0\n      // NOTE: & Yourself, does nothing\n      andARegister(Cpu.registerA);\n      return 4;\n\n    case 0xa8:\n      // XOR B\n      // 1  4\n      // Z 0 0 0\n      xorARegister(Cpu.registerB);\n      return 4;\n\n    case 0xa9:\n      // XOR C\n      // 1  4\n      // Z 0 0 0\n      xorARegister(Cpu.registerC);\n      return 4;\n\n    case 0xaa:\n      // XOR D\n      // 1  4\n      // Z 0 0 0\n      xorARegister(Cpu.registerD);\n      return 4;\n\n    case 0xab:\n      // XOR E\n      // 1  4\n      // Z 0 0 0\n      xorARegister(Cpu.registerE);\n      return 4;\n\n    case 0xac:\n      // XOR H\n      // 1  4\n      // Z 0 0 0\n      xorARegister(Cpu.registerH);\n      return 4;\n\n    case 0xad:\n      // XOR L\n      // 1  4\n      // Z 0 0 0\n      xorARegister(Cpu.registerL);\n      return 4;\n\n    case 0xae:\n      // XOR (HL)\n      // 1  8\n      // Z 0 0 0\n      // 4 cycles\n      var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      xorARegister(valueAtHLE);\n      return 4;\n\n    case 0xaf:\n      // XOR A\n      // 1  4\n      // Z 0 0 0\n      xorARegister(Cpu.registerA);\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcodeBx(opcode) {\n  switch (opcode) {\n    case 0xb0:\n      // OR B\n      // 1  4\n      // Z 0 0 0\n      orARegister(Cpu.registerB);\n      return 4;\n\n    case 0xb1:\n      // OR C\n      // 1  4\n      // Z 0 0 0\n      orARegister(Cpu.registerC);\n      return 4;\n\n    case 0xb2:\n      // OR D\n      // 1  4\n      // Z 0 0 0\n      orARegister(Cpu.registerD);\n      return 4;\n\n    case 0xb3:\n      // OR E\n      // 1  4\n      // Z 0 0 0\n      orARegister(Cpu.registerE);\n      return 4;\n\n    case 0xb4:\n      // OR H\n      // 1  4\n      // Z 0 0 0\n      orARegister(Cpu.registerH);\n      return 4;\n\n    case 0xb5:\n      // OR L\n      // 1  4\n      // Z 0 0 0\n      orARegister(Cpu.registerL);\n      return 4;\n\n    case 0xb6:\n      // OR (HL)\n      // 1  8\n      // Z 0 0 0\n      // 4 cycles\n      var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      orARegister(valueAtHL6);\n      return 4;\n\n    case 0xb7:\n      // OR A\n      // 1  4\n      // Z 0 0 0\n      orARegister(Cpu.registerA);\n      return 4;\n\n    case 0xb8:\n      // CP B\n      // 1  4\n      // Z 1 H C\n      cpARegister(Cpu.registerB);\n      return 4;\n\n    case 0xb9:\n      // CP C\n      // 1  4\n      // Z 1 H C\n      cpARegister(Cpu.registerC);\n      return 4;\n\n    case 0xba:\n      // CP D\n      // 1  4\n      // Z 1 H C\n      cpARegister(Cpu.registerD);\n      return 4;\n\n    case 0xbb:\n      // CP E\n      // 1  4\n      // Z 1 H C\n      cpARegister(Cpu.registerE);\n      return 4;\n\n    case 0xbc:\n      // CP H\n      // 1  4\n      // Z 1 H C\n      cpARegister(Cpu.registerH);\n      return 4;\n\n    case 0xbd:\n      // CP L\n      // 1  4\n      // Z 1 H C\n      cpARegister(Cpu.registerL);\n      return 4;\n\n    case 0xbe:\n      // CP (HL)\n      // 1  8\n      // Z 1 H C\n      // 4 cycles\n      var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n      cpARegister(valueAtHLE);\n      return 4;\n\n    case 0xbf:\n      // CP A\n      // 1  4\n      // Z 1 H C\n      cpARegister(Cpu.registerA);\n      return 4;\n  }\n\n  return -1;\n}\n\nfunction handleOpcodeCx(opcode) {\n  switch (opcode) {\n    case 0xc0:\n      // RET NZ\n      // 1  20/8\n      if (getZeroFlag$$1() === 0) {\n        // 8 cycles\n        Cpu.programCounter = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n        return 12;\n      } else {\n        return 8;\n      }\n\n    case 0xc1:\n      // POP BC\n      // 1  12\n      // 8 cycles\n      var registerBC1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n      Cpu.registerB = splitHighByte(registerBC1);\n      Cpu.registerC = splitLowByte(registerBC1);\n      return 4;\n\n    case 0xc2:\n      // JP NZ,a16\n      // 3  16/12\n      if (getZeroFlag$$1() === 0) {\n        // 8 cycles\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    case 0xc3:\n      // JP a16\n      // 3  16\n      // 8 cycles\n      Cpu.programCounter = getConcatenatedDataByte();\n      return 8;\n\n    case 0xc4:\n      // CALL NZ,a16\n      // 3  24/12\n      if (getZeroFlag$$1() === 0) {\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n        sixteenBitStoreSyncCycles(Cpu.stackPointer, u16Portable(Cpu.programCounter + 2)); // 8 cycles\n\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    case 0xc5:\n      // PUSH BC\n      // 1  16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, concatenateBytes(Cpu.registerB, Cpu.registerC));\n      return 8;\n\n    case 0xc6:\n      // ADD A,d8\n      // 2 8\n      // Z 0 H C\n      // 4 cycles\n      addARegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xc7:\n      // RST 00H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x00;\n      return 8;\n\n    case 0xc8:\n      // RET Z\n      // 1  20/8\n      if (getZeroFlag$$1() === 1) {\n        // 8 cycles\n        Cpu.programCounter = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n        return 12;\n      } else {\n        return 8;\n      }\n\n    case 0xc9:\n      // RET\n      // 1 16\n      // 8 cycles\n      Cpu.programCounter = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n      return 8;\n\n    case 0xca:\n      // JP Z,a16\n      // 3 16/12\n      if (getZeroFlag$$1() === 1) {\n        // 8 cycles\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    case 0xcb:\n      // PREFIX CB\n      // 1  4\n      // 4 cycles\n      var cbCycles = handleCbOpcode(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return cbCycles;\n\n    case 0xcc:\n      // CALL Z,a16\n      // 3  24/12\n      if (getZeroFlag$$1() === 1) {\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n        sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter + 2); // 8 cycles\n\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    case 0xcd:\n      // CALL a16\n      // 3  24\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, u16Portable(Cpu.programCounter + 2)); // 8 cycles\n\n      Cpu.programCounter = getConcatenatedDataByte();\n      return 8;\n\n    case 0xce:\n      // ADC A,d8\n      // 2  8\n      // Z 0 H C\n      // 4 cycles\n      addAThroughCarryRegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xcf:\n      // RST 08H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x08;\n      return 8;\n  }\n\n  return -1;\n}\n\nfunction handleOpcodeDx(opcode) {\n  switch (opcode) {\n    case 0xd0:\n      // RET NC\n      // 1  20/8\n      if (getCarryFlag$$1() === 0) {\n        // 8 cycles\n        Cpu.programCounter = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n        return 12;\n      } else {\n        return 8;\n      }\n\n    case 0xd1:\n      // POP DE\n      // 1  12\n      // 8 cycles\n      var registerDE1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n      Cpu.registerD = splitHighByte(registerDE1);\n      Cpu.registerE = splitLowByte(registerDE1);\n      return 4;\n\n    case 0xd2:\n      // JP NC,a16\n      // 3  16/12\n      if (getCarryFlag$$1() === 0) {\n        // 8 cycles\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    /* No Opcode for: 0xD3 */\n\n    case 0xd4:\n      // CALL NC,a16\n      // 3  24/12\n      if (getCarryFlag$$1() === 0) {\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n        sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter + 2); // 8 cycles\n\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    case 0xd5:\n      // PUSH DE\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, concatenateBytes(Cpu.registerD, Cpu.registerE));\n      return 8;\n\n    case 0xd6:\n      // SUB d8\n      // 2  8\n      // Z 1 H C\n      // 4 cycles\n      subARegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xd7:\n      // RST 10H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x10;\n      return 8;\n\n    case 0xd8:\n      // RET C\n      // 1  20/8\n      if (getCarryFlag$$1() === 1) {\n        // 8 cycles\n        Cpu.programCounter = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n        return 12;\n      } else {\n        return 8;\n      }\n\n    case 0xd9:\n      // RETI\n      // 1  16\n      // 8 cycles\n      Cpu.programCounter = sixteenBitLoadSyncCycles(Cpu.stackPointer); // Enable interrupts\n\n      setInterrupts(true);\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n      return 8;\n\n    case 0xda:\n      // JP C,a16\n      // 3 16/12\n      if (getCarryFlag$$1() === 1) {\n        // 8 cycles\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    /* No Opcode for: 0xDB */\n\n    case 0xdc:\n      // CALL C,a16\n      // 3  24/12\n      if (getCarryFlag$$1() === 1) {\n        Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n        sixteenBitStoreSyncCycles(Cpu.stackPointer, u16Portable(Cpu.programCounter + 2)); // 8 cycles\n\n        Cpu.programCounter = getConcatenatedDataByte();\n        return 8;\n      } else {\n        Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n        return 12;\n      }\n\n    /* No Opcode for: 0xDD */\n\n    case 0xde:\n      // SBC A,d8\n      // 2 8\n      // Z 1 H C\n      // 4 cycles\n      subAThroughCarryRegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xdf:\n      // RST 18H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x18;\n      return 8;\n  }\n\n  return -1;\n}\n\nfunction handleOpcodeEx(opcode) {\n  switch (opcode) {\n    case 0xe0:\n      // LDH (a8),A\n      // 2  12\n      // Store value in high RAM ($FF00 + a8)\n      // 4 cycles\n      var largeDataByteOne = getDataByteOne(); // 4 cycles\n\n      eightBitStoreSyncCycles(0xff00 + largeDataByteOne, Cpu.registerA);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xe1:\n      // POP HL\n      // 1  12\n      // 8 cycles\n      var registerHL1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n      Cpu.registerH = splitHighByte(registerHL1);\n      Cpu.registerL = splitLowByte(registerHL1);\n      return 4;\n\n    case 0xe2:\n      // LD (C),A\n      // 1  8\n      // NOTE: Table says 2 Program counter,\n      // But stepping through the boot rom, should be one\n      // Also should change 0xF2\n      // Store value in high RAM ($FF00 + register c)\n      // 4 cycles\n      eightBitStoreSyncCycles(0xff00 + Cpu.registerC, Cpu.registerA);\n      return 4;\n\n    /* No Opcode for: 0xE3, 0xE4 */\n\n    case 0xe5:\n      // PUSH HL\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, concatenateBytes(Cpu.registerH, Cpu.registerL));\n      return 8;\n\n    case 0xe6:\n      // AND d8\n      // 2  8\n      // Z 0 1 0\n      // 4 cycles\n      andARegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xe7:\n      // RST 20H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x20;\n      return 8;\n\n    case 0xe8:\n      // ADD SP, r8\n      // 2 16\n      // 0 0 H C\n      // NOTE: Discoved dataByte is signed\n      // 4 cycles\n      var signedDataByteOne = i8Portable(getDataByteOne());\n      checkAndSetSixteenBitFlagsAddOverflow(Cpu.stackPointer, signedDataByteOne, true);\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + signedDataByteOne);\n      setZeroFlag$$1(0);\n      setSubtractFlag(0);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 12;\n\n    case 0xe9:\n      // JP HL\n      // 1 4\n      Cpu.programCounter = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      return 4;\n\n    case 0xea:\n      // LD (a16),A\n      // 3 16\n      // 12 cycles, 4 from store, 8 from concatenated data byte\n      eightBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.registerA);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n      return 4;\n\n    /* No Opcode for: 0xEB, 0xEC, 0xED */\n\n    case 0xee:\n      // XOR d8\n      // 2 8\n      // Z 0 0 0\n      // 4 cycles\n      xorARegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xef:\n      // RST 28H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x28;\n      return 8;\n  }\n\n  return -1;\n}\n\nfunction handleOpcodeFx(opcode) {\n  switch (opcode) {\n    case 0xf0:\n      // LDH A,(a8)\n      // 2 12\n      // 4 cycles\n      var largeDataByteOne = getDataByteOne(); // 4 cycles\n\n      Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + largeDataByteOne));\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xf1:\n      // POP AF\n      // 1 12\n      // Z N H C (But No work require, flags are already set)\n      // 8 cycles\n      var registerAF1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n      Cpu.registerA = splitHighByte(registerAF1);\n      Cpu.registerF = splitLowByte(registerAF1);\n      return 4;\n\n    case 0xf2:\n      // LD A,(C)\n      // 1 8\n      // 4 cycles\n      Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + Cpu.registerC));\n      return 4;\n\n    case 0xf3:\n      // DI\n      // 1 4\n      setInterrupts(false);\n      return 4;\n\n    /* No Opcode for: 0xF4 */\n\n    case 0xf5:\n      // PUSH AF\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, concatenateBytes(Cpu.registerA, Cpu.registerF));\n      return 8;\n\n    case 0xf6:\n      // OR d8\n      // 2 8\n      // Z 0 0 0\n      // 4 cycles\n      orARegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xf7:\n      // RST 30H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x30;\n      return 8;\n\n    case 0xf8:\n      // LD HL,SP+r8\n      // 2 12\n      // 0 0 H C\n      // NOTE: Discoved dataByte is signed\n      // 4 cycles\n      var signedDataByteOne = i8Portable(getDataByteOne()); // First, let's handle flags\n\n      setZeroFlag$$1(0);\n      setSubtractFlag(0);\n      checkAndSetSixteenBitFlagsAddOverflow(Cpu.stackPointer, signedDataByteOne, true);\n      var registerHL = u16Portable(Cpu.stackPointer + signedDataByteOne);\n      Cpu.registerH = splitHighByte(registerHL);\n      Cpu.registerL = splitLowByte(registerHL);\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 8;\n\n    case 0xf9:\n      // LD SP,HL\n      // 1 8\n      Cpu.stackPointer = concatenateBytes(Cpu.registerH, Cpu.registerL);\n      return 8;\n\n    case 0xfa:\n      // LD A,(a16)\n      // 3 16\n      // 12 cycles, 4 from load, 8 from concatenated data byte\n      Cpu.registerA = eightBitLoadSyncCycles(getConcatenatedDataByte());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n      return 4;\n\n    case 0xfb:\n      // EI\n      // 1 4\n      setInterrupts(true);\n      return 4;\n\n    /* No Opcode for: 0xFC, 0xFD */\n\n    case 0xfe:\n      // CP d8\n      // 2 8\n      // Z 1 H C\n      // 4 cycles\n      cpARegister(getDataByteOne());\n      Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n      return 4;\n\n    case 0xff:\n      // RST 38H\n      // 1 16\n      Cpu.stackPointer = u16Portable(Cpu.stackPointer - 2); // 8 cycles\n\n      sixteenBitStoreSyncCycles(Cpu.stackPointer, Cpu.programCounter);\n      Cpu.programCounter = 0x38;\n      return 8;\n  }\n\n  return -1;\n} // NOTE: Code is very verbose, and will have some copy pasta'd lines.\n// Imports\n// Grow our memory to the specified size\n\n\nif (memory.size() < WASMBOY_WASM_PAGES) {\n  memory.grow(WASMBOY_WASM_PAGES - memory.size());\n} // Function to track if the core has started\n\n\nvar hasStarted = false;\n\nfunction hasCoreStarted() {\n  if (hasStarted) {\n    return 1;\n  }\n\n  return 0;\n} // Function to configure & initialize wasmboy\n\n\nfunction config(enableBootRom, useGbcWhenAvailable, audioBatchProcessing, graphicsBatchProcessing, timersBatchProcessing, graphicsDisableScanlineRendering, audioAccumulateSamples, tileRendering, tileCaching) {\n  // TODO: depending on the boot rom, initialization may be different\n  // From: http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html\n  // All values default to zero in memory, so not setting them yet\n  // log('initializing (includeBootRom=$0)', 1, enableBootRom);\n  if (enableBootRom > 0) {\n    Config.enableBootRom = true;\n  } else {\n    Config.enableBootRom = false;\n  }\n\n  if (useGbcWhenAvailable > 0) {\n    Config.useGbcWhenAvailable = true;\n  } else {\n    Config.useGbcWhenAvailable = false;\n  }\n\n  if (audioBatchProcessing > 0) {\n    Config.audioBatchProcessing = true;\n  } else {\n    Config.audioBatchProcessing = false;\n  }\n\n  if (graphicsBatchProcessing > 0) {\n    Config.graphicsBatchProcessing = true;\n  } else {\n    Config.graphicsBatchProcessing = false;\n  }\n\n  if (timersBatchProcessing > 0) {\n    Config.timersBatchProcessing = true;\n  } else {\n    Config.timersBatchProcessing = false;\n  }\n\n  if (graphicsDisableScanlineRendering > 0) {\n    Config.graphicsDisableScanlineRendering = true;\n  } else {\n    Config.graphicsDisableScanlineRendering = false;\n  }\n\n  if (audioAccumulateSamples > 0) {\n    Config.audioAccumulateSamples = true;\n  } else {\n    Config.audioAccumulateSamples = false;\n  }\n\n  if (tileRendering > 0) {\n    Config.tileRendering = true;\n  } else {\n    Config.tileRendering = false;\n  }\n\n  if (tileCaching > 0) {\n    Config.tileCaching = true;\n  } else {\n    Config.tileCaching = false;\n  }\n\n  initialize();\n} // Function to initiialize the core\n\n\nfunction initialize() {\n  // Initialization variables from BGB\n  // First, try to switch to Gameboy Color Mode\n  // Get our GBC support from the cartridge header\n  // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n  var gbcType = eightBitLoadFromGBMemory(0x0143); // Detecting GBC http://bgb.bircd.org/pandocs.htm#cgbregisters\n\n  if (gbcType === 0xc0 || Config.useGbcWhenAvailable && gbcType === 0x80) {\n    Cpu.GBCEnabled = true;\n  } else {\n    Cpu.GBCEnabled = false;\n  } // Call our respective classes intialization\n\n\n  initializeCpu();\n  initializeCartridge();\n  initializeDma();\n  initializeGraphics();\n  initializePalette();\n  initializeSound();\n  initializeTimers(); // Various Other Registers\n\n  if (Cpu.GBCEnabled) {\n    // Various other registers\n    eightBitStoreIntoGBMemory(0xff70, 0xf8);\n    eightBitStoreIntoGBMemory(0xff4f, 0xfe);\n    eightBitStoreIntoGBMemory(0xff4d, 0x7e);\n    eightBitStoreIntoGBMemory(0xff00, 0xcf); // FF01 = 0x00\n\n    eightBitStoreIntoGBMemory(0xff02, 0x7c);\n    eightBitStoreIntoGBMemory(0xff0f, 0xe1); // 0xFFFF = 0x00\n    // Undocumented from Pandocs\n\n    eightBitStoreIntoGBMemory(0xff6c, 0xfe);\n    eightBitStoreIntoGBMemory(0xff75, 0x8f);\n  } else {\n    eightBitStoreIntoGBMemory(0xff70, 0xff);\n    eightBitStoreIntoGBMemory(0xff4f, 0xff);\n    eightBitStoreIntoGBMemory(0xff4d, 0xff);\n    eightBitStoreIntoGBMemory(0xff00, 0xcf); // FF01 = 0x00\n\n    eightBitStoreIntoGBMemory(0xff02, 0x7e);\n    eightBitStoreIntoGBMemory(0xff0f, 0xe1); // 0xFFFF = 0x00\n  } // Reset hasStarted, since we are now reset\n\n\n  hasStarted = false;\n} // Public funciton to run opcodes until,\n// a frame is ready, or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\n\n\nfunction executeFrame() {\n  var error = false;\n  var numberOfCycles = -1;\n\n  while (!error && Cpu.currentCycles < Cpu.MAX_CYCLES_PER_FRAME()) {\n    numberOfCycles = executeStep();\n\n    if (numberOfCycles < 0) {\n      error = true;\n    }\n  } // Find our exit reason\n\n\n  if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n    // Render a frame\n    // Reset our currentCycles\n    Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n    return 0;\n  } // TODO: Boot ROM handling\n  // There was an error, return -1, and push the program counter back to grab the error opcode\n\n\n  Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n  return -1;\n} // Public Function to run opcodes until,\n// a frame is ready, audio bufer is filled, or error\n// -1 = error\n// 0 = render a frame\n// 1 = output audio\n\n\nfunction executeFrameAndCheckAudio(maxAudioBuffer) {\n  var error = false;\n  var numberOfCycles = -1;\n  var audioBufferSize = 1024;\n\n  if (maxAudioBuffer && maxAudioBuffer > 0) {\n    audioBufferSize = maxAudioBuffer;\n  }\n\n  while (!error && Cpu.currentCycles < Cpu.MAX_CYCLES_PER_FRAME() && getNumberOfSamplesInAudioBuffer() < audioBufferSize) {\n    numberOfCycles = executeStep();\n\n    if (numberOfCycles < 0) {\n      error = true;\n    }\n  } // Find our exit reason\n\n\n  if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n    // Render a frame\n    // Reset our currentCycles\n    Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n    return 0;\n  }\n\n  if (getNumberOfSamplesInAudioBuffer() >= audioBufferSize) {\n    // Output Audio\n    return 1;\n  } // TODO: Boot ROM handling\n  // There was an error, return -1, and push the program counter back to grab the error opcode\n\n\n  Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n  return -1;\n} // Public function to run opcodes until,\n// a breakpoint is reached\n// -1 = error\n// 0 = frame executed\n// 1 = reached breakpoint\n\n\nfunction executeFrameUntilBreakpoint(breakpoint) {\n  var error = false;\n  var numberOfCycles = -1;\n\n  while (!error && Cpu.currentCycles < Cpu.MAX_CYCLES_PER_FRAME() && Cpu.programCounter !== breakpoint) {\n    numberOfCycles = executeStep();\n\n    if (numberOfCycles < 0) {\n      error = true;\n    }\n  } // Find our exit reason\n\n\n  if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n    // Render a frame\n    // Reset our currentCycles\n    Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n    return 0;\n  }\n\n  if (Cpu.programCounter === breakpoint) {\n    // breakpoint\n    return 1;\n  } // TODO: Boot ROM handling\n  // There was an error, return -1, and push the program counter back to grab the error opcode\n\n\n  Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n  return -1;\n} // Function to execute an opcode, and update other gameboy hardware.\n// http://www.codeslinger.co.uk/pages/projects/gameboy/beginning.html\n\n\nfunction executeStep() {\n  // Set has started to 1 since we ran a emulation step\n  hasStarted = true; // Get the opcode, and additional bytes to be handled\n  // Number of cycles defaults to 4, because while we're halted, we run 4 cycles (according to matt :))\n\n  var numberOfCycles = 4;\n  var opcode = 0; // Cpu Halting best explained: https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/db7xnbe/\n\n  if (!Cpu.isHalted && !Cpu.isStopped) {\n    opcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n    numberOfCycles = executeOpcode$$1(opcode);\n  } else {\n    // if we were halted, and interrupts were disabled but interrupts are pending, stop waiting\n    if (Cpu.isHalted && !Interrupts.masterInterruptSwitch && Interrupts.areInterruptsPending()) {\n      Cpu.isHalted = false;\n      Cpu.isStopped = false; // Need to run the next opcode twice, it's a bug menitoned in\n      // The reddit comment mentioned above\n      // CTRL+F \"low-power\" on gameboy cpu manual\n      // http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf\n      // E.g\n      // 0x76 - halt\n      // FA 34 12 - ld a,(1234)\n      // Becomes\n      // FA FA 34 ld a,(34FA)\n      // 12 ld (de),a\n\n      opcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n      numberOfCycles = executeOpcode$$1(opcode);\n      Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n    }\n  } // blarggFixes, don't allow register F to have the bottom nibble\n\n\n  Cpu.registerF = Cpu.registerF & 0xf0; // Check if there was an error decoding the opcode\n\n  if (numberOfCycles <= 0) {\n    return numberOfCycles;\n  } // Interrupt Handling requires 20 cycles\n  // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n  // Only check interrupts after an opcode is executed\n  // Since we don't want to mess up our PC as we are executing\n\n\n  numberOfCycles += checkInterrupts(); // Sync other GB Components with the number of cycles\n\n  syncCycles(numberOfCycles);\n  return numberOfCycles;\n} // Sync other GB Components with the number of cycles\n\n\nfunction syncCycles(numberOfCycles) {\n  // Check if we did a DMA TRansfer, if we did add the cycles\n  if (Memory.DMACycles > 0) {\n    numberOfCycles += Memory.DMACycles;\n    Memory.DMACycles = 0;\n  } // Finally, Add our number of cycles to the CPU Cycles\n\n\n  Cpu.currentCycles += numberOfCycles; // Check other Gameboy components\n\n  if (!Cpu.isStopped) {\n    if (Config.graphicsBatchProcessing) {\n      // Need to do this, since a lot of things depend on the scanline\n      // Batch processing will simply return if the number of cycles is too low\n      Graphics.currentCycles += numberOfCycles;\n      batchProcessGraphics();\n    } else {\n      updateGraphics(numberOfCycles);\n    }\n\n    if (Config.audioBatchProcessing) {\n      Sound.currentCycles += numberOfCycles;\n    } else {\n      updateSound(numberOfCycles);\n    }\n  }\n\n  if (Config.timersBatchProcessing) {\n    // Batch processing will simply return if the number of cycles is too low\n    Timers.currentCycles += numberOfCycles;\n    batchProcessTimers();\n  } else {\n    updateTimers(numberOfCycles);\n  }\n} // Function to return an address to store into save state memory\n// this is to regulate our 20 slots\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n\n\nfunction getSaveStateMemoryOffset(offset, saveStateSlot) {\n  // 50 bytes per save state memory partiton sli32\n  return WASMBOY_STATE_LOCATION + offset + 50 * saveStateSlot;\n} // Function to save state to memory for all of our classes\n\n\nfunction saveState() {\n  Cpu.saveState();\n  Graphics.saveState();\n  Interrupts.saveState();\n  Joypad.saveState();\n  Memory.saveState();\n  Timers.saveState();\n  Sound.saveState();\n  Channel1.saveState();\n  Channel2.saveState();\n  Channel3.saveState();\n  Channel4.saveState(); // Reset hasStarted, since we are now reset\n\n  hasStarted = false;\n} // Function to load state from memory for all of our classes\n\n\nfunction loadState() {\n  Cpu.loadState();\n  Graphics.loadState();\n  Interrupts.loadState();\n  Joypad.loadState();\n  Memory.loadState();\n  Timers.loadState();\n  Sound.loadState();\n  Channel1.loadState();\n  Channel2.loadState();\n  Channel3.loadState();\n  Channel4.loadState(); // Reset hasStarted, since we are now reset\n\n  hasStarted = false;\n} // Functions to get information about the emulator for debugging purposes\n\n\nfunction getRegisterA() {\n  return Cpu.registerA;\n}\n\nfunction getRegisterB() {\n  return Cpu.registerB;\n}\n\nfunction getRegisterC() {\n  return Cpu.registerC;\n}\n\nfunction getRegisterD() {\n  return Cpu.registerD;\n}\n\nfunction getRegisterE() {\n  return Cpu.registerE;\n}\n\nfunction getRegisterH() {\n  return Cpu.registerH;\n}\n\nfunction getRegisterL() {\n  return Cpu.registerL;\n}\n\nfunction getRegisterF() {\n  return Cpu.registerF;\n}\n\nfunction getProgramCounter() {\n  return Cpu.programCounter;\n}\n\nfunction getStackPointer() {\n  return Cpu.stackPointer;\n}\n\nfunction getOpcodeAtProgramCounter() {\n  return eightBitLoadFromGBMemory(Cpu.programCounter);\n} // Functions to debug graphical output\n// Some Simple internal getters\n\n\nfunction getLY() {\n  return Graphics.scanlineRegister;\n}\n\nfunction drawBackgroundMapToWasmMemory(showColor) {\n  // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n  // Bit 7 - LCD Display Enable (0=Off, 1=On)\n  // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n  // Bit 5 - Window Display Enable (0=Off, 1=On)\n  // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n  // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n  // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n  // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n  // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On)\n  if (showColor === void 0) {\n    showColor = 0;\n  } // Get our seleted tile data memory location\n\n\n  var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n\n  if (Lcd.bgWindowTileDataSelect) {\n    tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n  }\n\n  var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n\n  if (Lcd.bgTileMapDisplaySelect) {\n    tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n  }\n\n  for (var y = 0; y < 256; y++) {\n    for (var x = 0; x < 256; x++) {\n      // Get our current Y\n      var pixelYPositionInMap = y; // Get our Current X position of our pixel on the on the 160x144 camera\n      // this is done by getting the current scroll X position,\n      // and adding it do what X Value the scanline is drawing on the camera.\n\n      var pixelXPositionInMap = x; // Divide our pixel position by 8 to get our tile.\n      // Since, there are 256x256 pixels, and 32x32 tiles.\n      // 256 / 8 = 32.\n      // Also, bitshifting by 3, do do a division by 8\n      // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n\n      var tileXPositionInMap = pixelXPositionInMap >> 3;\n      var tileYPositionInMap = pixelYPositionInMap >> 3; // Get our tile address on the tileMap\n      // NOTE: (tileMap represents where each tile is displayed on the screen)\n      // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n      // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n      // And we have x pixel 160. 160 / 8 = 20.\n      // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n      // Think like indexing a 2d array, as a 1d array and it make sense :)\n\n      var tileMapAddress = tileMapMemoryLocation + tileYPositionInMap * 32 + tileXPositionInMap; // Get the tile Id on the Tile Map\n\n      var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0); // Now get our tileDataAddress for the corresponding tileID we found in the map\n      // Read the comments in _getTileDataAddress() to see what's going on.\n      // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n      // This funcitons returns the start of memory locaiton for the tile 'c'.\n\n      var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap); // Now we can process the the individual bytes that represent the pixel on a tile\n      // Get the y pixel of the 8 by 8 tile.\n      // Simply modulo the scanline.\n      // For instance, let's say we are printing the first line of pixels on our camera,\n      // And the first line of pixels on our tile.\n      // yPixel = 1. 1 % 8 = 1.\n      // And for the last line\n      // yPixel = 144. 144 % 8 = 0.\n      // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n      // Because remember, we are counting lines on the display NOT including zero\n\n      var pixelYInTile = pixelYPositionInMap % 8; // Same logic as pixelYInTile.\n      // However, We need to reverse our byte,\n      // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n      // Therefore, is pixelX was 2, then really is need to be 5\n      // So 2 - 7 = -5, * 1 = 5\n      // Or to simplify, 7 - 2 = 5 haha!\n\n      var pixelXInTile = pixelXPositionInMap % 8;\n      pixelXInTile = 7 - pixelXInTile; // Get the GB Map Attributes\n      // Bit 0-2  Background Palette number  (BGP0-7)\n      // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n      // Bit 4    Not used\n      // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n      // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n      // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n\n      var bgMapAttributes = 0;\n\n      if (Cpu.GBCEnabled && showColor > 0) {\n        bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n      }\n\n      if (checkBitOnByte(6, bgMapAttributes)) {\n        // We are mirroring the tile, therefore, we need to opposite byte\n        // So if our pizel was 0 our of 8, it wild become 7 :)\n        // TODO: This may be wrong :p\n        pixelYInTile = 7 - pixelYInTile;\n      } // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n      // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n      // But we need to load the time from a specific Vram bank\n\n\n      var vramBankId = 0;\n\n      if (checkBitOnByte(3, bgMapAttributes)) {\n        vramBankId = 1;\n      } // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n      // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n      // Again, think like you had to map a 2d array as a 1d.\n\n\n      var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n      var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId); // Now we can get the color for that pixel\n      // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n      // To Get the color Id.\n      // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n      // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n\n      var paletteColorId = 0;\n\n      if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n      }\n\n      if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n      } // FINALLY, RENDER THAT PIXEL!\n\n\n      var pixelStart = (y * 256 + x) * 3;\n\n      if (Cpu.GBCEnabled && showColor > 0) {\n        // Finally lets add some, C O L O R\n        // Want the botom 3 bits\n        var bgPalette = bgMapAttributes & 0x07; // Call the helper function to grab the correct color from the palette\n\n        var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false); // Split off into red green and blue\n\n        var red = getColorComponentFromRgb(0, rgbColorPalette);\n        var green = getColorComponentFromRgb(1, rgbColorPalette);\n        var blue = getColorComponentFromRgb(2, rgbColorPalette);\n        var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n        store(offset, red);\n        store(offset + 1, green);\n        store(offset + 2, blue);\n      } else {\n        // Only rendering camera for now, so coordinates are for the camera.\n        // Get the rgb value for the color Id, will be repeated into R, G, B\n        var monochromeColor = getMonochromeColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n\n        for (var i = 0; i < 3; i++) {\n          var offset = BACKGROUND_MAP_LOCATION + pixelStart + i;\n          store(offset, monochromeColor);\n        }\n      }\n    }\n  }\n}\n\nfunction drawTileDataToWasmMemory() {\n  for (var tileDataMapGridY = 0; tileDataMapGridY < 0x17; tileDataMapGridY++) {\n    for (var tileDataMapGridX = 0; tileDataMapGridX < 0x1f; tileDataMapGridX++) {\n      // Get Our VramBankID\n      var vramBankId = 0;\n\n      if (tileDataMapGridX > 0x0f) {\n        vramBankId = 1;\n      } // Get our tile ID\n\n\n      var tileId = tileDataMapGridY;\n\n      if (tileDataMapGridY > 0x0f) {\n        tileId -= 0x0f;\n      }\n\n      tileId = tileId << 4;\n\n      if (tileDataMapGridX > 0x0f) {\n        tileId = tileId + (tileDataMapGridX - 0x0f);\n      } else {\n        tileId = tileId + tileDataMapGridX;\n      } // Finally get our tile Data location\n\n\n      var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n\n      if (tileDataMapGridY > 0x0f) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n      } // Draw each Y line of the tile\n\n\n      for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n        drawPixelsFromLineOfTile(tileId, tileDataMemoryLocation, vramBankId, 0, 7, tileLineY, tileDataMapGridX * 8, tileDataMapGridY * 8 + tileLineY, 0x1f * 8, TILE_DATA_LOCATION, true);\n      }\n    }\n  }\n}\n\nfunction getDIV() {\n  return Timers.dividerRegister;\n}\n\nfunction getTIMA() {\n  return Timers.timerCounter;\n}\n\nfunction getTMA() {\n  return Timers.timerModulo;\n}\n\nfunction getTAC() {\n  var response = Timers.timerInputClock;\n\n  if (Timers.timerEnabled) {\n    response = setBitOnByte(2, response);\n  }\n\n  return response;\n} // These are legacy aliases for the original WasmBoy api\n// WasmBoy\n\n\nvar wasmMemorySize = WASMBOY_MEMORY_SIZE;\nvar wasmBoyInternalStateLocation = WASMBOY_STATE_LOCATION;\nvar wasmBoyInternalStateSize = WASMBOY_STATE_SIZE; // Gameboy\n\nvar gameBoyInternalMemoryLocation = GAMEBOY_INTERNAL_MEMORY_LOCATION;\nvar gameBoyInternalMemorySize = GAMEBOY_INTERNAL_MEMORY_SIZE; // Video output\n\nvar videoOutputLocation = GRAPHICS_OUTPUT_LOCATION;\nvar gameboyColorPaletteLocation = GBC_PALETTE_LOCATION;\nvar gameboyColorPaletteSize = GBC_PALETTE_SIZE;\nvar frameInProgressVideoOutputLocation = FRAME_LOCATION;\nvar backgroundMapLocation = BACKGROUND_MAP_LOCATION;\nvar tileDataMap = TILE_DATA_LOCATION; // Sound output\n\nvar soundOutputLocation = AUDIO_BUFFER_LOCATION; // Game Cartridge\n\nvar gameRamBanksLocation = CARTRIDGE_RAM_LOCATION; // Passed in Game backup or ROM from the user\n\nvar gameBytesLocation = CARTRIDGE_ROM_LOCATION; // Public Exports\n\nvar WasmBoyCore = /*#__PURE__*/Object.freeze({\n  memory: memory,\n  config: config,\n  executeFrame: executeFrame,\n  executeFrameAndCheckAudio: executeFrameAndCheckAudio,\n  executeFrameUntilBreakpoint: executeFrameUntilBreakpoint,\n  executeStep: executeStep,\n  saveState: saveState,\n  loadState: loadState,\n  hasCoreStarted: hasCoreStarted,\n  setJoypadState: setJoypadState,\n  getNumberOfSamplesInAudioBuffer: getNumberOfSamplesInAudioBuffer,\n  clearAudioBuffer: clearAudioBuffer,\n  WASMBOY_MEMORY_LOCATION: WASMBOY_MEMORY_LOCATION,\n  WASMBOY_MEMORY_SIZE: WASMBOY_MEMORY_SIZE,\n  WASMBOY_WASM_PAGES: WASMBOY_WASM_PAGES,\n  ASSEMBLYSCRIPT_MEMORY_LOCATION: ASSEMBLYSCRIPT_MEMORY_LOCATION,\n  ASSEMBLYSCRIPT_MEMORY_SIZE: ASSEMBLYSCRIPT_MEMORY_SIZE,\n  WASMBOY_STATE_LOCATION: WASMBOY_STATE_LOCATION,\n  WASMBOY_STATE_SIZE: WASMBOY_STATE_SIZE,\n  GAMEBOY_INTERNAL_MEMORY_LOCATION: GAMEBOY_INTERNAL_MEMORY_LOCATION,\n  GAMEBOY_INTERNAL_MEMORY_SIZE: GAMEBOY_INTERNAL_MEMORY_SIZE,\n  VIDEO_RAM_LOCATION: VIDEO_RAM_LOCATION,\n  VIDEO_RAM_SIZE: VIDEO_RAM_SIZE,\n  WORK_RAM_LOCATION: WORK_RAM_LOCATION,\n  WORK_RAM_SIZE: WORK_RAM_SIZE,\n  OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION: OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION,\n  OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE: OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE,\n  GRAPHICS_OUTPUT_LOCATION: GRAPHICS_OUTPUT_LOCATION,\n  GRAPHICS_OUTPUT_SIZE: GRAPHICS_OUTPUT_SIZE,\n  GBC_PALETTE_LOCATION: GBC_PALETTE_LOCATION,\n  GBC_PALETTE_SIZE: GBC_PALETTE_SIZE,\n  BG_PRIORITY_MAP_LOCATION: BG_PRIORITY_MAP_LOCATION,\n  BG_PRIORITY_MAP_SIZE: BG_PRIORITY_MAP_SIZE,\n  FRAME_LOCATION: FRAME_LOCATION,\n  FRAME_SIZE: FRAME_SIZE,\n  BACKGROUND_MAP_LOCATION: BACKGROUND_MAP_LOCATION,\n  BACKGROUND_MAP_SIZE: BACKGROUND_MAP_SIZE,\n  TILE_DATA_LOCATION: TILE_DATA_LOCATION,\n  TILE_DATA_SIZE: TILE_DATA_SIZE,\n  OAM_TILES_LOCATION: OAM_TILES_LOCATION,\n  OAM_TILES_SIZE: OAM_TILES_SIZE,\n  AUDIO_BUFFER_LOCATION: AUDIO_BUFFER_LOCATION,\n  AUDIO_BUFFER_SIZE: AUDIO_BUFFER_SIZE,\n  CARTRIDGE_RAM_LOCATION: CARTRIDGE_RAM_LOCATION,\n  CARTRIDGE_RAM_SIZE: CARTRIDGE_RAM_SIZE,\n  CARTRIDGE_ROM_LOCATION: CARTRIDGE_ROM_LOCATION,\n  CARTRIDGE_ROM_SIZE: CARTRIDGE_ROM_SIZE,\n  getWasmBoyOffsetFromGameBoyOffset: getWasmBoyOffsetFromGameBoyOffset,\n  getRegisterA: getRegisterA,\n  getRegisterB: getRegisterB,\n  getRegisterC: getRegisterC,\n  getRegisterD: getRegisterD,\n  getRegisterE: getRegisterE,\n  getRegisterH: getRegisterH,\n  getRegisterL: getRegisterL,\n  getRegisterF: getRegisterF,\n  getProgramCounter: getProgramCounter,\n  getStackPointer: getStackPointer,\n  getOpcodeAtProgramCounter: getOpcodeAtProgramCounter,\n  getLY: getLY,\n  drawBackgroundMapToWasmMemory: drawBackgroundMapToWasmMemory,\n  drawTileDataToWasmMemory: drawTileDataToWasmMemory,\n  getDIV: getDIV,\n  getTIMA: getTIMA,\n  getTMA: getTMA,\n  getTAC: getTAC,\n  update: executeFrame,\n  emulationStep: executeStep,\n  getAudioQueueIndex: getNumberOfSamplesInAudioBuffer,\n  resetAudioQueue: clearAudioBuffer,\n  wasmMemorySize: wasmMemorySize,\n  wasmBoyInternalStateLocation: wasmBoyInternalStateLocation,\n  wasmBoyInternalStateSize: wasmBoyInternalStateSize,\n  gameBoyInternalMemoryLocation: gameBoyInternalMemoryLocation,\n  gameBoyInternalMemorySize: gameBoyInternalMemorySize,\n  videoOutputLocation: videoOutputLocation,\n  frameInProgressVideoOutputLocation: frameInProgressVideoOutputLocation,\n  gameboyColorPaletteLocation: gameboyColorPaletteLocation,\n  gameboyColorPaletteSize: gameboyColorPaletteSize,\n  backgroundMapLocation: backgroundMapLocation,\n  tileDataMap: tileDataMap,\n  soundOutputLocation: soundOutputLocation,\n  gameBytesLocation: gameBytesLocation,\n  gameRamBanksLocation: gameRamBanksLocation\n});\n\nconst getWasmBoyTsCore = async () => {\n  const response = {\n    instance: {\n      exports: WasmBoyCore\n    },\n    byteMemory: memory.wasmByteMemory,\n    type: 'TypeScript'\n  };\n  return response;\n};\n\nexport default getWasmBoyTsCore;\n","// Common Static functions\n\n// Function to get performance timestamp\n// This is to support node vs. Browser\nexport const getPerformanceTimestamp = () => {\n  if (typeof window !== 'undefined') {\n    return performance.now();\n  }\n  return Date.now();\n};\n","import { getPerformanceTimestamp } from '../../common/common';\n\n// Function to add a timestamp to keep track\n// of how fast we are running\nexport function addTimeStamp(libWorker) {\n  // Track our Fps\n  // http://www.growingwiththeweb.com/2017/12/fast-simple-js-fps-counter.html\n  const currentHighResTime = getPerformanceTimestamp();\n  while (libWorker.fpsTimeStamps[0] < currentHighResTime - 1000) {\n    libWorker.fpsTimeStamps.shift();\n  }\n  libWorker.fpsTimeStamps.push(currentHighResTime);\n\n  libWorker.timeStampsUntilReady--;\n  if (libWorker.timeStampsUntilReady < 0) {\n    libWorker.timeStampsUntilReady = 0;\n  }\n\n  return currentHighResTime;\n}\n\n// Function to wait for a specified number,\n// of timestamps before setting the framerate\nexport function waitForTimeStampsForFrameRate(libWorker) {\n  if (libWorker.options.gameboyFrameRate <= 90) {\n    libWorker.timeStampsUntilReady = Math.floor(libWorker.options.gameboyFrameRate) * 1.25;\n  } else {\n    // Fast stretching should be hardcoded, that way it doesn't just say a large number for a long time\n    libWorker.timeStampsUntilReady = 120;\n  }\n}\n","// Start our update and render process\n// Can't time by raf, as raf is not garunteed to be 60fps\n// Need to run like a web game, where updates to the state of the core are done a 60 fps\n// but we can render whenever the user would actually see the changes browser side in a raf\n// https://developer.mozilla.org/en-US/docs/Games/Anatomy\n\n// Imports\nimport { postMessage } from '../../worker/workerapi';\nimport { getSmartWorkerMessage } from '../../worker/smartworker';\nimport { WORKER_MESSAGE_TYPE, MEMORY_TYPE } from '../../worker/constants';\n\n// Memory\nimport { getCartridgeRam } from './memory/ram.js';\nimport { getGameBoyMemory } from './memory/gameboymemory.js';\nimport { getPaletteMemory } from './memory/palettememory.js';\nimport { getInternalState } from './memory/internalstate.js';\n\n// Timestamps\nimport { getPerformanceTimestamp } from '../../common/common';\nimport { addTimeStamp, waitForTimeStampsForFrameRate } from './timestamp';\n\n// Some variables to help with Audio Latency\n// 0.25 (quarter of a second), just felt right from testing :)\nconst MAX_AUDIO_LATENCY = 0.25;\n// Pass over samples once we have enough worth playing:\n// https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/\nconst AUDIO_BUFFER_SIZE = 1024;\n\n// FPS measuring\nlet currentHighResTime;\nlet currentFps;\n\n// interval to set timeout\nlet intervalRate;\n\nfunction scheduleNextUpdate(libWorker) {\n  // Get our high res time\n  const highResTime = getPerformanceTimestamp();\n\n  // Find how long it has been since the last timestamp\n  const timeSinceLastTimestamp = highResTime - libWorker.fpsTimeStamps[libWorker.fpsTimeStamps.length - 1];\n\n  // Get the next time we should update using our interval rate\n  let nextUpdateTime = intervalRate - timeSinceLastTimestamp;\n  if (nextUpdateTime < 0) {\n    nextUpdateTime = 0;\n  }\n\n  libWorker.updateId = setTimeout(() => {\n    update(libWorker);\n  }, Math.floor(nextUpdateTime));\n}\n\n// Function to run an update on the emulator itself\nexport function update(libWorker, passedIntervalRate) {\n  // Don't run if paused\n  if (libWorker.paused) {\n    return true;\n  }\n\n  // Set the intervalRate if it was passed\n  if (passedIntervalRate !== undefined) {\n    intervalRate = passedIntervalRate;\n  }\n\n  // Set a timestamp for this moment\n  // And make sure we are on track for FPS\n  currentFps = libWorker.getFPS();\n  if (currentFps > libWorker.options.gameboyFrameRate + 1) {\n    // Pop a timestamp off of the front\n    // This is to avoid infinite loop here on loadstate\n    libWorker.fpsTimeStamps.shift();\n    scheduleNextUpdate(libWorker);\n    return true;\n  } else {\n    currentHighResTime = addTimeStamp(libWorker);\n  }\n\n  // Check if we are outputting audio\n  const shouldCheckAudio = !libWorker.options.headless && !libWorker.pauseFpsThrottle && libWorker.options.isAudioEnabled;\n\n  // Execute\n  // Wrapped in promise to better handle audio slowdowns and things of that sort\n  const executePromise = new Promise(resolve => {\n    // Update (Execute a frame)\n    let response;\n    if (shouldCheckAudio) {\n      executeAndCheckAudio(libWorker, resolve);\n    } else {\n      response = libWorker.wasmInstance.exports.executeFrame();\n      resolve(response);\n    }\n  });\n\n  executePromise.then(response => {\n    // Handle our update() response\n    if (response >= 0) {\n      // Pass messages to everyone\n      postMessage(\n        getSmartWorkerMessage({\n          type: WORKER_MESSAGE_TYPE.UPDATED,\n          fps: currentFps\n        })\n      );\n\n      // Check if we have frameskip\n      let shouldSkipRenderingFrame = false;\n      if (libWorker.options.frameSkip && libWorker.options.frameSkip > 0) {\n        libWorker.frameSkipCounter++;\n\n        if (libWorker.frameSkipCounter <= libWorker.options.frameSkip) {\n          shouldSkipRenderingFrame = true;\n        } else {\n          libWorker.frameSkipCounter = 0;\n        }\n      }\n\n      // Transfer Graphics\n      if (!shouldSkipRenderingFrame) {\n        const graphicsFrameEndIndex = libWorker.WASMBOY_CURRENT_FRAME_OUTPUT_LOCATION + libWorker.WASMBOY_CURRENT_FRAME_SIZE;\n        const graphicsFrameBuffer = libWorker.wasmByteMemory.slice(libWorker.WASMBOY_CURRENT_FRAME_OUTPUT_LOCATION, graphicsFrameEndIndex)\n          .buffer;\n        //libWorker.graphicsWorkerPort.postMessage(graphicsFrameBuffer, [graphicsFrameBuffer]);\n        libWorker.graphicsWorkerPort.postMessage(\n          getSmartWorkerMessage({\n            type: WORKER_MESSAGE_TYPE.UPDATED,\n            graphicsFrameBuffer\n          }),\n          [graphicsFrameBuffer]\n        );\n      }\n\n      // Transfer Memory for things like save states\n      const memoryObject = {\n        type: WORKER_MESSAGE_TYPE.UPDATED\n      };\n      memoryObject[MEMORY_TYPE.CARTRIDGE_RAM] = getCartridgeRam(libWorker).buffer;\n      memoryObject[MEMORY_TYPE.GAMEBOY_MEMORY] = getGameBoyMemory(libWorker).buffer;\n      memoryObject[MEMORY_TYPE.PALETTE_MEMORY] = getPaletteMemory(libWorker).buffer;\n      memoryObject[MEMORY_TYPE.INTERNAL_STATE] = getInternalState(libWorker).buffer;\n\n      // Check for any undefined values\n      Object.keys(memoryObject).forEach(key => {\n        if (memoryObject[key] === undefined) {\n          memoryObject[key] = new Uint8Array().buffer;\n        }\n      });\n\n      libWorker.memoryWorkerPort.postMessage(getSmartWorkerMessage(memoryObject), [\n        memoryObject[MEMORY_TYPE.CARTRIDGE_RAM],\n        memoryObject[MEMORY_TYPE.GAMEBOY_MEMORY],\n        memoryObject[MEMORY_TYPE.PALETTE_MEMORY],\n        memoryObject[MEMORY_TYPE.INTERNAL_STATE]\n      ]);\n\n      scheduleNextUpdate(libWorker);\n    } else {\n      postMessage(\n        getSmartWorkerMessage({\n          type: WORKER_MESSAGE_TYPE.CRASHED\n        })\n      );\n      libWorker.paused = true;\n    }\n  });\n}\n\n// If audio is enabled, sync by audio\n// Audio will pass us its forward latency, and if it is too far ahead,\n// Then we can wait a little bit to let audio catch up\n// 0.25 (quarter of a second), just felt right from testing :)\nfunction executeAndCheckAudio(libWorker, resolve) {\n  // Get our response\n  const response = libWorker.wasmInstance.exports.executeFrameAndCheckAudio(AUDIO_BUFFER_SIZE);\n\n  // If our response is not 1, simply resolve\n  if (response !== 1) {\n    resolve(response);\n  }\n\n  // Do some audio magic\n  if (response === 1) {\n    // Get our audioQueueIndex\n    const audioQueueIndex = libWorker.wasmInstance.exports.getAudioQueueIndex();\n\n    // Check if we are sending too much audio\n    const isTooMuchLatency = libWorker.currentAudioLatencyInSeconds > MAX_AUDIO_LATENCY;\n    const isRunningFullSpeed = currentFps >= libWorker.options.gameboyFrameRate;\n\n    if (isTooMuchLatency && isRunningFullSpeed) {\n      sendAudio(libWorker, audioQueueIndex);\n      // Wait, Set a timeout for when we would like to\n      // Continue executing. * 1000 for seconds -> milli\n      // Wait for half the difference, since it may take time to execute, and things\n      const latencyDifferenceInSeconds = libWorker.currentAudioLatencyInSeconds - MAX_AUDIO_LATENCY;\n      const latencyDifferenceInMilli = Math.floor(latencyDifferenceInSeconds * 1000);\n      setTimeout(() => {\n        waitForTimeStampsForFrameRate(libWorker);\n        executeAndCheckAudio(libWorker, resolve);\n      }, Math.floor(latencyDifferenceInMilli / 10));\n    } else {\n      sendAudio(libWorker, audioQueueIndex);\n      executeAndCheckAudio(libWorker, resolve);\n    }\n  }\n}\n\nfunction sendAudio(libWorker, audioQueueIndex) {\n  // Send out our audio\n  // audioQueueIndex * 2, because audio Queue index represents 1 sample,\n  // for left AND right channel. Therefore the end index is, twice\n  // of the audioQueueIndex\n  const audioBuffer = libWorker.wasmByteMemory.slice(\n    libWorker.WASMBOY_SOUND_OUTPUT_LOCATION,\n    libWorker.WASMBOY_SOUND_OUTPUT_LOCATION + audioQueueIndex * 2\n  ).buffer;\n  libWorker.audioWorkerPort.postMessage(\n    getSmartWorkerMessage({\n      type: WORKER_MESSAGE_TYPE.UPDATED,\n      audioBuffer,\n      numberOfSamples: audioQueueIndex,\n      fps: currentFps,\n      allowFastSpeedStretching: libWorker.options.gameboyFrameRate > 60\n    }),\n    [audioBuffer]\n  );\n  libWorker.wasmInstance.exports.resetAudioQueue();\n}\n","// Web worker for wasmboy lib\n// Will be used for running wasm, and controlling child workers.\n\n// Using transferables: https://stackoverflow.com/questions/16071211/using-transferable-objects-from-a-web-worker\n\nimport { postMessage, onMessage } from '../../worker/workerapi';\nimport { WORKER_MESSAGE_TYPE, WORKER_ID } from '../../worker/constants';\nimport { getEventData, isInBrowser } from '../../worker/util';\nimport { getSmartWorkerMessage } from '../../worker/smartworker';\n\n// Post message handlers\nimport { graphicsWorkerOnMessage } from './graphics/onmessage';\nimport { audioWorkerOnMessage } from './audio/onmessage';\nimport { controllerWorkerOnMessage } from './controller/onmessage';\nimport { memoryWorkerOnMessage } from './memory/onmessage';\n\n// Only One response will be used on build time\n// Using Babel plugin to filter imports\nimport getWasmBoyWasmCore from '../../../dist/core/getWasmBoyWasmCore.esm';\nimport getWasmBoyTsCore from '../../../dist/core/getWasmBoyTsCore.esm';\n\n// Update to run the core emulator\nimport { update } from './update';\n\n// Timestamps\nimport { waitForTimeStampsForFrameRate } from './timestamp';\n\n// Our stateful object\n// Representing our lib worker as a singleton\n// Not using normal classes because:\n// Class functions weren't working for some odd reason, and 'this' was getting wonky\nlet libWorker;\nlibWorker = {\n  // Wasmboy Module Ports\n  graphicsWorkerPort: undefined,\n  memoryWorkerPort: undefined,\n  controllerWorkerPort: undefined,\n  audioWorkerPort: undefined,\n\n  // Wasm Module Properties\n  wasmInstance: undefined,\n  wasmByteMemory: undefined,\n\n  // Lib options\n  options: undefined,\n\n  // Some Constants from the wasm module\n  WASMBOY_GAME_BYTES_LOCATION: 0,\n  WASMBOY_GAME_RAM_BANKS_LOCATION: 0,\n  WASMBOY_INTERNAL_STATE_SIZE: 0,\n  WASMBOY_INTERNAL_STATE_LOCATION: 0,\n  WASMBOY_INTERNAL_MEMORY_SIZE: 0,\n  WASMBOY_INTERNAL_MEMORY_LOCATION: 0,\n  WASMBOY_PALETTE_MEMORY_SIZE: 0,\n  WASMBOY_PALETTE_MEMORY_LOCATION: 0,\n  WASMBOY_CURRENT_FRAME_OUTPUT_LOCATION: 0,\n  WASMBOY_CURRENT_FRAME_SIZE: 0,\n  WASMBOY_SOUND_OUTPUT_LOCATION: 0,\n\n  // Playing state\n  paused: true,\n\n  // Our update setTimeout ref\n  updateId: undefined,\n\n  // Our fps timestamps\n  timeStampsUntilReady: 0,\n  fpsTimeStamps: [],\n\n  // Frame Skipping\n  frameSkipCounter: 0,\n\n  // Audio latency\n  currentAudioLatencyInSeconds: 0,\n\n  // Message Handler from the main thread\n  messageHandler: event => {\n    // Handle our messages from the main thread\n    const eventData = getEventData(event);\n\n    switch (eventData.message.type) {\n      case WORKER_MESSAGE_TYPE.CONNECT: {\n        // Assign our worker ports on connect\n        if (eventData.message.workerId === WORKER_ID.GRAPHICS) {\n          libWorker.graphicsWorkerPort = eventData.message.ports[0];\n          onMessage(graphicsWorkerOnMessage.bind(undefined, libWorker), libWorker.graphicsWorkerPort);\n        } else if (eventData.message.workerId === WORKER_ID.MEMORY) {\n          libWorker.memoryWorkerPort = eventData.message.ports[0];\n          onMessage(memoryWorkerOnMessage.bind(undefined, libWorker), libWorker.memoryWorkerPort);\n        } else if (eventData.message.workerId === WORKER_ID.CONTROLLER) {\n          libWorker.controllerWorkerPort = eventData.message.ports[0];\n          onMessage(controllerWorkerOnMessage.bind(undefined, libWorker), libWorker.controllerWorkerPort);\n        } else if (eventData.message.workerId === WORKER_ID.AUDIO) {\n          libWorker.audioWorkerPort = eventData.message.ports[0];\n          onMessage(audioWorkerOnMessage.bind(undefined, libWorker), libWorker.audioWorkerPort);\n        }\n\n        // Simply post back that we are ready\n        postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n        return;\n      }\n\n      case WORKER_MESSAGE_TYPE.INSTANTIATE_WASM: {\n        const instantiateTask = async () => {\n          let response;\n          // Only One response will be used on build time\n          // Using Babel plugin to filter imports\n          response = await getWasmBoyWasmCore(isInBrowser);\n          response = await getWasmBoyTsCore();\n\n          libWorker.wasmInstance = response.instance;\n          libWorker.wasmByteMemory = response.byteMemory;\n          postMessage(\n            getSmartWorkerMessage(\n              {\n                type: response.type\n              },\n              eventData.messageId\n            )\n          );\n          return;\n        };\n        instantiateTask();\n        return;\n      }\n      case WORKER_MESSAGE_TYPE.CONFIG: {\n        // Config will come in as an array, pass in values using apply\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n        const config = eventData.message.config;\n        libWorker.wasmInstance.exports.config.apply(libWorker, config);\n        libWorker.options = eventData.message.options;\n        postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n        return;\n      }\n\n      case WORKER_MESSAGE_TYPE.RESET_AUDIO_QUEUE: {\n        // Reset the audio queue index to stop weird pauses when trying to load a game\n        libWorker.wasmInstance.exports.resetAudioQueue();\n        postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n        return;\n      }\n\n      case WORKER_MESSAGE_TYPE.PLAY: {\n        if (!libWorker.paused || !libWorker.wasmInstance || !libWorker.wasmByteMemory) {\n          postMessage(getSmartWorkerMessage({ error: true }, eventData.messageId));\n          return;\n        }\n\n        // Re-initialize some of our values\n        libWorker.paused = false;\n        libWorker.fpsTimeStamps = [];\n        libWorker.frameSkipCounter = 0;\n        libWorker.currentAudioLatencyInSeconds = 0;\n\n        // 1000 / 60 = 60fps\n        // Add one to the framerate, as we would rather be slightly faster,\n        // than slightly slower\n        const intervalRate = 1000 / libWorker.options.gameboyFrameRate;\n        update(libWorker, intervalRate);\n\n        waitForTimeStampsForFrameRate(libWorker);\n        postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n        return;\n      }\n\n      case WORKER_MESSAGE_TYPE.PAUSE: {\n        // Call our update\n        libWorker.paused = true;\n        if (libWorker.updateId) {\n          clearTimeout(libWorker.updateId);\n          libWorker.updateId = undefined;\n        }\n        postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n        return;\n      }\n\n      // Debugging Messages\n      case WORKER_MESSAGE_TYPE.RUN_WASM_EXPORT: {\n        let response;\n        if (eventData.message.parameters) {\n          response = libWorker.wasmInstance.exports[eventData.message.export].apply(undefined, eventData.message.parameters);\n        } else {\n          response = libWorker.wasmInstance.exports[eventData.message.export]();\n        }\n        postMessage(\n          getSmartWorkerMessage(\n            {\n              type: WORKER_MESSAGE_TYPE.RUN_WASM_EXPORT,\n              response: response\n            },\n            eventData.messageId\n          )\n        );\n        return;\n      }\n\n      case WORKER_MESSAGE_TYPE.GET_WASM_MEMORY_SECTION: {\n        let start = 0;\n        let end = libWorker.wasmByteMemory.length;\n        if (eventData.message.start) {\n          start = eventData.message.start;\n        }\n        if (eventData.message.end) {\n          end = eventData.message.end;\n        }\n\n        const response = libWorker.wasmByteMemory.slice(start, end).buffer;\n        postMessage(\n          getSmartWorkerMessage(\n            {\n              type: WORKER_MESSAGE_TYPE.RUN_WASM_EXPORT,\n              response: response\n            },\n            eventData.messageId\n          ),\n          [response]\n        );\n        return;\n      }\n\n      case WORKER_MESSAGE_TYPE.GET_WASM_CONSTANT: {\n        const response = libWorker.wasmInstance.exports[eventData.message.constant].valueOf();\n        postMessage(\n          getSmartWorkerMessage(\n            {\n              type: WORKER_MESSAGE_TYPE.GET_WASM_CONSTANT,\n              response: response\n            },\n            eventData.messageId\n          )\n        );\n        return;\n      }\n\n      default: {\n        //handle other messages from main\n        console.log(eventData);\n      }\n    }\n  },\n\n  // Function to return the current FPS\n  // http://www.growingwiththeweb.com/2017/12/fast-simple-js-fps-counter.html\n  getFPS: () => {\n    if (libWorker.timeStampsUntilReady > 0) {\n      return libWorker.options.gameboyFrameRate;\n    } else if (libWorker.fpsTimeStamps) {\n      return libWorker.fpsTimeStamps.length;\n    }\n\n    return 0;\n  }\n};\n\n// Assign the worker a message handler\nonMessage(libWorker.messageHandler);\n"],"names":["getEventData","event","data","isInBrowser","self","parentPort","require","postMessage","message","transferArray","onMessage","callback","port","console","error","onmessage","on","WORKER_MESSAGE_TYPE","CONNECT","INSTANTIATE_WASM","CLEAR_MEMORY","CLEAR_MEMORY_DONE","GET_MEMORY","SET_MEMORY","SET_MEMORY_DONE","GET_CONSTANTS","GET_CONSTANTS_DONE","CONFIG","RESET_AUDIO_QUEUE","PLAY","PAUSE","UPDATED","CRASHED","SET_JOYPAD_STATE","AUDIO_LATENCY","RUN_WASM_EXPORT","GET_WASM_MEMORY_SECTION","GET_WASM_CONSTANT","WORKER_ID","LIB","GRAPHICS","MEMORY","CONTROLLER","AUDIO","MEMORY_TYPE","CARTRIDGE_RAM","CARTRIDGE_ROM","CARTRIDGE_HEADER","GAMEBOY_MEMORY","PALETTE_MEMORY","INTERNAL_STATE","idCounter","generateId","randomId","Math","random","toString","replace","substr","id","getSmartWorkerMessage","messageId","workerId","graphicsWorkerOnMessage","libWorker","eventData","type","WASMBOY_CURRENT_FRAME_OUTPUT_LOCATION","wasmInstance","exports","frameInProgressVideoOutputLocation","valueOf","WASMBOY_CURRENT_FRAME_SIZE","FRAME_SIZE","graphicsWorkerPort","audioWorkerOnMessage","WASMBOY_SOUND_OUTPUT_LOCATION","soundOutputLocation","audioWorkerPort","currentAudioLatencyInSeconds","latency","controllerWorkerOnMessage","setJoypadStateParamsAsArray","setJoypadState","apply","getCartridgeRom","wasmByteMemory","Uint8Array","cartridgeType","WASMBOY_GAME_BYTES_LOCATION","romSize","undefined","cartridgeRom","slice","getCartridgeRam","ramSize","cartridgeRam","WASMBOY_GAME_RAM_BANKS_LOCATION","getCartridgeHeader","headerLength","headerLocation","headerArray","getGameBoyMemory","WASMBOY_INTERNAL_MEMORY_LOCATION","WASMBOY_INTERNAL_MEMORY_SIZE","getPaletteMemory","WASMBOY_PALETTE_MEMORY_LOCATION","WASMBOY_PALETTE_MEMORY_SIZE","getInternalState","saveState","WASMBOY_INTERNAL_STATE_LOCATION","WASMBOY_INTERNAL_STATE_SIZE","memoryWorkerOnMessage","i","length","memoryWorkerPort","buffer","gameBytesLocation","gameRamBanksLocation","wasmBoyInternalStateSize","wasmBoyInternalStateLocation","gameBoyInternalMemorySize","gameBoyInternalMemoryLocation","gameboyColorPaletteSize","gameboyColorPaletteLocation","memoryKeys","Object","keys","includes","set","loadState","responseMemory","responseTransferrables","memoryTypes","push","cartridgeHeader","gameboyMemory","paletteMemory","internalState","wasmboyMemorySize","Uint8ClampedArray","memory","size","grow","load","offset","store","value","abs","WASMBOY_MEMORY_LOCATION","WASMBOY_MEMORY_SIZE","WASMBOY_WASM_PAGES","ASSEMBLYSCRIPT_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_SIZE","WASMBOY_STATE_LOCATION","WASMBOY_STATE_SIZE","GAMEBOY_INTERNAL_MEMORY_LOCATION","GAMEBOY_INTERNAL_MEMORY_SIZE","VIDEO_RAM_LOCATION","VIDEO_RAM_SIZE","WORK_RAM_LOCATION","WORK_RAM_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION","OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE","GRAPHICS_OUTPUT_LOCATION","GRAPHICS_OUTPUT_SIZE","GBC_PALETTE_LOCATION","GBC_PALETTE_SIZE","BG_PRIORITY_MAP_LOCATION","BG_PRIORITY_MAP_SIZE","FRAME_LOCATION","BACKGROUND_MAP_LOCATION","BACKGROUND_MAP_SIZE","TILE_DATA_LOCATION","TILE_DATA_SIZE","OAM_TILES_LOCATION","OAM_TILES_SIZE","AUDIO_BUFFER_LOCATION","AUDIO_BUFFER_SIZE","CARTRIDGE_RAM_LOCATION","CARTRIDGE_RAM_SIZE","CARTRIDGE_ROM_LOCATION","CARTRIDGE_ROM_SIZE","concatenateBytes","highByte","lowByte","splitHighByte","groupedByte","splitLowByte","rotateByteLeft","u8Portable","rotateByteLeftThroughCarry","getCarryFlag$$1","rotateByteRight","rotateByteRightThroughCarry","setBitOnByte","bitPosition","byte","resetBitOnByte","checkBitOnByte","param","u16Portable","i8Portable","response","i32Portable","setFlagBit","flagBit","flagValue","bitwiseOperand","Cpu","registerF","setZeroFlag$$1","setSubtractFlag","setHalfCarryFlag","setCarryFlag","getZeroFlag$$1","getSubtractFlag","getHalfCarryFlag","checkAndSetEightBitHalfCarryFlag","amountToAdd","result","checkAndSetEightBitCarryFlag","checkAndSetSixteenBitFlagsAddOverflow","valueOne","valueTwo","useStackPointerBits","signedValueOne","flagXor","halfCarryXor","halfCarryAnd","Palette","memoryLocationBackgroundPaletteIndex","memoryLocationBackgroundPaletteData","memoryLocationSpritePaletteIndex","memoryLocationSpritePaletteData","initializePalette","GBCEnabled","eightBitStoreIntoGBMemory","getMonochromeColorFromPalette","colorId","paletteMemoryLocation","shouldRepresentColorByColorId","color","eightBitLoadFromGBMemory","rgbColor","writeColorPaletteToMemory","paletteIndex","isSprite","storePaletteByteInWasmMemory","incrementPaletteIndexIfSet","getRgbColorFromPalette","paletteId","paletteHighByte","loadPaletteByteFromWasmMemory","paletteLowByte","getColorComponentFromRgb","colorRgb","bitMask","colorValue","paletteIndexByte","addPriorityforPixel","x","y","hasGbcBgPriority","bgPriorityByte","getPixelStart","getPriorityforPixel","clearPriorityMap","TileCache","tileId","horizontalFlip","nextXIndexToPerformCacheCheck","resetTileCache","drawPixelsFromLineOfTile","tileDataMemoryLocation","vramBankId","tileLineXStart","tileLineXEnd","tileLineY","outputLineX","outputLineY","outputWidth","wasmMemoryStart","shouldRepresentMonochromeColorByColorId","paletteLocation","bgMapAttributes","pixelsDrawn","tileDataAddress","getTileDataAddress","byteOneForLineOfTilePixels","loadFromVramBank","byteTwoForLineOfTilePixels","iteratedOutputX","pixelXInTile","paletteColorId","red","green","blue","bgPalette","rgbColorPalette","Graphics","memoryLocationBackgroundPalette","monochromeColor","pixelStart","getTilePixelStart","gbcBgPriority","tileIdFromTileMap","memoryLocationTileDataSelectZeroStart","signedTileId","isDutyCycleClockPositiveOrNegativeForWaveform","channelDuty","waveFormPositionOnDuty","Channel1","updateNRx0","NRx0SweepPeriod","NRx0Negate","NRx0SweepShift","updateNRx1","NRx1Duty","NRx1LengthLoad","lengthCounter","updateNRx2","NRx2StartingVolume","NRx2EnvelopeAddMode","NRx2EnvelopePeriod","isDacEnabled","updateNRx3","NRx3FrequencyLSB","frequency","NRx4FrequencyMSB","updateNRx4","NRx4LengthEnabled","storeBooleanDirectlyToWasmMemory","getSaveStateMemoryOffset","saveStateSlot","isEnabled","frequencyTimer","envelopeCounter","volume","dutyCycle","isSweepEnabled","sweepCounter","sweepShadowFrequency","loadBooleanDirectlyFromWasmMemory","initialize","memoryLocationNRx0","memoryLocationNRx1","memoryLocationNRx2","memoryLocationNRx3","memoryLocationNRx4","getSampleFromCycleCounter","accumulatedCycles","cycleCounter","getSample","resetTimer","GBCDoubleSpeed","numberOfCycles","overflowAmount","outputVolume","sample","trigger","calculateSweepAndCheckOverflow","willChannelUpdate","updateSweep","updateLength","updateEnvelope","setFrequency","passedFrequencyHighBits","passedFrequencyLowBits","register4","newRegister4","channelNumber","newFrequency","getNewFrequencyFromSweep","Channel2","Channel3","NRx2VolumeCode","waveTablePosition","volumeCodeChanged","volumeCode","positionIndexToAdd","memoryLocationWaveSample","memoryLocationWaveTable","Channel4","NRx3ClockShift","NRx3WidthMode","NRx3DivisorCode","divisor","linearFeedbackShiftRegister","getNoiseChannelFrequencyPeriod","lfsrBitZero","lfsrBitOne","xorLfsrBitZeroOne","SoundAccumulator","channel1Sample","channel2Sample","channel3Sample","channel4Sample","channel1DacEnabled","channel2DacEnabled","channel3DacEnabled","channel4DacEnabled","leftChannelSampleUnsignedByte","rightChannelSampleUnsignedByte","mixerVolumeChanged","mixerEnabledChanged","needToRemixSamples","initializeSoundAccumulator","accumulateSound","channel1WillUpdate","didChannelDacChange","channel2WillUpdate","channel3WillUpdate","channel4WillUpdate","Sound","downSampleCycleCounter","downSampleCycleMultiplier","maxDownSampleCycles","mixChannelSamples","setLeftAndRightOutputForAudioQueue","audioQueueIndex","wasmBoyMemoryMaxBufferSize","Config","enableBootRom","useGbcWhenAvailable","audioBatchProcessing","graphicsBatchProcessing","timersBatchProcessing","graphicsDisableScanlineRendering","audioAccumulateSamples","tileRendering","tileCaching","batchProcessCycles","updateNR50","NR50LeftMixerVolume","NR50RightMixerVolume","updateNR51","NR51IsChannel4EnabledOnLeftOutput","NR51IsChannel3EnabledOnLeftOutput","NR51IsChannel2EnabledOnLeftOutput","NR51IsChannel1EnabledOnLeftOutput","NR51IsChannel4EnabledOnRightOutput","NR51IsChannel3EnabledOnRightOutput","NR51IsChannel2EnabledOnRightOutput","NR51IsChannel1EnabledOnRightOutput","updateNR52","NR52IsSoundEnabled","maxFrameSequenceCycles","CLOCK_SPEED","frameSequenceCycleCounter","frameSequencer","clearAudioBuffer","currentCycles","memoryLocationNR50","memoryLocationNR51","memoryLocationNR52","memoryLocationChannel3LoadRegisterStart","initializeSound","batchProcessAudio","updateSound","frameSequencerUpdated","updateFrameSequencer","calculateSound","getNumberOfSamplesInAudioBuffer","mixedSample","leftChannelSample","rightChannelSample","getSampleAsUnsignedByte","mixerVolume","precision","convertedSample","maxDivider","leftVolume","rightVolume","audioQueueOffset","SoundRegisterWriteTraps","SoundRegisterReadTraps","registerNR52","Interrupts","updateInterruptEnabled","isVBlankInterruptEnabled","bitPositionVBlankInterrupt","isLcdInterruptEnabled","bitPositionLcdInterrupt","isTimerInterruptEnabled","bitPositionTimerInterrupt","isJoypadInterruptEnabled","bitPositionJoypadInterrupt","interruptsEnabledValue","updateInterruptRequested","isVBlankInterruptRequested","isLcdInterruptRequested","isTimerInterruptRequested","isJoypadInterruptRequested","interruptsRequestedValue","areInterruptsPending","masterInterruptSwitch","masterInterruptSwitchDelay","memoryLocationInterruptEnabled","memoryLocationInterruptRequest","checkInterrupts","wasInterruptHandled","_handleInterrupt","intteruptHandlerCycles","isHalted","setInterrupts","interruptRequest","stackPointer","sixteenBitStoreIntoGBMemory","programCounter","_requestInterrupt","requestVBlankInterrupt","requestLcdInterrupt","requestTimerInterrupt","requestJoypadInterrupt","Timers","updateDividerRegister","oldDividerRegister","dividerRegister","memoryLocationDividerRegister","timerEnabled","_checkDividerRegisterFallingEdgeDetector","_incrementTimerCounter","updateTimerCounter","timerCounterWasReset","timerCounterOverflowDelay","timerCounter","updateTimerModulo","timerModulo","updateTimerControl","oldTimerEnabled","newTimerInputClock","oldTimerCounterMaskBit","_getTimerCounterMaskBit","timerInputClock","newTimerCounterMaskBit","shouldIncrementTimerCounter","memoryLocationTimerCounter","memoryLocationTimerModulo","memoryLocationTimerControl","timerCounterMask","initializeTimers","batchProcessTimers","updateTimers","cyclesIncreased","newDividerRegister","timerCounterMaskBit","Joypad","updateJoypad","joypadRegisterFlipped","isDpadType","isButtonType","memoryLocationJoypadRegister","up","down","left","right","a","b","select","start","getJoypadState","joypadRegister","_pressJoypadButton","_releaseJoypadButton","buttonId","isStopped","isButtonStateChanging","_getJoypadButtonStateFromButtonId","_setJoypadButtonStateFromButtonId","isDpadTypeButton","shouldRequestInterrupt","isPressed","handleBanking","Memory","isRomOnly","isMBC2","romEnableByte","isRamBankingEnabled","isMBC5","currentRomBank","romBankLowerBits","isMBC1","isMBC3","isMBC1RomModeEnabled","romBankHigherBits","ramBankBits","currentRamBank","getRomBankAddress","gameboyOffset","switchableCartridgeRomLocation","getRamBankAddress","cartridgeRamLocation","initializeDma","startDmaTransfer","sourceAddressOffset","sourceAddress","spriteInformationByte","spriteInformationAddress","spriteInformationTableLocation","DMACycles","startHdmaTransfer","hdmaTriggerByteToBeWritten","isHblankHdmaActive","hdmaTriggerByte","memoryLocationHdmaTrigger","hdmaSource","getHdmaSourceFromMemory","hdmaDestination","getHdmaDestinationFromMemory","transferLength","hblankHdmaTransferLengthRemaining","hblankHdmaSource","hblankHdmaDestination","hdmaTransfer","updateHblankHdma","bytesToTransfer","remainingTransferLength","transferLengthAsByte","sourceByte","eightBitLoadFromGBMemoryWithTraps","hdmaDestinationWithWrapping","eightBitStoreIntoGBMemoryWithTraps","hdmaCycles","hdmaSourceHigh","memoryLocationHdmaSourceHigh","hdmaSourceLow","memoryLocationHdmaSourceLow","hdmaDestinationHigh","memoryLocationHdmaDestinationHigh","hdmaDestinationLow","memoryLocationHdmaDestinationLow","videoRamLocation","checkWriteTraps","echoRamLocation","wramOffset","spriteInformationTableLocationEnd","Lcd","currentLcdMode","unusableMemoryLocation","unusableMemoryEndLocation","memoryLocationLcdControl","memoryLocationWindowX","updateLcdControl","memoryLocationScanlineRegister","scanlineRegister","memoryLocationCoincidenceCompare","coincidenceCompare","memoryLocationDmaTransfer","memoryLocationScrollX","scrollX","memoryLocationScrollY","scrollY","windowX","memoryLocationWindowY","windowY","memoryLocationGBCWRAMBank","memoryLocationGBCVRAMBank","getWasmBoyOffsetFromGameBoyOffset","gameboyOffsetHighByte","internalRamBankZeroLocation","wramBankId","sixteenBitStoreIntoGBMemoryWithTraps","nextOffset","enabled","windowTileMapDisplaySelect","windowDisplayEnabled","bgWindowTileDataSelect","bgTileMapDisplaySelect","tallSpriteSize","spriteDisplayEnable","bgDisplayEnabled","memoryLocationLcdStatus","setLcdStatus","scanlineCycleCounter","lcdStatus","lcdMode","newLcdMode","MIN_CYCLES_SPRITES_LCD_MODE","MIN_CYCLES_TRANSFER_DATA_LCD_MODE","renderBackground","tileMapMemoryLocation","pixelYPositionInMap","drawBackgroundWindowScanline","renderWindow","xOffset","iStart","tileYPositionInMap","pixelXPositionInMap","tileXPositionInMap","tileMapAddress","usedTileCache","drawLineOfTileFromTileCache","drawLineOfTileFromTileId","drawColorPixelFromTileId","drawMonochromePixelFromTileId","xPixel","yPixel","pixelYInTile","setPixelOnFrame","wasLastTileHorizontallyFlipped","isCurrentTileHorizontallyFlipped","tileCacheIndex","previousXPixel","previousTilePixelLocation","getRgbPixelStart","tileCacheRgb","pixelPriority","xOffsetTileWidthRemainder","tileXStart","tileXEnd","renderSprites","useLargerSprites","spriteTableIndex","spriteYPosition","memoryLocationSpriteAttributesTable","spriteXPosition","spriteTileId","spriteHeight","spriteAttributes","isSpritePriorityBehindWindowAndBackground","flipSpriteY","flipSpriteX","currentSpriteLine","spriteTileAddressStart","memoryLocationTileDataSelectOneStart","spriteTileAddress","spriteDataByteOneForLineOfTilePixels","spriteDataByteTwoForLineOfTilePixels","tilePixel","spritePixelXInTile","spriteColorId","spriteXPixelLocationInCameraView","shouldShowFromLcdcPriority","shouldHideFromOamPriority","shouldHideFromBgPriority","bgColorFromPriorityByte","spritePaletteLocation","memoryLocationSpritePaletteOne","memoryLocationSpritePaletteTwo","spritePixelColorFromPalette","MAX_CYCLES_PER_SCANLINE","memoryLocationTileMapSelectZeroStart","memoryLocationTileMapSelectOneStart","batchProcessGraphics","updateGraphics","initializeGraphics","_drawScanline","_renderEntireFrame","wasmBoyAddress","checkReadTraps","upperDividerRegisterBits","readTrapResult","sixteenBitLoadFromGBMemory","lowByteReadTrapResult","highByteReadTrapResult","booleanAsInt","cartridgeRomLocation","internalRamBankOneLocation","initializeCartridge","MAX_CYCLES_PER_FRAME","registerA","registerB","registerC","registerD","registerE","registerH","registerL","memoryLocationSpeedSwitch","initializeCpu","addARegister","register","addAThroughCarryRegister","overflowedResult","subARegister","negativeRegister","subAThroughCarryRegister","carryRegisterCheck","andARegister","xorARegister","orARegister","cpARegister","tempResult","rotateRegisterLeft","rotateRegisterRight","rotateRegisterLeftThroughCarry","hasHighbit","rotateRegisterRightThroughCarry","hasLowBit","shiftLeftRegister","shiftRightArithmeticRegister","hasLowbit","swapNibblesOnRegister","highNibble","lowNibble","shiftRightLogicalRegister","testBitOnRegister","testByte","setBitOnRegister","bitValue","setByte","relativeJump","relativeJumpOffset","handleCbOpcode","cbOpcode","handledOpcode","instructionRegisterValue","instructionRegisterResult","registerNumber","eightBitLoadSyncCycles","opcodeHighNibble","eightBitStoreSyncCycles","executeOpcode$$1","opcode","handleOpcode0x","handleOpcode1x","handleOpcode2x","handleOpcode3x","handleOpcode4x","handleOpcode5x","handleOpcode6x","handleOpcode7x","handleOpcode8x","handleOpcode9x","handleOpcodeAx","handleOpcodeBx","handleOpcodeCx","handleOpcodeDx","handleOpcodeEx","handleOpcodeFx","syncCycles","sixteenBitLoadSyncCycles","sixteenBitStoreSyncCycles","getDataByteOne","getDataByteTwo","getConcatenatedDataByte","concatenatedDataByte","registerBC3","registerHL","registerBC9","registerBCB","speedSwitch","registerDE3","registerDE9","registerDEA","registerDEB","sixteenBitDataByte","registerHL2","registerHL3","adjustedRegister","adjustment","registerHL9","registerHLA","registerHLB","registerHL4","valueAtHL4","incrementer","registerHL5","valueAtHL5","valueAtHL6","valueAtHLE","registerBC1","cbCycles","registerDE1","largeDataByteOne","registerHL1","signedDataByteOne","registerAF1","hasStarted","hasCoreStarted","config","gbcType","executeFrame","executeStep","executeFrameAndCheckAudio","maxAudioBuffer","audioBufferSize","executeFrameUntilBreakpoint","breakpoint","getRegisterA","getRegisterB","getRegisterC","getRegisterD","getRegisterE","getRegisterH","getRegisterL","getRegisterF","getProgramCounter","getStackPointer","getOpcodeAtProgramCounter","getLY","drawBackgroundMapToWasmMemory","showColor","drawTileDataToWasmMemory","tileDataMapGridY","tileDataMapGridX","getDIV","getTIMA","getTMA","getTAC","wasmMemorySize","videoOutputLocation","backgroundMapLocation","tileDataMap","WasmBoyCore","freeze","update","emulationStep","getAudioQueueIndex","resetAudioQueue","getWasmBoyTsCore","instance","byteMemory","getPerformanceTimestamp","window","performance","now","Date","addTimeStamp","currentHighResTime","fpsTimeStamps","shift","timeStampsUntilReady","waitForTimeStampsForFrameRate","options","gameboyFrameRate","floor","MAX_AUDIO_LATENCY","currentFps","intervalRate","scheduleNextUpdate","highResTime","timeSinceLastTimestamp","nextUpdateTime","updateId","setTimeout","passedIntervalRate","paused","getFPS","shouldCheckAudio","headless","pauseFpsThrottle","isAudioEnabled","executePromise","Promise","resolve","executeAndCheckAudio","then","fps","shouldSkipRenderingFrame","frameSkip","frameSkipCounter","graphicsFrameEndIndex","graphicsFrameBuffer","memoryObject","forEach","key","isTooMuchLatency","isRunningFullSpeed","sendAudio","latencyDifferenceInSeconds","latencyDifferenceInMilli","audioBuffer","numberOfSamples","allowFastSpeedStretching","controllerWorkerPort","messageHandler","ports","bind","instantiateTask","clearTimeout","parameters","export","end","constant","log"],"mappings":"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"}