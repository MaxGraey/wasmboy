{"version":3,"file":"audio.worker.js","sources":["../../lib/worker/util.js","../../lib/worker/workerapi.js","../../lib/worker/smartworker.js","../../lib/worker/constants.js","../../lib/audio/worker/audio.worker.js"],"sourcesContent":["export function getEventData(event) {\n  if (event.data) {\n    return event.data;\n  }\n\n  return event;\n}\n\nexport const isInBrowser = typeof self !== 'undefined';\n\n// Function to read a base64 string as a buffer\nexport function readBase64String(base64String) {\n  if (isInBrowser) {\n    return base64String;\n  } else {\n    return readBase64Buffer(base64String).toString('utf8');\n  }\n}\n\nexport function readBase64Buffer(base64String) {\n  return Buffer.from(base64String.split(',')[1], 'base64');\n}\n","// Isomorphic worker api to be imported by web workers\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n// Initilize some of our isomorphic values\nimport { isInBrowser } from './util';\n\nlet parentPort;\nif (!isInBrowser) {\n  parentPort = require('worker_threads').parentPort;\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_postmessage_value_transferlist\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\nexport function postMessage(message, transferArray) {\n  // Can't bind parentPort.postMessage, so we need to kinda copy code here :p\n  if (isInBrowser) {\n    self.postMessage(message, transferArray);\n  } else {\n    parentPort.postMessage(message, transferArray);\n  }\n}\n\n// https://nodejs.org/api/worker_threads.html#worker_threads_worker_parentport\n// https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage\nexport function onMessage(callback, port) {\n  if (!callback) {\n    console.error('workerapi: No callback was provided to onMessage!');\n  }\n\n  // If we passed a port, use that\n  if (port) {\n    if (isInBrowser) {\n      // We are in the browser\n      port.onmessage = callback;\n    } else {\n      // We are in Node\n      port.on('message', callback);\n    }\n    return;\n  }\n\n  if (isInBrowser) {\n    // We are in the browser\n    self.onmessage = callback;\n  } else {\n    // We are in Node\n    parentPort.on('message', callback);\n  }\n}\n","// Smarter workers.\n// Workers with ids, pub sub, etc...\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n/*ROLLUP_REPLACE_NODE\nconst { Worker } = require('worker_threads');\nROLLUP_REPLACE_NODE*/\n\nimport { getEventData, readBase64String } from './util';\n\n// Generate ids. Use a counter to help against possible collisions.\nlet idCounter = 0;\nconst generateId = () => {\n  const randomId = Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(2, 10);\n  idCounter++;\n  const id = `${randomId}-${idCounter}`;\n  if (idCounter > 100000) {\n    idCounter = 0;\n  }\n  return id;\n};\n\nexport function getSmartWorkerMessage(message, messageId, workerId) {\n  if (!messageId) {\n    messageId = generateId();\n  }\n  return {\n    workerId,\n    messageId,\n    message\n  };\n}\n\nexport class SmartWorker {\n  constructor(workerUrl, id) {\n    this.id = generateId();\n    if (id) {\n      this.id = id;\n    }\n    this.messageListeners = [];\n\n    /*ROLLUP_REPLACE_BROWSER\n    \n    // Can't load base63 data string directly because safari\n    // https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\n    let workerJs = atob(workerUrl.split(',')[1]);\n    let blob;\n    try {\n      blob = new Blob([workerJs], {type: 'application/javascript'});\n    } catch (e) {\n      // Legacy\n      window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n      blob = new BlobBuilder();\n      blob.append(workerJs);\n      blob = blob.getBlob();\n    }\n    this.worker = new Worker(URL.createObjectURL(blob));\n\n\n    this.worker.onmessage = this._onMessageHandler.bind(this);\n\n    ROLLUP_REPLACE_BROWSER*/\n\n    /*ROLLUP_REPLACE_NODE\n\n    // Split by Comma, to remove the file header from the base 64 string\n    const workerAsString = readBase64String(workerUrl);\n    this.worker = new Worker(workerAsString, {\n      eval: true\n    });\n    this.worker.on('message', this._onMessageHandler.bind(this))\n\n    ROLLUP_REPLACE_NODE*/\n  }\n\n  postMessage(message, transfer) {\n    const messageObject = getSmartWorkerMessage(message, undefined, this.id);\n    const messageId = messageObject.messageId;\n\n    const messageIdListener = new Promise(resolve => {\n      // Listen for a message with the same message id to be returned\n      this.addMessageListener((responseMessage, messageListener) => {\n        const eventData = getEventData(responseMessage);\n        if (eventData.messageId === messageId) {\n          this.removeMessageListener(messageListener.id);\n          resolve(eventData);\n        }\n      });\n    });\n\n    this.worker.postMessage(messageObject, transfer);\n\n    return messageIdListener;\n  }\n\n  addMessageListener(callback) {\n    this.messageListeners.push({\n      id: generateId(),\n      callback: callback\n    });\n  }\n\n  removeMessageListener(id) {\n    let messageListenerIndex;\n    this.messageListeners.some((messageListener, index) => {\n      if (messageListener.id === id) {\n        messageListenerIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (messageListenerIndex !== undefined) {\n      this.messageListeners.splice(messageListenerIndex, 1);\n    }\n  }\n\n  _onMessageHandler(message) {\n    this.messageListeners.forEach(messageListener => {\n      messageListener.callback(message, messageListener);\n    });\n  }\n}\n","export const WORKER_MESSAGE_TYPE = {\n  CONNECT: 'CONNECT',\n  INSTANTIATE_WASM: 'INSTANTIATE_WASM',\n  CLEAR_MEMORY: 'CLEAR_MEMORY',\n  CLEAR_MEMORY_DONE: 'CLEAR_MEMORY_DONE',\n  GET_MEMORY: 'GET_MEMORY',\n  SET_MEMORY: 'SET_MEMORY',\n  SET_MEMORY_DONE: 'SET_MEMORY_DONE',\n  GET_CONSTANTS: 'GET_CONSTANTS',\n  GET_CONSTANTS_DONE: 'GET_CONSTANTS_DONE',\n  CONFIG: 'CONFIG',\n  RESET_AUDIO_QUEUE: 'RESET_AUDIO_QUEUE',\n  PLAY: 'PLAY',\n  PAUSE: 'PAUSE',\n  UPDATED: 'UPDATED',\n  CRASHED: 'CRASHED',\n  SET_JOYPAD_STATE: 'SET_JOYPAD_STATE',\n  AUDIO_LATENCY: 'AUDIO_LATENCY',\n  RUN_WASM_EXPORT: 'RUN_WASM_EXPORT',\n  GET_WASM_MEMORY_SECTION: 'GET_WASM_MEMORY_SECTION',\n  GET_WASM_CONSTANT: 'GET_WASM_CONSTANT'\n};\n\nexport const WORKER_ID = {\n  LIB: 'LIB',\n  GRAPHICS: 'GRAPHICS',\n  MEMORY: 'MEMORY',\n  CONTROLLER: 'CONTROLLER',\n  AUDIO: 'AUDIO'\n};\n\nexport const MEMORY_TYPE = {\n  CARTRIDGE_RAM: 'CARTRIDGE_RAM',\n  CARTRIDGE_ROM: 'CARTRIDGE_ROM',\n  CARTRIDGE_HEADER: 'CARTRIDGE_HEADER',\n  GAMEBOY_MEMORY: 'GAMEBOY_MEMORY',\n  PALETTE_MEMORY: 'PALETTE_MEMORY',\n  INTERNAL_STATE: 'INTERNAL_STATE'\n};\n","// Web worker for wasmboy lib\n// Will be used for running wasm, and controlling child workers.\n\nimport { postMessage, onMessage } from '../../worker/workerapi';\nimport { getEventData } from '../../worker/util';\nimport { getSmartWorkerMessage } from '../../worker/smartworker';\nimport { WORKER_MESSAGE_TYPE } from '../../worker/constants';\n\n// Convert our uint8 into a float sample\nconst getUnsignedAudioSampleAsFloat = audioSample => {\n  // Subtract 1 as it is added so the value is not empty\n  audioSample -= 1;\n  // Divide by 127 to get back to our float scale\n  audioSample = audioSample / 127;\n  // Subtract 1 to regain our sign\n  audioSample -= 1;\n\n  // Because of the innacuracy of converting an unsigned int to a signed float\n  // We will have some leftovers when doing the conversion.\n  // When testing with Pokemon blue, when it is supposed to be complete silence in the intro,\n  // It shows 0.007874015748031482, meaning we want to cut our values lower than this\n  if (Math.abs(audioSample) < 0.008) {\n    audioSample = 0;\n  }\n\n  // Return, but divide by lower volume, PCM is loouuuuddd\n  return audioSample / 2.5;\n};\n\nconst getAudioChannelBuffersFromBuffer = (audioBuffer, numberOfSamples) => {\n  // Create our buffers as Float 32 Array\n  // https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData\n  // Number of samples divided by two, since we split into each channel\n  const leftChannelBuffer = new Float32Array(numberOfSamples);\n  const rightChannelBuffer = new Float32Array(numberOfSamples);\n\n  // Our index on our left/right buffers\n  let bufferIndex = 0;\n\n  // Our total number of stereo samples\n  let numberOfSamplesForStereo = numberOfSamples * 2;\n\n  // Left Channel\n  for (let i = 0; i < numberOfSamplesForStereo; i = i + 2) {\n    leftChannelBuffer[bufferIndex] = getUnsignedAudioSampleAsFloat(audioBuffer[i]);\n    bufferIndex++;\n  }\n\n  // Reset the buffer index\n  bufferIndex = 0;\n\n  // Right Channel\n  for (let i = 1; i < numberOfSamplesForStereo; i = i + 2) {\n    rightChannelBuffer[bufferIndex] = getUnsignedAudioSampleAsFloat(audioBuffer[i]);\n    bufferIndex++;\n  }\n\n  return {\n    left: leftChannelBuffer.buffer,\n    right: rightChannelBuffer.buffer\n  };\n};\n\n// Worker port for the lib\nlet libWorkerPort;\n\nconst libMessageHandler = event => {\n  const eventData = getEventData(event);\n\n  // Handle update method transfrables\n  if (!eventData.message) {\n    return;\n  }\n\n  // Handle our messages from the lib thread\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS_DONE: {\n      postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId));\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.UPDATED: {\n      // Process the memory buffer and pass back to the main thread\n      const audioBufferAsArray = new Uint8Array(eventData.message.audioBuffer);\n      const audioChannelBuffers = getAudioChannelBuffersFromBuffer(audioBufferAsArray, eventData.message.numberOfSamples);\n      postMessage(\n        getSmartWorkerMessage({\n          type: WORKER_MESSAGE_TYPE.UPDATED,\n          leftChannel: audioChannelBuffers.left,\n          rightChannel: audioChannelBuffers.right,\n          numberOfSamples: eventData.message.numberOfSamples,\n          fps: eventData.message.fps,\n          allowFastSpeedStretching: eventData.message.allowFastSpeedStretching\n        }),\n        [audioChannelBuffers.left, audioChannelBuffers.right]\n      );\n      return;\n    }\n  }\n};\n\nconst messageHandler = event => {\n  // Handle our messages from the main thread\n  const eventData = getEventData(event);\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.CONNECT: {\n      // Set our lib port\n      libWorkerPort = eventData.message.ports[0];\n      onMessage(libMessageHandler, libWorkerPort);\n\n      // Simply post back that we are ready\n      postMessage(getSmartWorkerMessage(undefined, eventData.messageId));\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.GET_CONSTANTS: {\n      // Forward to our lib worker\n      libWorkerPort.postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId));\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.AUDIO_LATENCY: {\n      // Forward to our lib worker\n      libWorkerPort.postMessage(getSmartWorkerMessage(eventData.message, eventData.messageId));\n      return;\n    }\n\n    default: {\n      //handle other messages from main\n      console.log(eventData);\n    }\n  }\n};\n\nonMessage(messageHandler);\n"],"names":["getEventData","event","data","isInBrowser","self","parentPort","require","postMessage","message","transferArray","onMessage","callback","port","console","error","onmessage","on","idCounter","generateId","randomId","Math","random","toString","replace","substr","id","getSmartWorkerMessage","messageId","workerId","WORKER_MESSAGE_TYPE","CONNECT","INSTANTIATE_WASM","CLEAR_MEMORY","CLEAR_MEMORY_DONE","GET_MEMORY","SET_MEMORY","SET_MEMORY_DONE","GET_CONSTANTS","GET_CONSTANTS_DONE","CONFIG","RESET_AUDIO_QUEUE","PLAY","PAUSE","UPDATED","CRASHED","SET_JOYPAD_STATE","AUDIO_LATENCY","RUN_WASM_EXPORT","GET_WASM_MEMORY_SECTION","GET_WASM_CONSTANT","getUnsignedAudioSampleAsFloat","audioSample","abs","getAudioChannelBuffersFromBuffer","audioBuffer","numberOfSamples","leftChannelBuffer","Float32Array","rightChannelBuffer","bufferIndex","numberOfSamplesForStereo","i","left","buffer","right","libWorkerPort","libMessageHandler","eventData","type","audioBufferAsArray","Uint8Array","audioChannelBuffers","leftChannel","rightChannel","fps","allowFastSpeedStretching","messageHandler","ports","undefined","log"],"mappings":"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"}